{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/BaseComponent.ts","webpack:///./src/index.ts","webpack:///./src/RS.ts","webpack:///./src/DependencyInjector.ts","webpack:///./src/BalloonWindowTransformComponent.ts","webpack:///./src/Component.ts","webpack:///./src/EventEmitter.ts","webpack:///./src/NameWindowPositionComponent.ts","webpack:///./src/ComponentExecutor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BaseComponent","Component","props","super","console","log","this","_messageWindow","messageWindow","error","contents","_nameBoxWindow","Error","_choiceListWindow","windowWidth","windowHeight","save","restore","updatePadding","padding","itemPadding","newLineX","numLines","fittingHeight","text","textSizeEx","width","lineHeight","drawMessageFace","x","y","height","getInstance","add","alias_Bitmap_initialize","Bitmap","initialize","fontBold","fontGradient","highlightTextColor","setGradient","color1","color2","color3","tx","ty","context","_context","tWidth","measureTextWidth","gradient","createLinearGradient","addColorStop","_baseTexture","update","setGradientStyle","RS","MessageSystem","Params","grd","style","gradientStyle","contains","ws","hs","createRadialGradient","_makeFontNameText","fontItalic","fontSize","fontFace","_drawTextBody","maxWidth","imageSmoothingEnabled","fontSmoothingEnabled","gradientColor1","gradientColor2","gradientColor3","fillStyle","textColor","fillText","alias_Game_Message_clear","Game_Message","clear","_waitTime","_gradientText","_balloon","_align","_balloonPatternHeight","_lastAlign","setWaitTime","time","setGradientText","getWaitTime","getGradientText","getMaxLine","_maxLine","setMaxLine","maxLine","numVisibleRows","setBalloon","getBalloon","setAlign","push","getAlign","last","shift","undefined","clearAlignLast","setBalloonPatternHeight","getBalloonPatternHeight","Sprite_Battler","screenX","screenY","MessageDesc","outlineColor","outlineWidth","textSpeed","_isSaved","$gameMessage","Window_Base","obtainEscapeCode","textState","arr","Reg","defaultEscapeCode","exec","slice","index","length","toUpperCase","obtainNameColor","Color","gmColor","ColorManager","changeTextColor","color","parseInt","_isUsedTextWidthEx","alias_Window_Base_processEscapeCharacter","processEscapeCharacter","code","tcGroup","TextCodes","ENUM","textCode","Main","obtainEscapeParam","COLOR","ICON","processDrawIcon","INCREASE","makeFontBigger","DECREASE","makeFontSmaller","alias_loadWindowskin","loadWindowskin","windowskin","addLoadListener","baseColor","getFontFace","langCode","navigator","language","fonts","default","drawTextEx","resetFontSettings","createTextState","processAllText","outputWidth","drawing","processCharacter","flushTextState","minFontSize","defaultOutlineWidth","defaultOutlineColor","resetTextColor","maxFontSize","_messageDesc","alias_Window_Base_convertEscapeCharacters","convertEscapeCharacters","regGroup","Group","replace","VAR","args","$gameVariables","toString","PLAYER","actorName","PARTY_MEMBER","partyMemberName","NUM","toComma","GOLD","TextManager","currencyUnit","CLASSES","$dataClasses","ITEM","$dataItems","WEAPON","$dataWeapons","ARMOR","$dataArmors","ENEMY","$dataEnemies","STATE","$dataStates","SKILL","$dataSkills","ALIGN_LEFT","ALIGN","ALIGN_CENTER","ALIGN_RIGHT","Number","ALIGN_CLEAR","source","textPadding","processAlign","_textState","rtl","setAlignLeft","setAlignCenter","setAlignRight","alias_Window_Base_processNewLine_align","processNewLine","startX","contentsWidth","Window_Message","obtainTextSpeed","obtainGradientText","String","obtainSoundName","alias_Window_Message_processEscapeCharacter","TEXT_SPEED","TEXT_SIZE","setTextSize","OUTLINE_COLOR","setStrokeColor","INDENT","setTextIndent","OUTLINE_WIDTH","setStrokeWidth","BOLD","setTextBold","BOLD_START","BOLD_END","ITALIC","setTextItalic","ITALIC_START","ITALIC_END","GRADIENT","setTextGradient","HIGHLIGHT_TEXT_COLOR","setHighlightTextColor","TAB","textWidth","TabSize","CARRIAGE_RETURN","startWait","PLAY_SE","playSe","SHOW_PICTURE","showPicture","HIDE_PICTURE","erasePicture","FACE","split","clamp","seName","data","trim","pan","pitch","volume","ConfigManager","seVolume","AudioManager","param","raw","map","e","params","ret","forEach","a","$gameScreen","apply","picId","_pauseSignSprite","move","_width","_height","scale","resetGradient","alias_Window_Message_createTextState","px","py","assign","processWordWrap","w","isValid","Math","floor","needsNewPage","startPause","alias_Window_Message_processNewLinePW","charCodeAt","processControlCharacter","buffer","alias_Window_Message_processCharacter","isDirty","preLen","substr","processNormalCharacterProxy","isParagraphMinifier","faceName","ImageManager","faceWidth","faceDirection","contentW","contentH","_backBuffer","fillAll","alias_Window_Message_flushTextState","_showFast","isEndOfText","bitmap","h","blt","updateBigFaceOpacity","_faceContents","faceOpacity","opacity","fadeInOutFaceContents","isOpening","isClosing","openness","alias_Window_Message_checkToNotClose","checkToNotClose","updatePlacement","goldWindow","_goldWindow","_positionType","positionType","Graphics","boxWidth","windowOffset","boxHeight","SceneManager","_scene","Scene_Map","DependencyInjector","getComponent","updateBalloonPosition","minGoldY","updateDefaultOpacity","updateContentsOpacity","isBigFace","backIndex","faceSide","setFaceZIndex","zIndex","parent","isFaceSide","setChildIndex","alias_Window_Message_convertEscapeCharacters","BOLD_START_CV","BOLD_END_CV","ITALIC_START_CV","ITALIC_END_CV","NAME","retName","endsWith","namePositionTypeAtX","_nameWindow","drawName","BALLOON","arguments","$gameParty","inBattle","abs","FRIENDLY_TROOPS","ENEMY_TROOPS","FACE_DIRECTION","setHeight","createContents","alias_Window_Message_initialize","rect","$gameTemp","setMSHeightFunc","createFaceContents","on","removeEventHandler","onLoadWindowskin","calcBalloonRect","startMessage","allText","tempText","newPage","resizeMessageSystem","updateBackground","open","start","getDefaultWindowRect","Scene_Message","messageWindowRect","isResetOwner","Scene_Battle","ox","oy","windowRect","$gameMap","setMsgOwner","$gamePlayer","off","isReady","getPixel","loadSystem","_isDirtyWindowskin","setTimeout","_Window_Message_updateLoading","updateLoading","contentsHeight","Sprite","addChildAt","removeFaceContents","removeChild","faceIndex","faceStartX","textStartX","faceStartOriginX","isValidBigFace","updateNameWindow","standardBackOpacity","backOpacity","translucentOpacity","defaultOpacity","contentsOpacity","getSpriteActors","sign","members","max","type","id","getSpriteEnemies","$gameTroop","setupOwner","getMsgEvent","test","RegExp","$1","event","alias_Window_Message_shouldBreakHere","shouldBreakHere","isBreakCharacter","isPlayTextSound","interval","textSoundInterval","_textSoundInterval","playStaticSe","popParameter","Game_Interpreter","processMessageParams","eventId","meta","getEventComments","windowskinForNameWindow","faceOX","faceOY","Boolean","isValidMultiLine","codes","prevCode","lineCount","currentCommand","_list","_index","choiceWindowStyle","multiLineAddMessage","initLineHeight","_texts","nextEventCode","parameters","addLineHeight","_lineHeight","isMultiLine","Window_NameBox","isRTL","Game_Temp","func","_callMSHeightFunc","alias_Game_Map_initialize","Game_Map","_msgOwner","_msgEvent","getMsgOwner","tileHeight","setMsgEvent","ev","alias_Scene_Message_associateWindows__enrtyPoint","associateWindows","injectMessageWindow","ready","alias_Scene_Message_terminate","terminate","ejectMessageWindow","initSystem","nw","Window","showDevTools","moveTo","window","outerWidth","executeAll","pluginParams","$plugins","filter","description","pluginName","MessageParams","jsonParse","str","JSON","parse","k","v","keys","lastUsed","pop","Default","Korean","Chinese","English","Japanese","FACE_START_ORIGIN_X","nameWindowWidth","NAME_WINDOW_WIDTH","nameWindowRows","NAME_WINDOW_ROWS","FONT_SIZE","STD_PADDING","isValidShakingChoice","nameWindowX","nameWindowY","nameWindowStdPadding","WIDTH","HEIGHT","isTempSpriteContainerVisibility","Point","customFont","customFontName","customFontSrc","defaultChoicePostion","exTextColors","pathTextSound","textSoundEval1","textSoundEval2","textSoundPoolSize","preloadWindowskins","systemFonts","settings","languageCode","fontName","alias_Game_Temp_initialize","eval","KoreanEscapeCode","ChineseEscapeCode","EnglishEscapeCode","JapaneseEscapeCode","rowData","retData","concat","WAIT_SEC_15","WAIT_SEC_60","START_PAUSE","LINE_SHOW_FAST_LT","LINE_SHOW_FAST_GT","PAUSE_SKIP","getTextCode","idx","match","note","list","commonEvent","reservedCommonEvent","re","join","getColor","getBaseColor","getUserCustomColor","obj","g","b","parseFloat","KOREAN_COLORS","청록","청록색","c_aqua","검은색","검정","c_black","파란색","파랑","c_blue","짙은회색","c_dkgray","자홍색","자홍","c_fuchsia","회색","c_gray","녹색","c_green","밝은녹색","라임","c_lime","밝은회색","c_ltgray","밤색","마룬","c_maroon","감청색","네이비","c_navy","황록색","올리브","c_olive","주황색","주황","오렌지","c_orange","보라색","보라","c_purple","빨간색","빨강","c_red","은색","은","c_silver","민트색","c_teal","흰색","흰","c_white","노란색","노랑","c_yellow","CHINESE_COLOR","水色","黑色","蓝色","深灰色","紫红色","灰色","绿色","浅绿色","浅灰色","栗色","绀青色","黄绿色","橙黄色","紫色","红色","银白色","水鸭色","白色","黄色","ENGLISH_COLOR","AQUA","BLACK","BLUE","DKGRAY","FUCHSIA","GRAY","GREEN","LIME","LTGRAY","MAROON","NAVY","OLIVE","ORANGE","PURPLE","RED","SILVER","TEAL","WHITE","YELLOW","JAPANESE_COLOR","アクア色","靑色","ふか灰色","紫紅色","綠色","黃綠","鼠色","群青色","ネイビー","黃綠色","オリーブ色","橙色","オレンジ色","赤色","レッド","銀色","ミント色","薄荷色","黃色","getKoreanColor","getChineseColor","getEnglishColor","getJapaneseColor","getBrowser","tem","ua","userAgent","M","version","appName","appVersion","splice","inject","_isDirty","COMPONENTS","BalloonWindowTransformComponent","NameWindowPositionComponent","getComponentClass","component","_components","_bWidth","_bHeight","onReady","temp","baseWidth","min","pad","numOfLines","standardPadding","calcBalloonRectHeight","pw","isChoice","maxChoices","choices","_choiceWindow","dx","dy","mx","canvasToLocalX","my","scaleY","ny","isActiveInBalloon","owner","getNameWindowY","stringify","setBalloonPlacement","setBalloonRect","updateSubBalloonElements","warn","$gameSystem","isSideView","scene","_spriteset","_actorSprites","_enemySprites","tempBattlers","target","_actor","isAlive","_enemy","padY","_mainSprite","transform","updateTransform","tempFontSize","calcTextHeight","EventEmitter","init","mounted","onDestroy","emit","_listeners","eventName","Function","isNaN","position","nx","newX","setOpacity","ballonOwnerType","updatePositionX","topY","isOpen","ComponentExecutor","INSTANCE","startChar","endChar","len","fromCharCode","random","callbackFunction","active","currentCallback"],"mappings":"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","file":"RS_MessageSystem.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { Component, ComponentProp } from \"./Component\";\n\n/**\n * @class BaseComponent\n * @description\n * 샌드박스 환경에서 MV 메소드를 호출하여 이전 버전에 대한 안전성을 제공합니다.\n */\nexport class BaseComponent extends Component {\n    private _messageWindow!: Window_Message;\n\n    constructor(props: ComponentProp) {\n        super(props);\n    }\n\n    onReady(props: ComponentProp) {\n        // if the message window is valid from passed props.\n        if (!(\"messageWindow\" in props)) {\n            console.error(\"messageWindow is not defined\");\n            return;\n        }\n\n        console.log(\"On Ready 이벤트가 실행되었습니다.\");\n\n        /**\n         * @type {Window_Message}\n         */\n        this._messageWindow = props.messageWindow;\n    }\n\n    // Getters\n    get messageWindow() {\n        return this._messageWindow;\n    }\n\n    get contents() {\n        return this._messageWindow.contents;\n    }\n\n    /**\n     * @returns {Window_NameBox}\n     */\n    get _nameWindow(): never | Window_NameBox {\n        const isNameWindowOK = this._messageWindow._nameBoxWindow;\n        if (!isNameWindowOK) {\n            throw new Error(\n                \"이름 윈도우가 아직 정의되지 않았습니다. DI를 제대로된 시점에 하시기 바랍니다.\"\n            );\n        }\n\n        return this._messageWindow._nameBoxWindow;\n    }\n\n    get _choiceWindow() {\n        return this._messageWindow._choiceListWindow\n            ? this._messageWindow._choiceListWindow\n            : {\n                  windowWidth: () => 0,\n                  windowHeight: () => 0,\n              };\n    }\n\n    save() {\n        // 'this._messageWindow?.save()'의 구현입니다.\n        // 하지만 save는 함수가 아닐 수도 있습니다.\n        // 타입의 안전성은 체크하지 않습니다.\n        this._messageWindow.save ? this._messageWindow.save() : null;\n    }\n\n    restore() {\n        // 'this._messageWindow?.restore()'의 구현입니다.\n        // 하지만 save는 함수가 아닐 수도 있습니다.\n        // 타입의 안전성은 체크하지 않습니다.\n        this._messageWindow.restore ? this._messageWindow.restore() : null;\n    }\n\n    standardPadding() {\n        // 패딩을 업데이트해야 합니다 (MZ에서 달라진 부분입니다)\n        // 꼭 체크할 필요는 없지만...\n        this._messageWindow.updatePadding();\n        const padding = this._messageWindow.padding || 12;\n\n        return padding;\n    }\n\n    textPadding() {\n        // textPadding()의 구현입니다.\n        return this._messageWindow.itemPadding() || 6;\n    }\n\n    newLineX() {\n        return this._messageWindow.newLineX();\n    }\n\n    fittingHeight(numLines: number) {\n        return this._messageWindow.fittingHeight(numLines);\n    }\n\n    drawTextEx(text: string) {\n        const box = this._messageWindow.textSizeEx(text);\n        return box.width;\n    }\n\n    lineHeight() {\n        return this._messageWindow.lineHeight();\n    }\n\n    /**\n     * TODO: 상속 시, 이 메소드를 오버라이드 하세요.\n     */\n    updatePlacement() {}\n\n    drawMessageFace() {\n        this._messageWindow.drawMessageFace();\n    }\n\n    set x(value: number) {\n        this._messageWindow.x = value;\n    }\n\n    set y(value: number) {\n        this._messageWindow.y = value;\n    }\n\n    set width(value: number) {\n        this._messageWindow.width = value;\n    }\n\n    set height(value: number) {\n        this._messageWindow.height = value;\n    }\n\n    get width() {\n        return this._messageWindow.width;\n    }\n\n    get _width() {\n        return this._messageWindow.width;\n    }\n\n    get height() {\n        return this._messageWindow.height;\n    }\n\n    get _height() {\n        return this._messageWindow.height;\n    }\n\n    canvasToLocalX(x: number) {\n        return x;\n    }\n\n    canvasToLocalY(y: number) {\n        return y;\n    }\n}\n","/// <reference types=\"../types/my-types\" />\n/// <reference types=\"../types/lunalite-pixi-mz\" />\nimport { Color } from \"./RS\";\nimport { DependencyInjector } from \"./DependencyInjector\";\nimport { BalloonWindowTransformComponent } from \"./BalloonWindowTransformComponent\";\nimport { NameWindowPositionComponent } from \"./NameWindowPositionComponent\";\nimport ComponentExecutor from \"./ComponentExecutor\";\n\nconst executor = ComponentExecutor.getInstance();\n\nexecutor\n    /**\n     * ? Bitmap\n     * @description 텍스트에 그라데이션을 채우는 기능을 추가합니다.\n     */\n    .add(\"bitmap\", () => {\n        const alias_Bitmap_initialize = Bitmap.prototype.initialize;\n        Bitmap.prototype.initialize = function (width: number, height: number) {\n            alias_Bitmap_initialize.call(this, width, height);\n            this.fontBold = false;\n            this.fontGradient = false;\n            this.highlightTextColor = null;\n        };\n\n        Bitmap.prototype.setGradient = function (\n            text,\n            color1,\n            color2,\n            color3,\n            tx,\n            ty\n        ) {\n            const context = this._context;\n            const tWidth = this.measureTextWidth(text);\n            context.save();\n            const gradient = context.createLinearGradient(\n                tx,\n                0,\n                tx + tWidth,\n                0\n            );\n            gradient.addColorStop(0, color1);\n            gradient.addColorStop(0.6, color2);\n            gradient.addColorStop(1, color3);\n            context.restore();\n\n            this._baseTexture.update();\n\n            return gradient;\n        };\n\n        Bitmap.prototype.setGradientStyle = function (\n            text,\n            color1,\n            color2,\n            color3,\n            tx,\n            ty\n        ) {\n            const context = this._context;\n            const width = this.measureTextWidth(text);\n            const height = RS.MessageSystem.Params.lineHeight;\n            let grd;\n\n            context.save();\n\n            const style = RS.MessageSystem.Params.gradientStyle;\n\n            if (style !== \"radial\") {\n                if (style.contains(\"horizontal\")) {\n                    grd = context.createLinearGradient(tx, 0, tx + width, 0);\n                } else {\n                    grd = context.createLinearGradient(tx, 0, 0, ty + height);\n                }\n            } else {\n                const ws = width * 0.5;\n                const hs = height * 0.5;\n                grd = context.createRadialGradient(ws, hs, 0.0, ws, hs, ws);\n            }\n\n            if (style === \"radial\") {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(1.0, color2);\n            } else if (style.contains(\"axial\")) {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(0.5, color2);\n                grd.addColorStop(1.0, color3);\n            } else {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(1.0, color2);\n            }\n\n            context.restore();\n\n            this._baseTexture.update();\n\n            return grd;\n        };\n\n        Bitmap.prototype._makeFontNameText = function () {\n            return (\n                (this.fontItalic ? \"Italic \" : \"\") +\n                (this.fontBold ? \"bold \" : \"\") +\n                this.fontSize +\n                \"px \" +\n                this.fontFace\n            );\n        };\n\n        Bitmap.prototype._drawTextBody = function (text, tx, ty, maxWidth) {\n            const context = this._context;\n            context.save(); // 드로잉 상태 저장\n            context.imageSmoothingEnabled =\n                RS.MessageSystem.Params.fontSmoothingEnabled;\n\n            if (this.fontGradient) {\n                var gradient = this.setGradientStyle(\n                    text,\n                    RS.MessageSystem.Params.gradientColor1,\n                    RS.MessageSystem.Params.gradientColor2,\n                    RS.MessageSystem.Params.gradientColor3,\n                    tx,\n                    ty\n                );\n                context.fillStyle = gradient;\n            } else {\n                context.fillStyle = this.textColor;\n            }\n            context.fillText(text, tx, ty, maxWidth);\n            context.fillStyle = this.textColor;\n            context.restore();\n        };\n    })\n    /**\n     * ? Main\n     * @description\n     * 메인 엔트리 포인트입니다.\n     */\n    .add(\"main\", () => {\n        //============================================================================\n        // Game_Message\n        //============================================================================\n        const alias_Game_Message_clear = Game_Message.prototype.clear;\n        Game_Message.prototype.clear = function () {\n            alias_Game_Message_clear.call(this);\n            this._waitTime = 0;\n            this._gradientText = \"\";\n            this._balloon = -2;\n            this._align = [];\n            this._balloonPatternHeight = 0;\n            this._lastAlign = -1;\n        };\n\n        Game_Message.prototype.setWaitTime = function (time) {\n            this._waitTime = time;\n        };\n\n        Game_Message.prototype.setGradientText = function (text) {\n            this._gradientText = text;\n        };\n\n        Game_Message.prototype.getWaitTime = function () {\n            return this._waitTime || 0;\n        };\n\n        Game_Message.prototype.getGradientText = function () {\n            return this._gradientText;\n        };\n\n        Game_Message.prototype.getMaxLine = function () {\n            return this._maxLine;\n        };\n\n        Game_Message.prototype.setMaxLine = function (maxLine) {\n            this._maxLine = maxLine;\n            RS.MessageSystem.Params.numVisibleRows = maxLine;\n        };\n\n        Game_Message.prototype.setBalloon = function (n) {\n            this._balloon = n;\n        };\n\n        Game_Message.prototype.getBalloon = function (n) {\n            return this._balloon;\n        };\n\n        Game_Message.prototype.setAlign = function (n) {\n            this._align = this._align || [];\n            this._lastAlign = n; // 마지막 정렬 위치 기억\n            this._align.push(n);\n        };\n\n        Game_Message.prototype.getAlign = function (n) {\n            const last = this._align.shift();\n            if (last === undefined) {\n                return this._lastAlign;\n            }\n            return last;\n        };\n\n        Game_Message.prototype.clearAlignLast = function (n) {\n            this._lastAlign = -1;\n        };\n\n        Game_Message.prototype.setBalloonPatternHeight = function (\n            value: number\n        ) {\n            this._balloonPatternHeight = value;\n        };\n\n        Game_Message.prototype.getBalloonPatternHeight = function () {\n            return this._balloonPatternHeight;\n        };\n\n        //============================================================================\n        // Sprite_Battler\n        //============================================================================\n\n        Sprite_Battler.prototype.screenX = function () {\n            return this.x || 0;\n        };\n\n        Sprite_Battler.prototype.screenY = function () {\n            return this.y || 0;\n        };\n\n        //============================================================================\n        // MessageDesc\n        //============================================================================\n\n        class MessageDesc {\n            public fontFace: string;\n            public fontSize: number;\n            public fontBold: boolean;\n            public fontItalic: boolean;\n            public textColor: string;\n            public outlineColor: string;\n            public outlineWidth: number;\n            public fontGradient: boolean;\n            public highlightTextColor: string | null;\n            public textSpeed: number;\n\n            private _isSaved: boolean;\n\n            constructor() {\n                this.fontFace = \"Nanum Gothic\";\n                this.fontSize = 12;\n                this.fontBold = false;\n                this.fontItalic = false;\n                this.textColor = \"#000\";\n                this.outlineColor = \"#fff\";\n                this.outlineWidth = 1;\n                this.fontGradient = false;\n                this.highlightTextColor = null;\n                this.textSpeed = 1;\n\n                this._isSaved = false;\n            }\n\n            /**\n             *\n             * @param {Bitmap} contents\n             */\n            save(contents: Bitmap) {\n                this.fontFace = contents.fontFace;\n                this.fontSize = contents.fontSize;\n                this.fontBold = contents.fontBold;\n                this.fontItalic = contents.fontItalic;\n                this.textColor = contents.textColor;\n                this.outlineColor = contents.outlineColor;\n                this.outlineWidth = contents.outlineWidth;\n                this.fontGradient = contents.fontGradient;\n                this.highlightTextColor = contents.highlightTextColor;\n\n                if ($gameMessage) {\n                    this.textSpeed = $gameMessage.getWaitTime();\n                }\n\n                this._isSaved = true;\n            }\n\n            restore(contents: Bitmap) {\n                if (!this._isSaved) return;\n                if (!(contents instanceof Bitmap)) return;\n                contents.fontFace = this.fontFace;\n                contents.fontSize = this.fontSize;\n                contents.fontBold = this.fontBold;\n                contents.fontItalic = this.fontItalic;\n                contents.textColor = this.textColor;\n                contents.outlineColor = this.outlineColor;\n                contents.outlineWidth = this.outlineWidth;\n                contents.fontGradient = this.fontGradient;\n                contents.highlightTextColor = this.highlightTextColor;\n                if ($gameMessage) {\n                    $gameMessage.setWaitTime(this.textSpeed);\n                }\n                this._isSaved = false;\n            }\n        }\n\n        //============================================================================\n        // Window_Base\n        //============================================================================\n\n        Window_Base.prototype.obtainEscapeCode = function (textState) {\n            const regExp = RS.MessageSystem.Reg.defaultEscapeCode;\n            const arr = regExp.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return arr[0].toUpperCase();\n            } else {\n                return \"\";\n            }\n        };\n\n        /**\n         * 확장된 색상 변경 텍스트 코드 처리\n         * \\색[빨강]과 웹색상 처리를 위한 정규 표현식 처리\n         * @param {}} textState\n         */\n        Window_Base.prototype.obtainNameColor = function (textState) {\n            const arr = /\\[(.+?)\\]/gi.exec(\n                textState.text.slice(textState.index)\n            );\n            if (arr) {\n                textState.index += arr[0].length;\n                return Color.gmColor(arr[1]);\n            } else {\n                return ColorManager.textColor(0);\n            }\n        };\n\n        Window_Base.prototype.changeTextColor = function (color) {\n            const c = parseInt(color);\n            // 색상 코드가 숫자인 경우\n            if (c > 0 && c < 32) {\n                color = ColorManager.textColor(color);\n            }\n            if (!this._isUsedTextWidthEx) {\n                this.contents.textColor = color;\n            }\n        };\n\n        const alias_Window_Base_processEscapeCharacter =\n            Window_Base.prototype.processEscapeCharacter;\n        Window_Base.prototype.processEscapeCharacter = function (\n            code,\n            textState\n        ) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            switch (code) {\n                case \"C\":\n                    this.changeTextColor(\n                        this.textColor(\n                            <number>this.obtainEscapeParam(textState)\n                        )\n                    );\n                    break;\n                case textCode[tcGroup.COLOR]:\n                    this.changeTextColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case \"I\":\n                case textCode[tcGroup.ICON]:\n                    this.processDrawIcon(\n                        <number>this.obtainEscapeParam(textState),\n                        textState\n                    );\n                    break;\n                case \"{\":\n                case textCode[tcGroup.INCREASE]:\n                    this.makeFontBigger();\n                    break;\n                case \"}\":\n                case textCode[tcGroup.DECREASE]:\n                    this.makeFontSmaller();\n                    break;\n                case \"AEND\":\n                    $gameMessage.clearAlignLast();\n                    break;\n                default:\n                    alias_Window_Base_processEscapeCharacter.call(\n                        this,\n                        code,\n                        textState\n                    );\n                    break;\n            }\n        };\n\n        const alias_loadWindowskin = Window_Base.prototype.loadWindowskin;\n        Window_Base.prototype.loadWindowskin = function () {\n            alias_loadWindowskin.call(this);\n            this.windowskin.addLoadListener(() => {\n                Color.baseColor = ColorManager.textColor(0);\n            });\n        };\n\n        Window_Base.prototype.getFontFace = function () {\n            const langCode =\n                RS.MessageSystem.Params.langCode ||\n                navigator.language.slice(0, 2);\n            const fonts = RS.MessageSystem.Params.fonts[langCode];\n            if (fonts) {\n                return fonts;\n            } else {\n                return RS.MessageSystem.Params.fonts.default;\n            }\n        };\n\n        Window_Base.prototype.drawTextEx = function (text, x, y, width) {\n            this.save();\n            this.resetFontSettings();\n            const textState = this.createTextState(text, x, y, width);\n            this.processAllText(textState);\n            this.restore();\n            return textState.outputWidth;\n        };\n\n        Window_Base.prototype.processAllText = function (textState) {\n            this._isUsedTextWidthEx = !textState.drawing;\n            while (textState.index < textState.text.length) {\n                this.processCharacter(textState);\n            }\n            this.flushTextState(textState);\n        };\n\n        Window_Base.prototype.makeFontSmaller = function () {\n            if (this.contents.fontSize >= RS.MessageSystem.Params.minFontSize) {\n                this.contents.fontSize -= 12;\n            }\n        };\n\n        Window_Base.prototype.resetFontSettings = function () {\n            this.contents.fontFace = this.getFontFace();\n            this.contents.fontSize = RS.MessageSystem.Params.fontSize;\n            this.contents.fontBold = false;\n            this.contents.fontItalic = false;\n            this.contents.outlineWidth =\n                RS.MessageSystem.Params.defaultOutlineWidth;\n            this.contents.outlineColor =\n                RS.MessageSystem.Params.defaultOutlineColor;\n\n            this.contents.fontGradient = false;\n            this.contents.highlightTextColor = null;\n            this.resetTextColor();\n        };\n\n        Window_Base.prototype.makeFontBigger = function () {\n            if (this.contents.fontSize <= RS.MessageSystem.Params.maxFontSize) {\n                this.contents.fontSize += 12;\n            }\n        };\n\n        Window_Base.prototype.save = function () {\n            this._messageDesc = new MessageDesc();\n            this._messageDesc.save(this.contents);\n        };\n\n        Window_Base.prototype.restore = function () {\n            if (!this._messageDesc) return;\n            this._messageDesc.restore(this.contents);\n            this._messageDesc = undefined;\n        };\n\n        const alias_Window_Base_convertEscapeCharacters =\n            Window_Base.prototype.convertEscapeCharacters;\n        Window_Base.prototype.convertEscapeCharacters = function (text) {\n            const regGroup = RS.MessageSystem.Reg.Group;\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n\n            text = alias_Window_Base_convertEscapeCharacters.call(this, text);\n            text = text.replace(\n                regGroup[tcGroup.VAR],\n                function (...args: any[]): string {\n                    return $gameVariables\n                        .value(parseInt(<string>args[1]))\n                        .toString();\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.VAR],\n                function (...args: any[]) {\n                    return $gameVariables.value(parseInt(args[1])).toString();\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.PLAYER], (...args: any[]) => {\n                return this.actorName(parseInt(args[1]));\n            });\n            text = text.replace(\n                regGroup[tcGroup.PARTY_MEMBER],\n                (...args: any[]) => {\n                    return this.partyMemberName(parseInt(args[1]));\n                }\n            );\n            text = text.replace(\n                regGroup[tcGroup.NUM],\n                function (...args: any[]) {\n                    return args[1].toComma();\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.GOLD],\n                TextManager.currencyUnit\n            );\n            text = text.replace(\n                regGroup[tcGroup.CLASSES],\n                function (...args: any[]) {\n                    return $dataClasses[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITEM],\n                function (...args: any[]) {\n                    return $dataItems[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.WEAPON],\n                function (...args: any[]) {\n                    return $dataWeapons[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ARMOR],\n                function (...args: any[]) {\n                    return $dataArmors[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ENEMY],\n                function (...args: any[]) {\n                    return $dataEnemies[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.STATE],\n                function (...args: any[]) {\n                    return $dataStates[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.SKILL],\n                function (...args: any[]) {\n                    return $dataSkills[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_LEFT],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[0]\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_CENTER],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[1]\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_RIGHT],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[2]\";\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.ALIGN], (...args: any[]) => {\n                if (!this._isUsedTextWidthEx) {\n                    $gameMessage.setAlign(Number(args[1] || 0));\n                }\n                return \"\";\n            });\n            text = text.replace(\n                /<\\/LEFT>|<\\/CENTER>|<\\/RIGHT>/gi,\n                function () {\n                    return regGroup[tcGroup.ALIGN_CLEAR].source;\n                }.bind(this)\n            );\n            return text;\n        };\n\n        /**\n         * @deprecated\n         */\n        Window_Base.prototype.textPadding = function () {\n            return this.itemPadding();\n        };\n\n        Window_Base.prototype.newLineX = function (textState) {\n            return this.textPadding();\n        };\n\n        Window_Base.prototype.processAlign = function (textState) {\n            textState = textState || this._textState;\n\n            const isArabic = textState.rtl;\n\n            if (isArabic) {\n                return;\n            }\n\n            switch ($gameMessage.getAlign()) {\n                case 0:\n                    this.setAlignLeft(textState);\n                    break;\n                case 1:\n                    this.setAlignCenter(textState);\n                    break;\n                case 2:\n                    this.setAlignRight(textState);\n                    break;\n            }\n        };\n\n        const alias_Window_Base_processNewLine_align =\n            Window_Base.prototype.processNewLine;\n        Window_Base.prototype.processNewLine = function (textState) {\n            alias_Window_Base_processNewLine_align.call(this, textState);\n            this.processAlign(<TextState>textState);\n        };\n\n        Window_Base.prototype.setAlignLeft = function (textState) {\n            textState.x = this.newLineX(textState);\n            textState.startX = textState.x;\n        };\n\n        Window_Base.prototype.setAlignCenter = function (textState) {\n            const padding = this.textPadding();\n            textState.x =\n                (this.newLineX(textState) + this.contentsWidth() + padding) /\n                    2 -\n                textState.outputWidth / 2;\n            textState.startX = textState.x;\n        };\n\n        Window_Base.prototype.setAlignRight = function (textState) {\n            const padding = this.textPadding();\n            textState.x =\n                this.contentsWidth() - padding - textState.outputWidth;\n            textState.startX = textState.x;\n        };\n\n        //============================================================================\n        // Window_Message\n        //============================================================================\n\n        Window_Message.prototype.obtainTextSpeed = function (textState) {\n            const arr = /\\[(\\d+)\\]/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return parseInt(arr[1]);\n            } else {\n                return 0;\n            }\n        };\n\n        Window_Message.prototype.obtainGradientText = function (textState) {\n            const arr = /^<(.+?)>/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return String(arr[1]);\n            } else {\n                return \"Empty Text\";\n            }\n        };\n\n        Window_Message.prototype.obtainSoundName = function (textState) {\n            const arr = /\\<(.+?)\\>/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return String(arr[1]);\n            } else {\n                return \"\";\n            }\n        };\n\n        const alias_Window_Message_processEscapeCharacter =\n            Window_Message.prototype.processEscapeCharacter;\n        Window_Message.prototype.processEscapeCharacter = function (\n            code,\n            textState: TextState | string\n        ) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            switch (code) {\n                case textCode[tcGroup.TEXT_SPEED]:\n                    $gameMessage.setWaitTime(\n                        <number>this.obtainEscapeParam(textState)\n                    );\n                    break;\n                case textCode[tcGroup.TEXT_SIZE]:\n                    this.setTextSize(<number>this.obtainEscapeParam(textState));\n                    break;\n                case textCode[tcGroup.OUTLINE_COLOR]:\n                    this.setStrokeColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.INDENT]:\n                    this.setTextIndent(<TextState>textState);\n                    break;\n                case textCode[tcGroup.OUTLINE_WIDTH]:\n                    this.setStrokeWidth(\n                        <number>this.obtainEscapeParam(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.BOLD]:\n                    this.setTextBold(!this.contents.fontBold);\n                    break;\n                case textCode[tcGroup.BOLD_START]:\n                    this.setTextBold(true);\n                    break;\n                case textCode[tcGroup.BOLD_END]:\n                    this.setTextBold(false);\n                    break;\n                case textCode[tcGroup.ITALIC]:\n                    this.setTextItalic(!this.contents.fontItalic);\n                    break;\n                case textCode[tcGroup.ITALIC_START]:\n                    this.setTextItalic(true);\n                    break;\n                case textCode[tcGroup.ITALIC_END]:\n                    this.setTextItalic(false);\n                    break;\n                case textCode[tcGroup.GRADIENT]:\n                    this.setTextGradient(<TextState>textState);\n                    break;\n                case textCode[tcGroup.HIGHLIGHT_TEXT_COLOR]:\n                    this.setHighlightTextColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.TAB]:\n                    (<TextState>textState).x += Number(\n                        this.textWidth(\"A\") * RS.MessageSystem.Params.TabSize\n                    );\n                    break;\n                case textCode[tcGroup.CARRIAGE_RETURN]:\n                    (<TextState>textState).x = Number(\n                        (textState as TextState).startX || 0\n                    );\n                    if (!this._isUsedTextWidthEx) this.startWait(1);\n                    break;\n                case textCode[tcGroup.PLAY_SE]:\n                    if (!this._isUsedTextWidthEx)\n                        this.playSe(this.obtainSoundName(<TextState>textState));\n                    break;\n                case textCode[tcGroup.SHOW_PICTURE]:\n                    if (this._isUsedTextWidthEx) break;\n                    this.showPicture(\n                        this.obtainSoundName(<TextState>textState)\n                    );\n                    this.startWait(15);\n                case textCode[tcGroup.HIDE_PICTURE]:\n                    if (this._isUsedTextWidthEx) break;\n                    this.erasePicture(\n                        <number>this.obtainEscapeParam(textState)\n                    );\n                    this.startWait(15);\n                case textCode[tcGroup.FACE]:\n                    if (this._isUsedTextWidthEx) break;\n                    var params = this.obtainSoundName(\n                        <TextState>textState\n                    ).split(\",\");\n                    // this.redrawFaceImage(textState, params[0], params[1], 0, 0);\n                    this.startWait(1);\n                    break;\n                default:\n                    alias_Window_Message_processEscapeCharacter.call(\n                        this,\n                        code,\n                        textState\n                    );\n                    break;\n            }\n        };\n\n        Window_Message.prototype.setTextItalic = function (...args) {\n            this.contents.fontItalic = args[0];\n        };\n\n        Window_Message.prototype.setTextBold = function (...args) {\n            this.contents.fontBold = args[0];\n        };\n\n        Window_Message.prototype.setTextSize = function (...args) {\n            this.contents.fontSize = args[0].clamp(\n                RS.MessageSystem.Params.minFontSize,\n                RS.MessageSystem.Params.maxFontSize\n            );\n        };\n\n        Window_Message.prototype.setStrokeWidth = function (...args) {\n            this.contents.outlineWidth = args[0];\n        };\n\n        Window_Message.prototype.setStrokeColor = function (...args) {\n            this.contents.outlineColor = args[0];\n        };\n\n        Window_Message.prototype.setTextIndent = function (textState) {\n            textState.x += <number>this.obtainEscapeParam(textState);\n        };\n\n        Window_Message.prototype.setHighlightTextColor = function (\n            ...args: any[]\n        ) {\n            let color: any = args[0];\n            if (color === \"null\" || color === \"없음\") {\n                color = null;\n            }\n            this.contents.highlightTextColor = color;\n        };\n\n        Window_Message.prototype.setTextGradient = function (textState) {\n            // TODO: 여기에서는 텍스트를 그리지 않는다.\n            // TODO: 그레디언트 모드임을 명시하고 flush 단계에서 한 번에 그려야 한다 (배경색도 마찬가지이다)\n            this.contents.fontGradient = true;\n        };\n\n        Window_Message.prototype.playSe = function (seName) {\n            const realName = seName.trim();\n            const data = <rm.types.AudioParameters>{\n                name: realName,\n                pan: 0,\n                pitch: 100,\n                volume: (<any>ConfigManager).seVolume,\n            };\n            AudioManager.playSe(data);\n        };\n\n        Window_Message.prototype.showPicture = function (param: string) {\n            const raw = param.split(\",\").map((e) => {\n                return e.trim();\n            });\n\n            let params = [\n                Number(raw[0]),\n                raw[1],\n                Number(raw[2]),\n                Number(raw[3]),\n                Number(raw[4]),\n                100,\n                100,\n                255,\n                0,\n            ];\n            let ret = true;\n\n            // 모든 요소 검증\n            if (params) {\n                params.forEach((e, i, a) => {\n                    if (e === undefined || e === null) {\n                        ret = false;\n                    }\n                });\n            }\n            // 검증 결과가 참이라면 그림 표시\n            if (ret) {\n                $gameScreen.showPicture.apply($gameScreen, <any>params);\n                return true;\n            }\n            return false;\n        };\n\n        Window_Message.prototype.erasePicture = function (picId) {\n            if (typeof picId !== \"number\") return;\n            $gameScreen.erasePicture(picId);\n        };\n\n        // 구조가 변경된 메서드\n        Window_Message.prototype.resetFontSettings = function () {\n            Window_Base.prototype.resetFontSettings.call(this);\n\n            // pause 아이콘 표시 위치 초기화\n            if (this._pauseSignSprite) {\n                this._pauseSignSprite.move(this._width / 2, this._height);\n                this._pauseSignSprite.scale.y = 1;\n            }\n\n            $gameMessage.setWaitTime(RS.MessageSystem.Params.textSpeed);\n        };\n\n        // 새로 추가된 메서드\n        Window_Message.prototype.resetGradient = function (textState) {\n            this.contents.fontGradient = false;\n        };\n\n        // 폰트 사이즈 설정 메서드는 MZ에서 없다\n        Window_Message.prototype.numVisibleRows = function () {\n            return RS.MessageSystem.Params.numVisibleRows;\n        };\n\n        /**\n         * Create text state included px and py values for text word wrapping.\n         */\n        const alias_Window_Message_createTextState =\n            Window_Message.prototype.createTextState;\n        Window_Message.prototype.createTextState = function (\n            text,\n            x,\n            y,\n            width\n        ) {\n            let textState = alias_Window_Message_createTextState.call(\n                this,\n                text,\n                x,\n                y,\n                width\n            );\n\n            const px = textState.x;\n            const py = textState.y;\n\n            // mixin\n            Object.assign(textState, {\n                px,\n                py,\n            });\n\n            return textState;\n        };\n\n        Window_Message.prototype.processWordWrap = function (\n            textState,\n            w,\n            width,\n            isValid\n        ) {\n            const px = <Required<number>>textState.px;\n\n            if (Math.floor(px + w * 2) > width) {\n                if (isValid) {\n                    this.processNewLine(textState);\n                    if (this.needsNewPage(textState)) {\n                        this.startPause();\n                    }\n                }\n            }\n        };\n\n        const alias_Window_Message_processNewLinePW =\n            Window_Message.prototype.processNewLine;\n        Window_Message.prototype.processNewLine = function (textState) {\n            alias_Window_Message_processNewLinePW.call(this, textState);\n            // 내부 버퍼의 위치를 시작 지점으로 초기화한다.\n            (<TextState>textState).px =\n                textState.startX || (<TextState>textState).x;\n        };\n\n        /**\n         * ! Override\n         * @param {Object} textState\n         */\n        Window_Message.prototype.processCharacter = function (textState) {\n            const c = textState.text[textState.index++];\n            if (c.charCodeAt(0) < 0x20) {\n                this.flushTextState(textState);\n                this.processControlCharacter(textState, c);\n            } else {\n                textState.buffer += c;\n\n                // 내부 버퍼의 위치를 누적 계산한다.\n                textState.px += this.textWidth(c);\n            }\n        };\n\n        const alias_Window_Message_processCharacter =\n            Window_Message.prototype.processCharacter;\n        Window_Message.prototype.processCharacter = function (textState) {\n            // 이전 텍스트의 길이를 계산한다.\n            let isDirty = false;\n            const preBuffer = textState.buffer || \"\";\n            let preLen = preBuffer.length;\n\n            alias_Window_Message_processCharacter.call(this, textState);\n\n            // 새로운 텍스트가 이후에 있는가?\n            // 그게 문자인지 제어 문자인지는 이 로직에선 알 수 없다.\n            const postBuffer = textState.buffer || \"\";\n            const postLen = postBuffer.length;\n            if (preLen !== postLen) {\n                isDirty = true;\n            }\n\n            if (isDirty) {\n                // 끝에 있는 글자를 가지고 온다.\n                // 하지만 제어 문자인지는 확인하지 않는다.\n                // 제어 문자 여부는 메인 로직에서 판단하게 둔다.\n                const c = textState.buffer.substr(\n                    textState.buffer.length - 1,\n                    1\n                );\n                this.processNormalCharacterProxy(textState, c);\n            }\n        };\n\n        /**\n         * MZ에서는 processNormalCharacter의 구현이 없다.\n         * 하지만, 자동 개행이나 사운드 재생 그리고 배경색 묘화를 위해 위치 계산이 필요하다.\n         * 이 때문에 추가한 메서드이며, 텍스트의 묘화를 하진 않는다.\n         * @param {*} textState\n         * @param {*} c\n         */\n        Window_Message.prototype.processNormalCharacterProxy = function (\n            textState,\n            c\n        ) {\n            // MZ에서는 텍스트 상태(textState)가 다음 제어 문자가 등장해야 flush 처리된다.\n            // 따라서 이곳에서는 텍스트가 그려질 수 없다.\n            const w = this.textWidth(c);\n            let width = this.contentsWidth();\n\n            // 일반 메시지 모드에서만 동작 한다.\n            let isValid =\n                $gameMessage.getBalloon() === -2 &&\n                !this._isUsedTextWidthEx &&\n                RS.MessageSystem.Params.isParagraphMinifier;\n\n            // 소수점 자리를 버려야 정확히 계산된다.\n            this.processWordWrap(textState, w, width, isValid);\n\n            const contents = this.contents;\n            const faceName = $gameMessage.faceName();\n\n            // if the faceName is not empty and the face direction is to right?\n            if (faceName !== \"\") {\n                width = contents.width - ImageManager.faceWidth;\n                isValid = RS.MessageSystem.Params.faceDirection === 2;\n                this.processWordWrap(textState, w, width, isValid);\n            }\n\n            // 배경색의 위치를 계산하고 비트맵 인스턴스를 생성한다.\n            if (contents.highlightTextColor !== null) {\n                const contentW = Math.floor(w * 2) + 1.0;\n                const contentH = this.lineHeight();\n\n                // 배경 버퍼의 생성\n                this._backBuffer = {\n                    buffer: new Bitmap(contentW, contentH),\n                    textState: null,\n                    isDirty: false,\n                };\n\n                const { px, py } = <TextState>textState;\n\n                // 배경 버퍼는 내부 버퍼의 초기 위치로부터 계산된다.\n                this._backBuffer.buffer.fillAll(contents.highlightTextColor);\n                // 이 플래그가 활성화되어있다면 flushTextState에서 그리기 처리를 해야 한다.\n                this._backBuffer.isDirty = true;\n                this._backBuffer.textState = textState;\n            }\n        };\n\n        const alias_Window_Message_flushTextState =\n            Window_Message.prototype.flushTextState;\n        Window_Message.prototype.flushTextState = function (textState) {\n            // 기본 지연 시간 설정\n            if (\n                !this._showFast &&\n                !this.isEndOfText(textState) &&\n                !this._isUsedTextWidthEx\n            ) {\n                this.startWait($gameMessage.getWaitTime() || 0);\n            }\n\n            // 배경색의 처리\n            if (\n                !this._isUsedTextWidthEx &&\n                this._backBuffer &&\n                this._backBuffer.isDirty\n            ) {\n                if (textState.drawing) {\n                    /**\n                     * @type {Bitmap}\n                     */\n                    const bitmap = this._backBuffer.buffer;\n                    const tx = (<TextState>textState).px;\n                    const ty = (<TextState>textState).py;\n                    const x = (<TextState>textState).x;\n                    const y = (<TextState>textState).y;\n                    const w = bitmap.width;\n                    const h = bitmap.height;\n\n                    this.contents.blt(bitmap, 0, 0, w, h, x, y);\n                    this._backBuffer.isDirty = false;\n                }\n            }\n            alias_Window_Message_flushTextState.call(this, textState);\n        };\n\n        // [X] Window_Message.prototype.createSubWindows\n        // [X] RS.MessageSystem.Params.extraSubWindows = [];\n        // [X] Window_Message.prototype.subWindows\n\n        Window_Message.prototype.updateBigFaceOpacity = function () {\n            if (!this._faceContents) {\n                return;\n            }\n            let { faceOpacity } = RS.MessageSystem.Params;\n            if (!faceOpacity) faceOpacity = 255;\n            const value = faceOpacity.clamp(0, 255);\n            this._faceContents.opacity = value;\n        };\n\n        Window_Message.prototype.fadeInOutFaceContents = function () {\n            if (!this._faceContents) {\n                return;\n            }\n\n            const isValid = this.isOpening() || this.isClosing();\n            if (isValid) {\n                const openness = (this.openness || 0).clamp(0, 255);\n                this._faceContents.scale.y = openness / 255;\n                this._faceContents.y =\n                    (this._faceContents.height / 2) * (1 - this.openness / 255);\n            }\n        };\n\n        const alias_Window_Message_checkToNotClose =\n            Window_Message.prototype.checkToNotClose;\n        Window_Message.prototype.checkToNotClose = function () {\n            this.fadeInOutFaceContents();\n            alias_Window_Message_checkToNotClose.call(this);\n        };\n\n        Window_Message.prototype.updatePlacement = function () {\n            // TODO: try-catch statement will be deleted later.\n            try {\n                const goldWindow = this._goldWindow;\n                this._positionType = $gameMessage.positionType();\n\n                // 말풍선 모드가 아니라면 X좌표를 화면 중앙에 맞춘다.\n                if ($gameMessage.getBalloon() === -2) {\n                    console.log(\"말풍선 모드가 아닙니다\");\n                    this.x =\n                        Graphics.boxWidth / 2 -\n                        this.width / 2 +\n                        RS.MessageSystem.Params.windowOffset.x;\n                    this.y =\n                        (this._positionType *\n                            (Graphics.boxHeight - this.height)) /\n                            2 +\n                        RS.MessageSystem.Params.windowOffset.y;\n                } else {\n                    console.log(\"말풍선 모드입니다\");\n                    if (SceneManager._scene instanceof Scene_Map) {\n                        (<BalloonWindowTransformComponent>(\n                            DependencyInjector.getComponent(\n                                \"BalloonWindowTransformComponent\"\n                            )\n                        )).updateBalloonPosition();\n                    }\n                }\n\n                // 골드 윈도우의 위치 설정\n                if (goldWindow) {\n                    const minGoldY = goldWindow.height;\n                    this._goldWindow.y =\n                        this.y > minGoldY\n                            ? 0\n                            : Graphics.boxHeight - goldWindow.height;\n                }\n\n                // 투명도 업데이트\n                this.updateDefaultOpacity();\n                this.updateContentsOpacity();\n                this.updateBigFaceOpacity();\n\n                // 이름 윈도우 업데이트\n\n                // 얼굴 이미지의 Z-Index 업데이트\n                if ($gameMessage.faceName() !== \"\") {\n                    const isBigFace = /^Big_/.exec($gameMessage.faceName());\n                    const backIndex = 2;\n\n                    if (RS.MessageSystem.Params.faceSide) {\n                        this.setFaceZIndex(isBigFace ? 0 : backIndex);\n                    } else {\n                        this.setFaceZIndex(backIndex);\n                    }\n                }\n            } catch (e) {\n                console.log(\"!------ updatePlacement error ------!\");\n                console.error(e);\n            }\n        };\n\n        Window_Message.prototype.setFaceZIndex = function (zIndex) {\n            zIndex = zIndex || 0;\n\n            const parent = this.parent;\n            const isFaceSide = RS.MessageSystem.Params.faceSide;\n\n            if (parent && isFaceSide) {\n                this.setChildIndex(this._faceContents, zIndex);\n            }\n        };\n\n        const alias_Window_Message_convertEscapeCharacters =\n            Window_Message.prototype.convertEscapeCharacters;\n        Window_Message.prototype.convertEscapeCharacters = function (text) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            const regGroup = RS.MessageSystem.Reg.Group;\n            text = alias_Window_Message_convertEscapeCharacters.call(\n                this,\n                text\n            );\n            text = text.replace(\n                regGroup[tcGroup.BOLD_START_CV],\n                function () {\n                    return regGroup[tcGroup.BOLD_START].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.BOLD_END_CV],\n                function () {\n                    return regGroup[tcGroup.BOLD_END].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITALIC_START_CV],\n                function () {\n                    return regGroup[tcGroup.ITALIC_START].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITALIC_END_CV],\n                function () {\n                    return regGroup[tcGroup.ITALIC_END].source;\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.NAME], (...args) => {\n                let retName = args[1];\n\n                if (retName.endsWith(\":left\")) {\n                    retName = retName.replace(\":left\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"left\";\n                }\n                if (retName.endsWith(\":auto\")) {\n                    retName = retName.replace(\":auto\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"auto\";\n                }\n                if (retName.endsWith(\":center\")) {\n                    retName = retName.replace(\":center\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"center\";\n                }\n                if (retName.endsWith(\":opacity0\")) {\n                    retName = retName.replace(\":opacity0\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"opacity0\";\n                }\n                if (retName.endsWith(\":defaultOpacity\")) {\n                    retName = retName.replace(\":defaultOpacity\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX =\n                        \"defaultOpacity\";\n                }\n                if (retName.endsWith(\":right\")) {\n                    retName = retName.replace(\":right\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"right\";\n                }\n                (this._nameWindow as any).drawName(retName);\n                return \"\";\n            });\n            text = text.replace(\n                regGroup[tcGroup.BALLOON],\n                function () {\n                    const value = Number(arguments[1] || -2);\n                    if ($gameParty.inBattle()) {\n                        $gameMessage.setBalloon(\n                            // @ts-ignore\n                            value < 0\n                                ? \"ENEMIES : \" + Math.abs(value)\n                                : \"ACTORS : \" + value\n                        );\n                    } else {\n                        $gameMessage.setBalloon(value);\n                    }\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.FRIENDLY_TROOPS],\n                function () {\n                    const value = Number(arguments[1] || 0);\n                    $gameMessage.setBalloon(\n                        // @ts-ignore\n                        \"ACTORS : \" + value\n                    );\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ENEMY_TROOPS],\n                function () {\n                    const value = Number(arguments[1] || 0);\n                    $gameMessage.setBalloon(\n                        // @ts-ignore\n                        \"ENEMIES : \" + value\n                    );\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.FACE_DIRECTION], () => {\n                const value = Number(arguments[1] || 0);\n                if (!this._isUsedTextWidthEx) {\n                    RS.MessageSystem.Params.faceDirection = value;\n                }\n                return \"\";\n            });\n            return text;\n        };\n\n        // Window_Message.prototype.terminateMessage\n\n        Window_Message.prototype.setHeight = function (n) {\n            this.contents.clear();\n            $gameMessage.setMaxLine(n);\n            this.height = this.fittingHeight(n);\n            this.createContents();\n            this.updatePlacement();\n        };\n\n        const alias_Window_Message_initialize =\n            Window_Message.prototype.initialize;\n        Window_Message.prototype.initialize = function (rect) {\n            alias_Window_Message_initialize.call(this, rect);\n            $gameTemp.setMSHeightFunc(this.setHeight.bind(this));\n            this.setHeight(RS.MessageSystem.Params.numVisibleRows);\n            this.createFaceContents();\n            this.on(\"removed\", this.removeEventHandler, this);\n            this.on(\"onLoadWindowskin\", this.onLoadWindowskin, this);\n        };\n\n        Window_Message.prototype.calcBalloonRect = function (text: string) {\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            component.calcBalloonRect(text);\n        };\n\n        const alias_Window_Message_startMessage =\n            Window_Message.prototype.startMessage;\n        Window_Message.prototype.startMessage = function () {\n            const text = $gameMessage.allText();\n            const textState = this.createTextState(text, 0, 0, 0);\n            textState.x = this.newLineX(textState);\n            textState.startX = textState.x;\n            this._textState = textState;\n\n            // 말풍선 영역을 계산합니다.\n            const tempText = textState.text.slice(0);\n            this.calcBalloonRect(tempText);\n\n            this.newPage(this._textState);\n\n            // width 와 height를 재설정한다.\n            this.resizeMessageSystem(\"no reset\");\n\n            this.updatePlacement();\n            this.updateBackground();\n            this.open();\n            this._nameBoxWindow.start();\n        };\n\n        Window_Message.prototype.getDefaultWindowRect = function () {\n            return Scene_Message.prototype.messageWindowRect();\n        };\n\n        Window_Message.prototype.windowWidth = function () {\n            const rect = this.getDefaultWindowRect();\n            return rect.width;\n        };\n\n        Window_Message.prototype.windowHeight = function () {\n            const rect = this.getDefaultWindowRect();\n            return rect.height;\n        };\n\n        Window_Message.prototype.resizeMessageSystem = function (\n            ...args: any[]\n        ) {\n            const isResetOwner: Boolean = !(args.length > 0);\n\n            if (!isResetOwner && SceneManager._scene instanceof Scene_Battle) {\n                return;\n            }\n\n            const n = $gameMessage.positionType();\n            const ox = RS.MessageSystem.Params.windowOffset.x;\n            const oy = RS.MessageSystem.Params.windowOffset.y;\n\n            const windowRect = {\n                width: this.windowWidth(),\n                height: this.windowHeight(),\n            };\n            const x = Graphics.boxWidth / 2 - windowRect.width / 2 + ox;\n            const y = (n * (Graphics.boxHeight - windowRect.height)) / 2 + oy;\n            const width = windowRect.width;\n            const height = windowRect.height;\n\n            if (x !== this.x) this.x = x;\n            if (y !== this.y) this.y = y;\n            if (width !== this.width || height !== this.height) {\n                this.width = width;\n                this.height = height;\n            }\n\n            if (isResetOwner) {\n                $gameMap.setMsgOwner($gamePlayer);\n            }\n        };\n\n        Window_Message.prototype.removeEventHandler = function () {\n            this.off(\"onLoadWindowskin\", this.onLoadWindowskin, this);\n        };\n\n        /**\n         * TODO: ColorManager.textColor의 대체 구현.\n         *\n         * @param {Number} n\n         * @returns\n         */\n        Window_Message.prototype.textColor = function (n) {\n            const windowskin = this.windowskin;\n            if (!windowskin.isReady()) {\n                // Set the default text color if the windowskin is not ready.\n                return Color.baseColor;\n            }\n            const px = 96 + (n % 8) * 12 + 6;\n            const py = 144 + Math.floor(n / 8) * 12 + 6;\n            return windowskin.getPixel(px, py);\n        };\n\n        Window_Message.prototype.onLoadWindowskin = function () {\n            Color.baseColor = this.textColor(0);\n            this.changeTextColor(Color.baseColor);\n        };\n\n        Window_Message.prototype.loadWindowskin = function () {\n            const bitmap = ImageManager.loadSystem(\n                RS.MessageSystem.Params.windowskin\n            );\n\n            // if the windowskin is changed?\n            if (bitmap !== this.windowskin) {\n                this.windowskin = bitmap;\n                this._isDirtyWindowskin = false;\n                this.windowskin.addLoadListener(() => {\n                    this._isDirtyWindowskin = true;\n                });\n                if (!this.contents) {\n                    this.createContents();\n                }\n                // Set the default text color if the windowskin didn't load yet.\n                this.changeTextColor(Color.baseColor);\n\n                if (!this.windowskin.isReady()) {\n                    return setTimeout(() => this.loadWindowskin(), 10);\n                }\n            }\n        };\n\n        const _Window_Message_updateLoading =\n            Window_Message.prototype.updateLoading;\n        Window_Message.prototype.updateLoading = function () {\n            let ret = true;\n\n            if (this._isDirtyWindowskin) {\n                Color.baseColor = ColorManager.textColor(0);\n                this.changeTextColor(Color.baseColor);\n                this._isDirtyWindowskin = false;\n                ret = true;\n            }\n            return _Window_Message_updateLoading.call(this) && ret;\n        };\n\n        Window_Message.prototype.needsNewPage = function (textState) {\n            return (\n                !this.isEndOfText(textState) &&\n                textState.y + textState.height > this.contentsHeight()\n            );\n        };\n\n        Window_Message.prototype.createFaceContents = function () {\n            this._faceContents = new Sprite();\n            this._faceContents.x = 0;\n            this._faceContents.y = 0;\n\n            this.addChildAt(this._faceContents, 2);\n            return this._faceContents;\n        };\n\n        Window_Message.prototype.removeFaceContents = function () {\n            if (this._faceContents) this.removeChild(this._faceContents);\n        };\n\n        /**\n         * 큰 얼굴 이미지가 설정되었을 때 텍스트 시작 위치\n         */\n        Window_Message.prototype.newLineX = function () {\n            const reg = /^Big_/i;\n            const faceName = $gameMessage.faceName();\n            const faceIndex = $gameMessage.faceIndex();\n            if (reg.exec(faceName)) {\n                var faceStartX = RS.MessageSystem.Params.faceSide\n                    ? 0\n                    : RS.MessageSystem.Params.textStartX;\n                return faceIndex > 0 ? 0 : faceStartX;\n            } else {\n                if (RS.MessageSystem.Params.faceDirection === 2) return 0;\n                return faceName ? RS.MessageSystem.Params.faceStartOriginX : 0;\n            }\n        };\n\n        // TODO: 큰 얼굴 이미지 구현 필요\n\n        /**\n         * @param {String} faceName\n         */\n        Window_Message.prototype.isValidBigFace = function (faceName) {\n            const reg = /^Big_/i;\n            return reg.exec(faceName);\n        };\n\n        /**\n         * TODO: deprecated\n         */\n        Window_Message.prototype.updateNameWindow = function () {};\n\n        /**\n         * Window 구성 스프라이트 _windowBackSprite의 투명도를 조절합니다.\n         * TODO: deprecated\n         * @method standardBackOpacity\n         */\n        Window_Message.prototype.standardBackOpacity = function () {\n            return RS.MessageSystem.Params.backOpacity;\n        };\n\n        /**\n         * Bitmap의 context.globalAlpha 값을 변경합니다.\n         * @method translucentOpacity\n         */\n        Window_Message.prototype.translucentOpacity = function () {\n            return RS.MessageSystem.Params.translucentOpacity;\n        };\n\n        /**\n         * 윈도우를 구성하는 모든 객체의 투명도를 변경합니다.\n         * @method updateDefaultOpacity\n         */\n        Window_Message.prototype.updateDefaultOpacity = function () {\n            this.opacity = RS.MessageSystem.Params.defaultOpacity;\n        };\n\n        /**\n         * Window 구성 스프라이트 _windowContentsSprite의 투명도를 변경합니다.\n         * @method updateContentsOpacity\n         */\n        Window_Message.prototype.updateContentsOpacity = function () {\n            this.contentsOpacity = RS.MessageSystem.Params.contentsOpacity;\n        };\n\n        Window_Message.prototype.getSpriteActors = function (\n            sign: number\n        ): IBalloonSpriteTarget | null {\n            if (!$gameParty.members()) return null;\n            const max = $gameParty.members().length;\n            sign = sign.clamp(0, max);\n\n            return {\n                type: \"actor\",\n                id: sign - 1,\n            };\n        };\n\n        Window_Message.prototype.getSpriteEnemies = function (\n            sign: number\n        ): IBalloonSpriteTarget | null {\n            if (!$gameTroop.members()) return null;\n            const max = $gameTroop.members().length;\n            sign = sign.clamp(0, max);\n\n            return {\n                type: \"enemy\",\n                id: sign - 1,\n            };\n        };\n\n        Window_Message.prototype.setupOwner = function (sign) {\n            switch (sign) {\n                case -1: // 플레이어\n                    $gameMap.setMsgOwner($gamePlayer);\n                    break;\n                case 0: // 이 이벤트\n                    $gameMap.setMsgOwner(<Game_Event>$gameMap.getMsgEvent());\n                    break;\n                default:\n                    if (SceneManager._scene instanceof Scene_Battle) {\n                        // 전투 중인가?\n                        if (/(?:ENEMIES)[ ]*:(.*)/.test(sign.toString())) {\n                            // 적\n                            $gameMap.setMsgOwner(\n                                this.getSpriteEnemies(parseInt(RegExp.$1))\n                            );\n                        }\n                        if (/(?:ACTORS)[ ]*:(.*)/.test(sign.toString())) {\n                            // 아군\n                            $gameMap.setMsgOwner(\n                                this.getSpriteActors(parseInt(RegExp.$1))\n                            );\n                        }\n                    } else {\n                        // 맵 이벤트\n                        $gameMap.setMsgOwner($gameMap.event(sign));\n                    }\n                    break;\n            }\n        };\n\n        const alias_Window_Message_shouldBreakHere =\n            Window_Message.prototype.shouldBreakHere;\n        Window_Message.prototype.shouldBreakHere = function (text) {\n            const isBreakCharacter = alias_Window_Message_shouldBreakHere.call(\n                this,\n                text\n            );\n\n            if (isBreakCharacter) {\n                if (RS.MessageSystem.Params.isPlayTextSound) {\n                    const interval = RS.MessageSystem.Params.textSoundInterval;\n\n                    // prettier-ignore\n                    if ((this._textSoundInterval--) <= 0) {\n              AudioManager.playStaticSe(< rm.types.AudioParameters >{\n                  name: RS.MessageSystem.popParameter(\n                      \"Text Sound\",\n                      \"텍스트 효과음\"\n                  ),\n                  pan: 0,\n                  pitch: 100,\n                  volume: 90,\n              });\n              this._textSoundInterval = interval;\n          }\n                }\n            }\n\n            return isBreakCharacter;\n        };\n\n        //============================================================================\n        // Game_Interpreter\n        //============================================================================\n\n        Game_Interpreter.prototype.processMessageParams = function (\n            eventId: number,\n            index: number\n        ) {\n            const meta = <EventCommand.CommentMeta>(\n                RS.MessageSystem.getEventComments(eventId, index - 1)\n            );\n            if (meta[\"윈도우 스킨\"]) {\n                RS.MessageSystem.Params.windowskin =\n                    meta[\"윈도우 스킨\"].trim() || \"Window\";\n                ImageManager.loadSystem(RS.MessageSystem.Params.windowskin);\n            }\n            if (meta[\"이름 윈도우 스킨\"]) {\n                RS.MessageSystem.Params.windowskinForNameWindow =\n                    meta[\"이름 윈도우 스킨\"].trim() || \"Window\";\n                ImageManager.loadSystem(\n                    RS.MessageSystem.Params.windowskinForNameWindow\n                );\n            }\n            if (meta[\"라인 높이\"]) {\n                RS.MessageSystem.Params.lineHeight = parseInt(\n                    meta[\"라인 높이\"]\n                );\n            }\n            if (meta[\"폰트 크기\"]) {\n                RS.MessageSystem.Params.fontSize = parseInt(meta[\"폰트 크기\"]);\n            }\n            if (meta[\"라인\"]) {\n                RS.MessageSystem.Params.numVisibleRows = parseInt(meta[\"라인\"]);\n            }\n            if (meta[\"텍스트 시작 X\"]) {\n                RS.MessageSystem.Params.textStartX = parseInt(\n                    meta[\"텍스트 시작 X\"]\n                );\n            }\n            if (meta[\"큰 페이스칩 OX\"]) {\n                RS.MessageSystem.Params.faceOX = Number(meta[\"큰 페이스칩 OX\"]);\n            }\n            if (meta[\"큰 페이스칩 OY\"]) {\n                RS.MessageSystem.Params.faceOY = Number(meta[\"큰 페이스칩 OY\"]);\n            }\n            if (meta[\"대화창 뒤에 얼굴 표시\"]) {\n                RS.MessageSystem.Params.faceSide = Boolean(\n                    meta[\"대화창 뒤에 얼굴 표시\"] === \"true\"\n                );\n            }\n            if (meta[\"대화창 투명도\"]) {\n                RS.MessageSystem.Params.defaultOpacity = parseInt(\n                    meta[\"대화창 투명도\"]\n                );\n            }\n            if (meta[\"텍스트 효과음 재생 여부\"]) {\n                RS.MessageSystem.Params.isPlayTextSound = Boolean(\n                    meta[\"텍스트 효과음 재생 여부\"] === \"true\"\n                );\n            }\n            if (meta[\"기본 텍스트 출력 속도\"]) {\n                RS.MessageSystem.Params.textSpeed = Number(\n                    meta[\"기본 텍스트 출력 속도\"]\n                );\n            }\n        };\n\n        Game_Interpreter.prototype.isValidMultiLine = function () {\n            const codes = [];\n            let prevCode = 401;\n            let lineCount = 0;\n            for (let i = 1; i < 8; i++) {\n                const currentCommand = this._list[this._index + i];\n                if (currentCommand) {\n                    const code = currentCommand.code;\n                    codes.push(code);\n                    prevCode = code;\n                    if ([101, 401].contains(code)) {\n                        lineCount++;\n                    }\n                }\n            }\n            if (codes.contains(102)) {\n                return false;\n            } else if (codes.contains(103)) {\n                return false;\n            } else if ($gameMessage.getMaxLine() <= 4) {\n                return false;\n            } else if (lineCount <= 4) {\n                return false;\n            } else if (RS.MessageSystem.Params.choiceWindowStyle == \"RMXP\") {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Game_Interpreter.prototype.command101 = function () {\n        //     if (!$gameMessage.isBusy()) {\n        //         $gameMap.setMsgEvent(this.character(this._eventId > 0 ? 0 : -1));\n        //         $gameMessage.setFaceImage(this._params[0], this._params[1]);\n        //         $gameMessage.setBackground(this._params[2]);\n        //         $gameMessage.setPositionType(this._params[3]);\n\n        //         this.processMessageParams(this._eventId, this._index);\n\n        //         if (this.isMultiLine()) {\n        //             this.multiLineAddMessage();\n        //         } else {\n        //             while (this.nextEventCode() === 401) {\n        //                 // Text data\n        //                 this._index++;\n        //                 $gameMessage.add(this.currentCommand().parameters[0]);\n        //             }\n        //         }\n\n        //         switch (this.nextEventCode()) {\n        //             case 102: // Show Choices\n        //                 this._index++;\n        //                 this.setupChoices(this.currentCommand().parameters);\n        //                 break;\n        //             case 103: // Input Number\n        //                 this._index++;\n        //                 this.setupNumInput(this.currentCommand().parameters);\n        //                 break;\n        //             case 104: // Select Item\n        //                 this._index++;\n        //                 this.setupItemChoice(this.currentCommand().parameters);\n        //                 break;\n        //         }\n        //         this._index++;\n        //         this.setWaitMode(\"message\");\n        //     }\n        //     return false;\n        // };\n\n        Game_Interpreter.prototype.multiLineAddMessage = function () {\n            this.initLineHeight();\n\n            while ($gameMessage._texts.length < $gameMessage.getMaxLine()) {\n                while (this.nextEventCode() === 401) {\n                    this._index++;\n                    $gameMessage.add(this.currentCommand().parameters[0]);\n                    this.addLineHeight();\n                    if (this._lineHeight >= $gameMessage.getMaxLine()) {\n                        break;\n                    }\n                }\n                if (this.nextEventCode() !== 101) {\n                    break;\n                }\n            }\n\n            // 커맨드 코드 401번이 아직 남아있는 상황이라면,\n            // 다음 인덱스로 넘겨야 선택지가 제대로 동작한다.\n            while (this.nextEventCode() === 401) {\n                this._index++;\n            }\n        };\n\n        Game_Interpreter.prototype.initLineHeight = function () {\n            this._lineHeight = 0;\n        };\n\n        Game_Interpreter.prototype.isMultiLine = function () {\n            return this.isValidMultiLine();\n        };\n\n        Game_Interpreter.prototype.addLineHeight = function () {\n            this._lineHeight++;\n            if (this.nextEventCode() === 101) {\n                this._index++;\n            }\n        };\n\n        //============================================================================\n        // Window_NameBox\n        //============================================================================\n\n        Window_NameBox.prototype.updatePlacement = function () {\n            this.width = this.windowWidth();\n            this.height = this.windowHeight();\n            const messageWindow = this._messageWindow;\n            if ($gameMessage.isRTL()) {\n                this.x = messageWindow.x + messageWindow.width - this.width;\n            } else {\n                this.x = messageWindow.x;\n            }\n            if (messageWindow.y > 0) {\n                this.y = messageWindow.y - this.height;\n            } else {\n                this.y = messageWindow.y + messageWindow.height;\n            }\n        };\n\n        //============================================================================\n        // Game_Temp\n        //============================================================================\n\n        Game_Temp.prototype.setMSHeightFunc = function (func) {\n            this._callMSHeightFunc = func;\n        };\n\n        Game_Temp.prototype.setMaxLine = function (n) {\n            if (this._callMSHeightFunc) this._callMSHeightFunc(n);\n        };\n\n        //============================================================================\n        // Game_Map\n        //============================================================================\n\n        const alias_Game_Map_initialize = Game_Map.prototype.initialize;\n        Game_Map.prototype.initialize = function () {\n            alias_Game_Map_initialize.call(this);\n            this._msgOwner = $gamePlayer;\n            this._msgEvent = 0;\n        };\n\n        Game_Map.prototype.getMsgOwner = function () {\n            return this._msgOwner;\n        };\n\n        /**\n         * @method setMsgOwner\n         * @param o {Game_Event | Game_Player}\n         */\n        Game_Map.prototype.setMsgOwner = function (o) {\n            this._msgOwner = o;\n            $gameMessage.setBalloonPatternHeight(this.tileHeight());\n        };\n\n        Game_Map.prototype.getMsgEvent = function () {\n            return this._msgEvent;\n        };\n\n        Game_Map.prototype.setMsgEvent = function (ev) {\n            this._msgEvent = ev;\n        };\n\n        /// ======================================================================\n        /// DI\n        /// ======================================================================\n        const alias_Scene_Message_associateWindows__enrtyPoint =\n            Scene_Message.prototype.associateWindows;\n        Scene_Message.prototype.associateWindows = function () {\n            alias_Scene_Message_associateWindows__enrtyPoint.call(this);\n            const messageWindow = this._messageWindow;\n            DependencyInjector.injectMessageWindow(messageWindow);\n            DependencyInjector.ready();\n        };\n\n        const alias_Scene_Message_terminate = Scene_Message.prototype.terminate;\n        Scene_Message.prototype.terminate = function () {\n            alias_Scene_Message_terminate.call(this);\n            DependencyInjector.ejectMessageWindow();\n        };\n\n        RS.MessageSystem.initSystem();\n\n        // ! [DEBUG]\n        nw.Window.get().showDevTools();\n        const win = nw.Window.get();\n        win.moveTo(window.outerWidth / 3, 153);\n    })\n    .ready(\"bitmap\")\n    .ready(\"main\")\n    .executeAll();\n","/***\n * 이것은 RPG Maker MV 호환성을 위해 존재하며 타입스크립트로 재작성되어야 합니다.\n */\nimport { Types } from \"../types/parameters\";\n\ntype TextCodeKey =\n    | \"COLOR\"\n    | \"TEXT_SPEED\"\n    | \"OUTLINE_COLOR\"\n    | \"OUTLINE_WIDTH\"\n    | \"INDENT\"\n    | \"BOLD\"\n    | \"ITALIC\"\n    | \"NAME\"\n    | \"GRADIENT\"\n    | \"PARTY_MEMBER\"\n    | \"PLAYER\"\n    | \"VAR\"\n    | \"ICON\"\n    | \"INCREASE\"\n    | \"DECREASE\"\n    | \"GOLD\"\n    | \"BALLOON\"\n    | \"ALIGN\"\n    | \"NUM\"\n    | \"TEXT_SIZE\"\n    | \"TAB\"\n    | \"CARRIAGE_RETURN\"\n    | \"PLAY_SE\"\n    | \"SHOW_PICTURE\"\n    | \"HIDE_PICTURE\"\n    | \"ITEM\"\n    | \"WEAPON\"\n    | \"ARMOR\"\n    | \"CLASSES\"\n    | \"ENEMY\"\n    | \"STATE\"\n    | \"SKILL\"\n    | \"FACE\"\n    | \"FRIENDLY_TROOPS\"\n    | \"ENEMY_TROOPS\"\n    | \"WAIT_SEC_15\"\n    | \"WAIT_SEC_60\"\n    | \"START_PAUSE\"\n    | \"LINE_SHOW_FAST_LT\"\n    | \"LINE_SHOW_FAST_GT\"\n    | \"PAUSE_SKIP\"\n    | \"BOLD_START\"\n    | \"BOLD_END\"\n    | \"ITALIC_START\"\n    | \"ITALIC_END\"\n    | \"ALIGN_LEFT\"\n    | \"ALIGN_CENTER\"\n    | \"ALIGN_RIGHT\"\n    | \"BOLD_START_CV\"\n    | \"BOLD_END_CV\"\n    | \"ITALIC_START_CV\"\n    | \"ITALIC_END_CV\"\n    | \"ALIGN_CLEAR\"\n    | \"HIGHLIGHT_TEXT_COLOR\"\n    | \"FACE_DIRECTION\";\n\ninterface TextCodeEnum {\n    ENUM: Record<TextCodeKey, number>;\n}\n\ntype TextCode = Record<string, any> & TextCodeEnum;\n\nconst pluginParams = $plugins.filter((i) => {\n    return i.description.contains(\"<RS_MessageSystem>\");\n});\n\nconst pluginName = <Types.PluginName>(\n    (pluginParams.length > 0 && pluginParams[0].name)\n);\nconst parameters = <Types.PluginParameters>(\n    (pluginParams.length > 0 && pluginParams[0].parameters)\n);\n\nconst RS = <RS>{\n    MessageSystem: <IMessageSytem>{},\n};\n\nRS.MessageSystem.jsonParse = function (str: string) {\n    const retData = JSON.parse(str, (k, v) => {\n        try {\n            return RS.MessageSystem.jsonParse(v);\n        } catch (e) {\n            return v;\n        }\n    });\n\n    return retData;\n};\n\n/**\n * @method popParameter\n */\nRS.MessageSystem.popParameter = function (...args: any[]) {\n    const k = Object.keys(args);\n    let lastUsed = \"\";\n\n    while (k.length > 0) {\n        lastUsed = args[parseInt(<string>k.pop())];\n\n        // @ts-ignore\n        if (parameters[lastUsed]) return parameters[lastUsed];\n    }\n\n    return \"\";\n};\n\nRS.MessageSystem.Reg = {\n    Default: [],\n    Group: [],\n    Korean: [],\n    Chinese: [],\n    English: [],\n    Japanese: [],\n};\n\nenum MessageParams {\n    FACE_START_ORIGIN_X = 168,\n    NAME_WINDOW_WIDTH = 140,\n    NAME_WINDOW_ROWS = 1,\n    FONT_SIZE = 28,\n    STD_PADDING = 18,\n}\n\nRS.MessageSystem.Params = {\n    faceStartOriginX: MessageParams.FACE_START_ORIGIN_X,\n    nameWindowWidth: MessageParams.NAME_WINDOW_WIDTH,\n    nameWindowRows: MessageParams.NAME_WINDOW_ROWS,\n    FONT_SIZE: MessageParams.FONT_SIZE,\n    STD_PADDING: MessageParams.STD_PADDING,\n    isValidShakingChoice: false,\n    fontSize: Number(\n        RS.MessageSystem.popParameter(\"Font Size\", \"글꼴 크기\") || 28\n    ),\n    textSpeed: Number(\n        RS.MessageSystem.popParameter(\"Text Speed\", \"기본 텍스트 출력 속도\") ||\n            0\n    ),\n    minFontSize: Number(\n        RS.MessageSystem.popParameter(\"Text Min Size\", \"폰트 최소 크기\") || 24\n    ),\n    maxFontSize: Number(\n        RS.MessageSystem.popParameter(\"Text Max Size\", \"폰트 최대 크기\") || 96\n    ),\n    textStartX: Number(\n        RS.MessageSystem.popParameter(\"Text Start X\", \"텍스트 시작 X\")\n    ),\n    numVisibleRows: Number(\n        RS.MessageSystem.popParameter(\"numVisibleRows\", \"라인 갯수\") || 4\n    ),\n    gradientColor1: String(\n        RS.MessageSystem.popParameter(\n            \"gradientColor1\",\n            \"그레디언트 시작 색상\"\n        ) || \"#FFFFFF\"\n    ),\n    gradientColor2: String(\n        RS.MessageSystem.popParameter(\n            \"gradientColor2\",\n            \"그레디언트 중간 색상\"\n        ) || \"#F29661\"\n    ),\n    gradientColor3: String(\n        RS.MessageSystem.popParameter(\"gradientColor3\", \"그레디언트 끝 색상\") ||\n            \"#CC3D3D\"\n    ),\n    nameWindowX: Number(\n        RS.MessageSystem.popParameter(\"Name Window X\", \"이름 윈도우 X\") || 0\n    ),\n    nameWindowY: Number(\n        RS.MessageSystem.popParameter(\"Name Window Y\", \"이름 윈도우 Y\") || 0\n    ),\n    nameWindowStdPadding: Number(\n        RS.MessageSystem.popParameter(\n            \"Name Window Inner Padding\",\n            \"이름 윈도우 안쪽 여백\"\n        ) || 18\n    ),\n    namePositionTypeAtX:\n        RS.MessageSystem.popParameter(\n            \"Name Window Position\",\n            \"이름 윈도우 위치\"\n        ) || \"left\",\n    faceOX: Number(\n        RS.MessageSystem.popParameter(\"Big Face OX\", \"큰 페이스칩 OX\") || 0\n    ),\n    faceOY: Number(\n        RS.MessageSystem.popParameter(\"Big Face OY\", \"큰 페이스칩 OY\") || 0\n    ),\n    faceSide: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Show Big Face Back\",\n            \"대화창 뒤에 얼굴 표시\"\n        ) === \"true\" || false\n    ),\n    WIDTH: MessageParams.FONT_SIZE * 6 + MessageParams.STD_PADDING,\n    HEIGHT: MessageParams.FONT_SIZE + MessageParams.STD_PADDING / 2,\n    TabSize: Number(RS.MessageSystem.popParameter(\"Tab Size\", \"탭 크기\")),\n    backOpacity: Number(\n        RS.MessageSystem.popParameter(\"back Opacity\", \"배경 그림의 투명도\")\n    ),\n    translucentOpacity: Number(\n        RS.MessageSystem.popParameter(\"translucent Opacity\", \"반투명도\")\n    ),\n    defaultOpacity: Number(\n        RS.MessageSystem.popParameter(\"default Opacity\", \"기본 투명도\")\n    ),\n    contentsOpacity: Number(\n        RS.MessageSystem.popParameter(\"contents Opacity\", \"내용의 투명도\")\n    ),\n    defaultOutlineWidth: Number(\n        RS.MessageSystem.popParameter(\"default outline width\", \"테두리 크기\")\n    ),\n    defaultOutlineColor:\n        RS.MessageSystem.popParameter(\"default outline Color\", \"테두리 색상\") ||\n        \"white\",\n    fonts: {\n        default: \"rmmz-mainfont\",\n    },\n    isTempSpriteContainerVisibility: false,\n    lineHeight: 36,\n    windowOffset: new Point(0, 0),\n    fontSmoothingEnabled: true,\n    customFont: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Using Custom Font\",\n            \"사용자 지정 폰트 사용 여부\"\n        ) === \"true\"\n    ),\n    customFontName: String(\n        RS.MessageSystem.popParameter(\n            \"Custom Font Name\",\n            \"사용자 지정 폰트명\"\n        ) || \"GameFont\"\n    ),\n    customFontSrc: String(\n        RS.MessageSystem.popParameter(\n            \"Custom Font Src\",\n            \"사용자 지정 폰트 경로\"\n        ) || \"fonts/mplus-1m-regular.ttf\"\n    ),\n    windowskin:\n        RS.MessageSystem.popParameter(\n            \"Default Windowskin\",\n            \"기본 윈도우스킨\"\n        ) || \"Window\",\n    windowskinForNameWindow:\n        RS.MessageSystem.popParameter(\"Name Windowskin\", \"이름 윈도우스킨\") ||\n        \"Window\",\n    choiceWindowStyle: String(\n        RS.MessageSystem.popParameter(\"Choice Style\", \"선택지 스타일\") ||\n            \"default\"\n    ),\n    defaultChoicePostion: parameters[\"Default Choice Position\"] || \"right\",\n    exTextColors: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\"Text Color\", \"텍스트 색상\")\n    ),\n    isPlayTextSound: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Text Sound ON/OFF\",\n            \"텍스트 효과음 재생 여부\"\n        ) === \"true\"\n    ),\n    pathTextSound: String(\n        RS.MessageSystem.popParameter(\"Text Sound\", \"텍스트 효과음\") ||\n            \"Cursor1.ogg\"\n    ),\n    textSoundEval1: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Execution Condition\",\n            \"텍스트 효과음 실행 조건\"\n        ) || \"Math.randomInt(100) < 45\"\n    ),\n    textSoundEval2: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Volume\",\n            \"텍스트 효과음 볼륨\"\n        ) || \"(0.4 + (RS.MessageSystem.randomNormal(0.8)[0])).clamp(0.0, 0.8)\"\n    ),\n    textSoundInterval: parseInt(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Interval\",\n            \"텍스트 사운드 재생 간격\"\n        )\n    ),\n    textSoundPoolSize: parseInt(\n        RS.MessageSystem.popParameter(\n            \"텍스트 사운드 풀 크기\",\n            \"Text Sound Pool Size\"\n        ) || 6\n    ),\n    langCode:\n        RS.MessageSystem.popParameter(\"언어 코드\", \"Language Code\") || \"ko\",\n    preloadWindowskins: JSON.parse(parameters[\"preload windowskin\"] || \"[]\"),\n    isParagraphMinifier: Boolean(parameters[\"Paragraph Minifier\"] === \"true\"),\n    gradientStyle: parameters[\"Gradient Style\"],\n    faceOpacity: parseInt(parameters[\"face Opacity\"] || 21),\n    faceDirection: parseInt(parameters[\"face Direction\"] || 0),\n};\n\n(() => {\n    const systemFonts: Types.SystemFonts = RS.MessageSystem.jsonParse(\n        parameters[\"systemFont\"]\n    );\n    if (!RS.MessageSystem.Params.fonts) return;\n\n    // ! 여기서부터 변환 시작해야함\n    systemFonts.settings.forEach((i) => {\n        const params = <{ [key: string]: any } | any>{};\n        params[i.languageCode] = i.fontName;\n        Object.assign(RS.MessageSystem.Params.fonts as {}, params);\n    });\n})();\n\n//============================================================================\n// Lazy Initialize Parameters (느린 초기화)\n//============================================================================\n\nvar alias_Game_Temp_initialize = Game_Temp.prototype.initialize;\nGame_Temp.prototype.initialize = function () {\n    alias_Game_Temp_initialize.call(this);\n    RS.MessageSystem.Params.windowWidth =\n        eval(parameters[\"Window Width\"]) || Graphics.boxWidth;\n};\n\n//============================================================================\n// Multiple Language supports\n//============================================================================\n\nRS.MessageSystem.Reg.KoreanEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z가-힣]+[!]*/i;\nRS.MessageSystem.Reg.ChineseEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z一-鼣]+[!]*/i;\nRS.MessageSystem.Reg.EnglishEscapeCode = /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z]+[!]*/i;\nRS.MessageSystem.Reg.JapaneseEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z\\u3040-\\u309F\\u30A0-\\u30FF\\u3300-\\u33FF\\u4E00-\\u9FFF\\uFF00-\\uFFEF]+[!]*/i;\nRS.MessageSystem.Reg.defaultEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z가-힣]+[!]*/i;\n\nRS.MessageSystem.TextCodes = (function () {\n    const rowData = RS.MessageSystem.popParameter(\"Text Code\", \"텍스트 코드\");\n    const data = JSON.parse(rowData);\n    const retData = <TextCode>{};\n\n    retData.Korean = [undefined].concat(JSON.parse(data.Korean));\n    retData.Chinese = [undefined].concat(JSON.parse(data.Chinese));\n    retData.English = [undefined].concat(JSON.parse(data.English));\n    retData.Japanese = [undefined].concat(JSON.parse(data.Japanese));\n\n    return retData;\n})();\n\nRS.MessageSystem.TextCodes.Main = [];\n\nRS.MessageSystem.TextCodes.ENUM = {\n    COLOR: 1,\n    TEXT_SPEED: 2,\n    OUTLINE_COLOR: 3,\n    OUTLINE_WIDTH: 4,\n    INDENT: 5,\n    BOLD: 6,\n    ITALIC: 7,\n    NAME: 8,\n    GRADIENT: 9,\n    PARTY_MEMBER: 10,\n    PLAYER: 11,\n    VAR: 12,\n    ICON: 13,\n    INCREASE: 14,\n    DECREASE: 15,\n    GOLD: 16,\n    BALLOON: 17,\n    ALIGN: 18,\n    NUM: 19,\n    TEXT_SIZE: 20,\n    TAB: 21,\n    CARRIAGE_RETURN: 22,\n    PLAY_SE: 23,\n    SHOW_PICTURE: 24,\n    HIDE_PICTURE: 25,\n    ITEM: 26,\n    WEAPON: 27,\n    ARMOR: 28,\n    CLASSES: 29,\n    ENEMY: 30,\n    STATE: 31,\n    SKILL: 32,\n    FACE: 33,\n    FRIENDLY_TROOPS: 34, // 여긴 2018.01.14에 추가됨\n    ENEMY_TROOPS: 35,\n    WAIT_SEC_15: 36, // .\n    WAIT_SEC_60: 37, // |\n    START_PAUSE: 38, // !\n    LINE_SHOW_FAST_LT: 39, // <\n    LINE_SHOW_FAST_GT: 40, // >\n    PAUSE_SKIP: 41, // ^\n    BOLD_START: 42, // <B>\n    BOLD_END: 43, // </B>\n    ITALIC_START: 44,\n    ITALIC_END: 45,\n    ALIGN_LEFT: 46,\n    ALIGN_CENTER: 47,\n    ALIGN_RIGHT: 48,\n    BOLD_START_CV: 49,\n    BOLD_END_CV: 50,\n    ITALIC_START_CV: 51,\n    ITALIC_END_CV: 52,\n    ALIGN_CLEAR: 53, // AEND\n    HIGHLIGHT_TEXT_COLOR: 54,\n    FACE_DIRECTION: 55,\n};\n\n/**\n * 주어진 ID 값으로 텍스트 코드를 현지화하여 반환합니다.\n * @param {Number} idx\n */\nRS.MessageSystem.getTextCode = function (idx: number) {\n    const langCode = RS.MessageSystem.Params.langCode;\n\n    if (langCode.match(/ko/)) {\n        return RS.MessageSystem.TextCodes[\"Korean\"][idx];\n    }\n    if (langCode.match(/zh/)) {\n        return RS.MessageSystem.TextCodes[\"Chinese\"][idx];\n    }\n    if (langCode.match(/en/)) {\n        return RS.MessageSystem.TextCodes[\"English\"][idx];\n    }\n    if (langCode.match(/ja/)) {\n        return RS.MessageSystem.TextCodes[\"Japanese\"][idx];\n    }\n    return RS.MessageSystem.TextCodes[\"English\"][idx];\n};\n\n/**\n * 노트 태그를 읽습니다.\n * @memberof RS.MessageSystem\n * @param {Number} eventId\n * @return {Object} meta\n */\nRS.MessageSystem.getEventComments = function (eventId: number, index: number) {\n    let data = <Record<any, any>>{\n        note: \"\",\n        meta: {},\n    };\n    try {\n        // 리스트를 가져옵니다.\n        let list = $gameMap.event(eventId).list();\n\n        // 바로 이전 인덱스에 노트 태그가 있었는 지 확인합니다.\n        if (index < 0) index = 0;\n\n        // 부모 이벤트 없이 호출되는 공통 이벤트가 있는 지 확인합니다.\n        if (eventId <= 0) {\n            var commonEvent = $gameTemp.reservedCommonEvent();\n            if (commonEvent) {\n                list = commonEvent.list;\n                // 공통 이벤트는 한 번 설치된 후 클리어되므로 목록을 두 번 읽을 순 없으므로 예외 처리\n                if (!list) {\n                    return data;\n                }\n            }\n        }\n\n        let param = list[index];\n\n        // 코멘트를 읽어옵니다.\n        while (param && [108, 408].contains(param.code)) {\n            data.note += param.parameters[0] + \"\\r\\n\";\n            index--;\n            param = list[index];\n        }\n\n        if (param && param.code === 108) {\n            data.note += param.parameters[0] + \"\\r\\n\";\n\n            index--;\n            param = list[index];\n\n            while (param.code === 408) {\n                data.note += param.parameters[0] + \"\\r\\n\";\n                index--;\n                param = list[index];\n            }\n\n            if (param.code === 108) {\n                data.note += param.parameters[0] + \"\\r\\n\";\n            }\n        }\n\n        // 노트 태그를 추출합니다 (DataManager.extractMetadata의 변형입니다)\n        const re = /<([^<>:]+)(:?)([^>]*)>/g;\n        data.meta = {};\n        for (;;) {\n            const match = re.exec(data.note);\n            if (match) {\n                if (match[2] === \":\") {\n                    data.meta[match[1].trim()] = match[3];\n                } else {\n                    data.meta[match[1].trim()] = true;\n                }\n            } else {\n                break;\n            }\n        }\n    } catch (e) {\n        // 리스트를 읽지 못할 경우 try-catch 문에 의해 예외 처리가 됩니다.\n        return {\n            note: \"\",\n            meta: {},\n        };\n    }\n    return data.meta;\n};\n\n(() => {\n    \"use strict\";\n    var regData = [\"Korean\", \"English\", \"Chinese\", \"Japanese\"];\n    regData.forEach(function (e, i, a) {\n        var tcGroup = RS.MessageSystem.TextCodes[e];\n        tcGroup = tcGroup.map((e: any, i: number, a: any[]) => {\n            if (e === undefined) return;\n            var data = [];\n            var ret = \"\";\n            for (var str of e) {\n                if (/[a-zA-Z]/i) {\n                    data.push(str);\n                    continue;\n                }\n                var text = str.charCodeAt().toString(16);\n                data.push(\"\\\\u\" + \"{\" + text + \"}\");\n            }\n            ret = data.join(\"\");\n            return ret;\n        });\n        RS.MessageSystem.Reg[e][0] = undefined;\n        RS.MessageSystem.Reg[e][1] = new RegExp(\n            `(?:\\x1bC|\\x1b${tcGroup[1]})\\\\[(.+?)\\\\]`,\n            \"gi\"\n        ); // 색\n        RS.MessageSystem.Reg[e][2] = new RegExp(\n            `\\x1b${tcGroup[2]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 속도\n        RS.MessageSystem.Reg[e][3] = new RegExp(\n            `\\x1b${tcGroup[3]}\\\\[(.+?)\\\\]`,\n            \"gi\"\n        ); // 테두리색\n        RS.MessageSystem.Reg[e][4] = new RegExp(\n            `\\x1b${tcGroup[4]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 테두리크기\n        RS.MessageSystem.Reg[e][5] = new RegExp(\n            `\\x1b${tcGroup[5]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 들여쓰기\n        RS.MessageSystem.Reg[e][6] = new RegExp(`\\x1b${tcGroup[6]}`, \"gi\"); // 굵게!\n        RS.MessageSystem.Reg[e][7] = new RegExp(`\\x1b${tcGroup[7]}`, \"gi\"); // 이탤릭!\n        RS.MessageSystem.Reg[e][8] = new RegExp(\n            `\\x1b${tcGroup[8]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 이름\n        RS.MessageSystem.Reg[e][9] = new RegExp(\n            `\\x1b${tcGroup[9]}\\\\<(.+)\\\\>`,\n            \"gi\"\n        ); // 그레디언트\n        RS.MessageSystem.Reg[e][10] = new RegExp(\n            `(?:\\x1bP|\\x1b${tcGroup[10]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 파티원\n        RS.MessageSystem.Reg[e][11] = new RegExp(\n            `(?:\\x1bN|\\x1b${tcGroup[11]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 주인공\n        RS.MessageSystem.Reg[e][12] = new RegExp(\n            `(?:\\x1bV|\\x1b${tcGroup[12]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 변수\n        RS.MessageSystem.Reg[e][13] = new RegExp(\n            `(?:\\x1bI|\\x1b${tcGroup[13]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 아이콘\n        RS.MessageSystem.Reg[e][14] = new RegExp(\n            `(?:\\x1b{|\\x1b${tcGroup[14]})`,\n            \"gi\"\n        ); // 확대!\n        RS.MessageSystem.Reg[e][15] = new RegExp(\n            `(?:\\x1b}|\\x1b${tcGroup[15]})`,\n            \"gi\"\n        ); // 축소!\n        RS.MessageSystem.Reg[e][16] = new RegExp(\n            `(?:\\x1bG|\\x1b${tcGroup[16]})`,\n            \"gi\"\n        ); // 골드\n        RS.MessageSystem.Reg[e][17] = new RegExp(\n            `\\x1b${tcGroup[17]}\\\\[(.*?)\\\\]`,\n            \"gi\"\n        ); // 말풍선\n        RS.MessageSystem.Reg[e][18] = new RegExp(\n            `\\x1b${tcGroup[18]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 정렬자\n        RS.MessageSystem.Reg[e][19] = new RegExp(\n            `\\x1b${tcGroup[19]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 숫자\n        RS.MessageSystem.Reg[e][20] = new RegExp(\n            `\\x1b${tcGroup[20]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 크기\n        RS.MessageSystem.Reg[e][21] = new RegExp(`\\x1b${tcGroup[21]}`, \"gi\"); // r\n        RS.MessageSystem.Reg[e][22] = new RegExp(`\\x1b${tcGroup[22]}`, \"gi\"); // t\n        RS.MessageSystem.Reg[e][23] = new RegExp(\n            `\\x1b${tcGroup[23]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 효과음\n        RS.MessageSystem.Reg[e][24] = new RegExp(\n            `\\x1b${tcGroup[24]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 그림 표시\n        RS.MessageSystem.Reg[e][25] = new RegExp(\n            `\\x1b${tcGroup[25]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 그림 제거\n        RS.MessageSystem.Reg[e][26] = new RegExp(\n            `(?:\\x1b${tcGroup[26]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 아이템\n        RS.MessageSystem.Reg[e][27] = new RegExp(\n            `(?:\\x1b${tcGroup[27]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 무기구\n        RS.MessageSystem.Reg[e][28] = new RegExp(\n            `(?:\\x1b${tcGroup[28]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 방어구\n        RS.MessageSystem.Reg[e][29] = new RegExp(\n            `(?:\\x1b${tcGroup[29]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 직업\n        RS.MessageSystem.Reg[e][30] = new RegExp(\n            `(?:\\x1b${tcGroup[30]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 적군\n        RS.MessageSystem.Reg[e][31] = new RegExp(\n            `(?:\\x1b${tcGroup[31]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 상태\n        RS.MessageSystem.Reg[e][32] = new RegExp(\n            `(?:\\x1b${tcGroup[32]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 스킬\n        RS.MessageSystem.Reg[e][33] = new RegExp(\n            `\\x1b${tcGroup[33]}\\\\<(.*)\\\\>`,\n            \"gi\"\n        ); // 얼굴\n        RS.MessageSystem.Reg[e][34] = new RegExp(\n            `(?:\\x1b${tcGroup[34]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 아군\n        RS.MessageSystem.Reg[e][35] = new RegExp(\n            `(?:\\x1b${tcGroup[35]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 적군\n\n        RS.MessageSystem.Reg[e][36] = new RegExp(`\\x1b${tcGroup[36]}`, \"gi\"); // [.]\n        RS.MessageSystem.Reg[e][37] = new RegExp(`\\x1b${tcGroup[37]}`, \"gi\"); // [|]\n        RS.MessageSystem.Reg[e][38] = new RegExp(`\\x1b${tcGroup[38]}`, \"gi\"); // [!]\n        RS.MessageSystem.Reg[e][39] = new RegExp(`\\x1b${tcGroup[39]}`, \"gi\"); // [<]\n        RS.MessageSystem.Reg[e][40] = new RegExp(`\\x1b${tcGroup[40]}`, \"gi\"); // [>]\n        RS.MessageSystem.Reg[e][41] = new RegExp(`\\x1b${tcGroup[41]}`, \"gi\"); // [\\^]\n\n        RS.MessageSystem.Reg[e][42] = new RegExp(`\\x1b${tcGroup[42]}`, \"gi\"); // AS굵게!\n        RS.MessageSystem.Reg[e][43] = new RegExp(`\\x1b${tcGroup[43]}`, \"gi\"); // AE굵게!\n        RS.MessageSystem.Reg[e][44] = new RegExp(`\\x1b${tcGroup[44]}`, \"gi\"); // AS이탤릭!\n        RS.MessageSystem.Reg[e][45] = new RegExp(`\\x1b${tcGroup[45]}`, \"gi\"); // AE이탤릭!\n\n        RS.MessageSystem.Reg[e][46] = new RegExp(`(?:<${tcGroup[46]}>)`, \"gi\"); // LEFT\n        RS.MessageSystem.Reg[e][47] = new RegExp(`(?:<${tcGroup[47]}>)`, \"gi\"); // CENTER\n        RS.MessageSystem.Reg[e][48] = new RegExp(`(?:<${tcGroup[48]}>)`, \"gi\"); // RIGHT\n\n        RS.MessageSystem.Reg[e][49] = new RegExp(\n            `(?:<[${tcGroup[49]}]>)`,\n            \"gi\"\n        ); // B\n        RS.MessageSystem.Reg[e][50] = new RegExp(\n            `(?:<\\/[${tcGroup[50]}]>)`,\n            \"gi\"\n        ); // B\n        RS.MessageSystem.Reg[e][51] = new RegExp(\n            `(?:<[${tcGroup[51]}]>)`,\n            \"gi\"\n        ); // I\n        RS.MessageSystem.Reg[e][52] = new RegExp(\n            `(?:<\\/[${tcGroup[52]}]>)`,\n            \"gi\"\n        ); // I\n        RS.MessageSystem.Reg[e][53] = new RegExp(`\\x1b${tcGroup[53]}`, \"gi\"); // AEND : ALIGN_CLEAR\n        RS.MessageSystem.Reg[e][54] = new RegExp(\n            `\\x1b${tcGroup[54]}\\\\[(.*)\\\\]`,\n            \"gi\"\n        ); // \\배경색[색상] \\HC[색상]\n        RS.MessageSystem.Reg[e][55] = new RegExp(\n            `\\x1b${tcGroup[55]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // \\FD\n    });\n})();\n\nRS.MessageSystem.initSystem = function () {\n    var type = RS.MessageSystem.Params.langCode;\n    var ret = false;\n    if (type.match(/ko/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Korean;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.KoreanEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Korean;\n        ret = true;\n    }\n    if (type.match(/zh/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Chinese;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.ChineseEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Chinese;\n        ret = true;\n    }\n    if (type.match(/en/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.EnglishEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\n        ret = true;\n    }\n    if (type.match(/ja/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Japanese;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.JapaneseEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Japanese;\n        ret = true;\n    }\n    if (ret === false) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.EnglishEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\n    }\n};\n\n//=============================================================================\n// Color\n//=============================================================================\n\ninterface IColor {\n    getColor(c: number): string;\n    baseColor: string;\n    getBaseColor(): string;\n    getUserCustomColor(str: string): string;\n    gmColor(str: string): string;\n}\n\nexport const Color = <IColor>{};\n\nColor.getColor = function (n: number) {\n    var r = n & 255;\n    var g = (n >> 8) & 255;\n    var b = (n >> 16) & 255;\n    var result = `rgba(${r},${g},${b},1)`;\n    return result;\n};\n\nColor.baseColor = Color.getColor(16777215);\n\nColor.getBaseColor = function () {\n    return Color.baseColor;\n};\n\nColor.getUserCustomColor = function (str) {\n    \"use strict\";\n\n    var obj: any[] = RS.MessageSystem.Params.exTextColors;\n    var ret = str;\n\n    if (!(typeof obj[0] === \"object\")) return ret;\n    if (!obj[0].hasOwnProperty(\"Color Name\")) return ret;\n\n    obj.forEach((e: any, i: number, arr: any[]) => {\n        if (e[\"Color Name\"] === str) {\n            var r = parseInt(e[\"Red\"]) || 0;\n            var g = parseInt(e[\"Green\"]) || 0;\n            var b = parseInt(e[\"Blue\"]) || 0;\n            var a = parseFloat(e[\"Alpha\"]) || 1.0;\n\n            ret = `rgba(${r},${g},${b},${a})`;\n        }\n    });\n\n    return ret;\n};\n\nconst KOREAN_COLORS: Record<string, string> = {\n    청록: \"rgba(0,255,255,1)\",\n    청록색: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    검은색: \"rgba(0,0,0,1)\",\n    검정: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    파란색: \"rgba(0,0,255,1)\",\n    파랑: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    짙은회색: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    자홍색: \"rgba(255,0,255,1)\",\n    자홍: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    회색: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    녹색: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    밝은녹색: \"rgba(0,255,0,1)\",\n    라임: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    밝은회색: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    밤색: \"rgba(128,0,0,1)\",\n    마룬: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    감청색: \"rgba(0,0,128,1)\",\n    네이비: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    황록색: \"rgba(128,128,0,1)\",\n    올리브: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    주황색: \"rgba(255,160,64,1)\",\n    주황: \"rgba(255,160,64,1)\",\n    오렌지: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    보라색: \"rgba(128,0,128,1)\",\n    보라: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    빨간색: \"rgba(255,0,0,1)\",\n    빨강: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    은색: \"rgba(192,192,192,1)\",\n    은: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    민트색: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    흰색: \"rgba(255,255,255,1)\",\n    흰: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    노란색: \"rgba(255,255,0,1)\",\n    노랑: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst CHINESE_COLOR: Record<string, string> = {\n    水色: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    黑色: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    蓝色: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    深灰色: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    紫红色: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    灰色: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    绿色: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    浅绿色: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    浅灰色: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    栗色: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    绀青色: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    黄绿色: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    橙黄色: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    紫色: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    红色: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    银白色: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    水鸭色: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    白色: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    黄色: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst ENGLISH_COLOR: Record<string, string> = {\n    AQUA: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    BLACK: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    BLUE: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    DKGRAY: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    FUCHSIA: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    GRAY: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    GREEN: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    LIME: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    LTGRAY: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    MAROON: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    NAVY: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    OLIVE: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    ORANGE: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    PURPLE: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    RED: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    SILVER: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    TEAL: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    WHITE: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    YELLOW: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst JAPANESE_COLOR: Record<string, string> = {\n    水色: \"rgba(0,255,255,1)\",\n    アクア色: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    黑色: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    靑色: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    ふか灰色: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    紫紅色: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    灰色: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    綠色: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    黃綠: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    鼠色: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    \"―色\": \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    群青色: \"rgba(0,0,128,1)\",\n    ネイビー: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    黃綠色: \"rgba(128,128,0,1)\",\n    オリーブ色: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    橙色: \"rgba(255,160,64,1)\",\n    オレンジ色: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    紫色: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    赤色: \"rgba(255,0,0,1)\",\n    レッド: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    銀色: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    ミント色: \"rgba(0,128,128,1)\",\n    薄荷色: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    白色: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    黃色: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nRS.MessageSystem.getKoreanColor = function (str: string) {\n    let color = KOREAN_COLORS[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"기본\", \"기본색\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getChineseColor = function (str: string) {\n    let color = CHINESE_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"通常\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getEnglishColor = function (str: string) {\n    let color = ENGLISH_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if (\"c_normal\" === str) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getJapaneseColor = function (str: string) {\n    let color = JAPANESE_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"基本色\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getBrowser = function () {\n    /* Refer to https://stackoverflow.com/a/16938481 */\n    var ua = navigator.userAgent,\n        tem,\n        M =\n            ua.match(\n                /(opera|chrome|edge|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i\n            ) || [];\n\n    if (/trident/i.test(M[1])) {\n        tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n\n        return {\n            name: \"IE\",\n            version: tem[1] || \"\",\n        };\n    }\n\n    if (M[1] === \"Chrome\") {\n        tem = ua.match(/\\bOPR\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: \"Opera\",\n                version: tem[1],\n            };\n        }\n\n        tem = ua.match(/\\bEdge\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: \"Edge\",\n                version: tem[1],\n            };\n        }\n    }\n\n    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \"-?\"];\n\n    if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {\n        M.splice(1, 1, tem[1]);\n    }\n\n    return {\n        name: M[0],\n        version: M[1],\n    };\n};\n\nColor.gmColor = function (str: string) {\n    const type = <string>RS.MessageSystem.Params.langCode;\n    if (type.match(/ko/)) {\n        return RS.MessageSystem.getKoreanColor(str);\n    }\n    if (type.match(/zh/)) {\n        return RS.MessageSystem.getChineseColor(str);\n    }\n    if (type.match(/en/)) {\n        return RS.MessageSystem.getEnglishColor(str);\n    }\n    if (type.match(/ja/)) {\n        return RS.MessageSystem.getJapaneseColor(str);\n    }\n    return RS.MessageSystem.getEnglishColor(str);\n};\n\nwindow.RS = RS;\n","import { Rectangle } from \"pixi.js\";\nimport { BalloonWindowTransformComponent } from \"./BalloonWindowTransformComponent\";\nimport { BaseComponent } from \"./BaseComponent\";\nimport { Component } from \"./Component\";\nimport { NameWindowPositionComponent } from \"./NameWindowPositionComponent\";\n\ntype BaseComponentName =\n    | \"NameWindowPositionComponent\"\n    | \"BalloonWindowTransformComponent\";\n\ninterface Class<T> {\n    new (...args: any[]): T;\n}\n\n/**\n *\n */\n// type InjectFunctionWithInfer = <\n//     R = InstanceType<new (rect: Rectangle) => Window_Message>\n// >(\n//     messageWindow: R\n// ) => InstanceType<new (messageWindow: R) => Component>;\ntype InjectFunctionWithInfer = <\n    R = InstanceType<new (rect: Rectangle) => Window_Message>\n>(\n    messageWindow: R\n) => BaseComponent;\n\n/**\n * @function getComponentValue\n * @param item\n * @param key\n * @returns\n */\nfunction getComponentValue<T, K extends keyof T>(item: T, key: K): T[K] {\n    return item[key];\n}\n\n/**\n * @static\n * @class DependencyInjector\n * @description\n * 이 클래스는 MZ에서 MV에 의존성을 갖는 메소드를 실행하는데 필요한 컴포넌트를 주입합니다.\n * 또한 해당 컴포넌트를 안전한 샌드박스 환경에서 실행시키기 위해 사용됩니다.\n * 샌드박스 환경이라함은 MZ에서도 오류 없이 안전하게 동작한다는 것을 의미합니다.\n */\nexport class DependencyInjector {\n    public static COMPONENTS?: [\n        BalloonWindowTransformComponent,\n        NameWindowPositionComponent\n    ];\n\n    public static _components: { [key: string]: Component } = {};\n    private static _isDirty: Boolean = false;\n\n    private static _messageWindow?: Window_Message | undefined;\n\n    public static injectMessageWindow(messageWindow: Window_Message) {\n        // 주입할 메시지 윈도우 클래스의 인스턴스를 가져옵니다.\n        DependencyInjector._messageWindow = messageWindow;\n        DependencyInjector.inject(messageWindow);\n    }\n\n    public static ejectMessageWindow() {\n        if (DependencyInjector._isDirty) {\n            DependencyInjector._messageWindow = undefined;\n            DependencyInjector.COMPONENTS = undefined;\n            DependencyInjector._isDirty = false;\n        }\n    }\n\n    /**\n     * inject all components inside the sandbox environment.\n     *\n     * @param messageWindow Specify the message window.\n     * @returns void\n     */\n    private static inject(messageWindow: Window_Message): void {\n        if (DependencyInjector._isDirty) {\n            console.log(\"components are already injected\");\n            return;\n        }\n\n        // 컴포넌트에 메시지 윈도우를 주입합니다.\n        DependencyInjector.COMPONENTS = [\n            new BalloonWindowTransformComponent({ messageWindow }),\n            new NameWindowPositionComponent({ messageWindow }),\n        ];\n\n        DependencyInjector._isDirty = true;\n    }\n\n    /**\n     * get the component by name.\n     *\n     * @param name Specify the component name\n     * @returns Component\n     */\n    public static getComponent<R extends BaseComponentName>(\n        name: R\n    ):\n        | BalloonWindowTransformComponent\n        | NameWindowPositionComponent\n        | undefined {\n        const items = DependencyInjector.COMPONENTS!.filter((e) => {\n            return e instanceof DependencyInjector.getComponentClass(name);\n        });\n\n        return items.pop();\n    }\n\n    static getComponentClass(name: BaseComponentName): typeof BaseComponent {\n        switch (name) {\n            case \"BalloonWindowTransformComponent\":\n                return BalloonWindowTransformComponent;\n            case \"NameWindowPositionComponent\":\n                return NameWindowPositionComponent;\n            default:\n                return BaseComponent;\n        }\n    }\n\n    public static ready() {\n        if (DependencyInjector.COMPONENTS) {\n            DependencyInjector.COMPONENTS.forEach((component) => {\n                component.ready();\n            });\n        }\n    }\n}\n","import { BaseComponent } from \"./BaseComponent\";\nimport { ComponentProp } from \"./Component\";\n\nexport type BalloonRectData = {\n    /**\n     *\n     */\n    mx: number;\n    /**\n     *\n     */\n    my: number;\n    /**\n     *\n     */\n    tx: number;\n    /**\n     *\n     */\n    ty: number;\n    /**\n     *\n     */\n    tileHeight: number;\n    /**\n     * Sets or gets `dx` that means the destination x coordinate.\n     */\n    dx: number;\n    /**\n     * Sets or gets `dy` that means the destination y coordinate.\n     */\n    dy: number;\n    /**\n     * Gets or sets the value related for the name window.\n     */\n    ny: number;\n    /**\n     *\n     */\n    scaleY: number;\n    /**\n     * Gets or sets the padding value (like value named `padding-bottom`)\n     * `screenX`와 `screenY`는 `right-bottom`에 위치하므로 `height` 만큼 빼야 합니다.\n     */\n    padY: number;\n};\n\n/**\n * @class BalloonWindowTransformComponent\n * @description\n * 말풍선 윈도우의 위치를 조정하기 위한 컴포넌트입니다.\n */\nexport class BalloonWindowTransformComponent extends BaseComponent {\n    private _bWidth: number = 0;\n    private _bHeight: number = 0;\n    private _isUsedTextWidthEx: boolean = false;\n    public transform!: PIXI.Transform;\n\n    onReady(props: ComponentProp) {\n        super.onReady(props);\n        this._bWidth = 0;\n        this._bHeight = 0;\n        this._isUsedTextWidthEx = false;\n    }\n\n    /**\n     * 말풍선 영역의 크기를 계산합니다.\n     *\n     * @param {String} text\n     * @returns {Number}\n     */\n    calcBalloonRect(text: string) {\n        {\n            let temp: string,\n                baseWidth: number,\n                tempText: string[],\n                height: number,\n                min: number,\n                pad: number,\n                numOfLines: number;\n            // drawTextEx를 사용하기 전에 현재 상태를 저장한다.\n            this.save();\n\n            temp = text;\n\n            // 라인 갯수를 구하기 위해 텍스트를 줄바꿈 문자를 기준으로 나눈다.\n            const copyText = text.slice(0);\n            tempText = copyText.split(/[\\r\\n]+/);\n            numOfLines = tempText.length;\n\n            pad = this.standardPadding() * 2;\n\n            // 높이를 구한다.\n            height = 0;\n            tempText.forEach((i) => (height += this.calcBalloonRectHeight(i)));\n\n            if (height <= 0) {\n                // 높이를 구할 수 없었다면,\n                height = this.fittingHeight(numOfLines);\n            } else {\n                // 높이를 구했다면\n                height = height + pad;\n            }\n\n            const textPadding = this.textPadding();\n\n            // 폭을 계산한다.\n            let pw = 0;\n            for (var i = 0; i < numOfLines; i++) {\n                this._isUsedTextWidthEx = true;\n                const x = this.textSizeEx(tempText[i]).width;\n                this._isUsedTextWidthEx = false;\n                if (x >= pw) {\n                    pw = x;\n                }\n            }\n\n            baseWidth = pw;\n            this._bWidth =\n                baseWidth + pad + textPadding || RS.MessageSystem.Params.WIDTH;\n\n            // 얼굴 이미지가 설정되어있다면 ?\n            if ($gameMessage.faceName() !== \"\") {\n                // 최소 높이를 설정한다.\n                min = this.fittingHeight(4);\n                // 기존 폭 값에 얼굴 이미지의 폭을 더한다.\n                this._bWidth += this.newLineX() + pad;\n                if (RS.MessageSystem.Params.faceDirection === 2) {\n                    this._bWidth += ImageManager.faceWidth;\n                }\n                // 높이 값이 최소 높이보다 작으면, 최소 높이 값으로 설정한다.\n                if (height < min)\n                    height = height.clamp(min, height + (min - height));\n            }\n\n            const type = RS.MessageSystem.Params.choiceWindowStyle;\n\n            // 선택지가 있고, XP 스타일로 설정했을 때\n            if (type === \"RMXP\" && $gameMessage.isChoice()) {\n                const maxLines = tempText.length;\n                const maxChoices = $gameMessage.choices().length;\n                const lineHeight = this.lineHeight();\n                // 선택지 갯수를 확장했을 수도 있지만, 4개로 가정한다.\n                height = height + maxChoices * lineHeight;\n                // 선택지 윈도우의 폭이 말풍선보다 크면 제한을 둔다.\n                if (this._choiceWindow.windowWidth() > this._bWidth) {\n                    this._bWidth = this._choiceWindow.windowWidth();\n                }\n            }\n\n            this.restore();\n        }\n\n        {\n            // TODO: 얼굴 이미지 설정 체크\n            // TODO: 인라인 선택지 모드인지 체크\n            // this.save();\n            // const rect = this.textSizeEx(text);\n            // const padding = this.standardPadding();\n            // this._bWidth = rect.width + padding * 2;\n            // this._bHeight = Math.max(\n            //     rect.height + padding * 2,\n            //     this.fittingHeight(1)\n            // );\n            // this.drawTextEx() 사용하기 이전 상태로 복구한다.\n            // this.restore();\n        }\n    }\n\n    textSizeEx(text: string): TextSizeRect {\n        return this.messageWindow.textSizeEx(text);\n    }\n\n    /**\n     * @override\n     */\n    updatePlacement() {\n        this.messageWindow.updatePlacement();\n    }\n\n    isActiveInBalloon() {\n        const isValidBalloon = $gameMessage.getBalloon() === -2;\n        if (isValidBalloon) {\n            this.updatePlacement();\n            return false;\n        }\n        return true;\n    }\n\n    setBalloonRect(data: BalloonRectData) {\n        const ox = RS.MessageSystem.Params.windowOffset.x;\n        const oy = RS.MessageSystem.Params.windowOffset.y;\n        this.x = data.dx + ox;\n        this.y = data.dy + oy;\n        this.width = this._bWidth;\n        this.height = this._bHeight;\n\n        if (\n            $gameMessage.faceName() &&\n            RS.MessageSystem.Params.faceDirection === 2\n        ) {\n            this.drawMessageFace();\n        }\n    }\n\n    setBalloonPlacement(data: BalloonRectData) {\n        // 화면 좌측\n        if (!data) return;\n        if (data.mx - this._bWidth / 2 < 0) {\n            data.dx = 0;\n            data.tx = this.canvasToLocalX(data.mx);\n        }\n\n        // 화면 우측\n        if (data.mx - this._bWidth / 2 > Graphics.boxWidth - this._bWidth) {\n            data.dx = Graphics.boxWidth - this._bWidth;\n            data.tx = this.canvasToLocalX(data.mx);\n        }\n\n        // 화면 상단\n        if (data.my - this._bHeight - data.tileHeight / 2 < 0) {\n            data.dy = data.my + data.tileHeight / 2;\n            data.scaleY = -1;\n            data.ty = this._height * data.scaleY + this._height;\n            data.ny =\n                this.y + this._bHeight + RS.MessageSystem.Params.nameWindowY;\n        }\n\n        // 화면 하단\n        if (data.my - this._bHeight > Graphics.boxHeight - this._bHeight) {\n            data.dy = Graphics.boxWidth - this._bHeight;\n            data.ty = this._height;\n        }\n\n        return data;\n    }\n\n    /**\n     * Updates position of the pause sprite and the name window.\n     *\n     * @param data\n     */\n    updateSubBalloonElements(data: BalloonRectData) {\n        const _pauseSignSprite = this.messageWindow._pauseSignSprite;\n        if (_pauseSignSprite) {\n            _pauseSignSprite.move(data.tx, data.ty);\n            _pauseSignSprite.scale.y = data.scaleY;\n        }\n        this._nameWindow.y = data.ny;\n    }\n\n    getNameWindowY(): number {\n        const ny =\n            this.y -\n            this._nameWindow.height -\n            RS.MessageSystem.Params.nameWindowY;\n\n        return ny ? ny : 0;\n    }\n\n    // canvasToLocalX(x: number) {\n    //     let node: any = this.messageWindow;\n    //     while (node) {\n    //         x -= node.x;\n    //         node = <Sprite>node.parent;\n    //     }\n    //     return x;\n    // }\n\n    // canvasToLocalY(y: number) {\n    //     let node: any = this.messageWindow;\n    //     while (node) {\n    //         y -= node.y;\n    //         node = node.parent;\n    //     }\n    //     return y;\n    // }\n\n    updateBalloonPosition() {\n        console.log(\n            \"============ DEBUG updateBalloonPosition() ====================\"\n        );\n\n        let data = <BalloonRectData>{};\n\n        if (!this.isActiveInBalloon()) return;\n\n        // 말풍선 소유자의 화면 좌표\n        const owner = $gameMap.getMsgOwner();\n\n        data.mx = (owner as Game_Character).screenX();\n        data.my = (owner as Game_Character).screenY();\n\n        console.log(\"%d %d\", data.mx, data.my);\n\n        data.tx = this._bWidth / 2;\n        data.ty = this._bHeight;\n        data.scaleY = 1;\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\n        data.dx = data.mx - this._bWidth / 2;\n        data.dy = data.my - this._bHeight - data.tileHeight;\n        data.ny = this.getNameWindowY();\n\n        console.log(JSON.stringify(data));\n\n        data = <BalloonRectData>this.setBalloonPlacement(Object.create(data));\n\n        if (\n            data.dx + RS.MessageSystem.Params.windowOffset.x !== this.x ||\n            data.dy + RS.MessageSystem.Params.windowOffset.y !== this.y ||\n            this._bWidth !== this.width ||\n            this._bHeight !== this.height\n        ) {\n            // 말풍선 위치 및 크기 설정\n            this.setBalloonRect(data);\n\n            // 멈춤 표시 스프라이트 위치 조정\n            this.updateSubBalloonElements(data);\n        }\n    }\n\n    updateBalloonPositionInBattle() {\n        if (!$gameParty.inBattle()) {\n            // 전투 씬인지 확인\n            console.warn(\"전투가 아닙니다\");\n            return;\n        }\n        if (!$gameSystem.isSideView()) {\n            // 사이드뷰 전투인지 확인\n            console.warn(\"사이드뷰 전투가 아닙니다.\");\n            return;\n        }\n\n        let data = <BalloonRectData>{};\n\n        // 타겟의 화면 좌표 설정\n        let owner = $gameMap.getMsgOwner();\n        if (!owner) {\n            console.warn(\"owner 변수가 없습니다\");\n            return;\n        }\n        if (!owner.hasOwnProperty(\"type\")) {\n            console.warn(\"type 속성이 없습니다 : \" + owner);\n            return;\n        }\n        if (!owner.hasOwnProperty(\"id\")) {\n            console.warn(\"id 속성이 없습니다 : \" + owner);\n            return;\n        }\n\n        // 현재 씬이 전투 씬이 아닌 경우를 확인한다.\n        let scene = SceneManager._scene;\n        if (!(scene instanceof Scene_Battle)) {\n            console.warn(\"전투 장면이 아닙니다\");\n            return false;\n        }\n\n        let parent;\n\n        // 액터인가?\n        if (owner.type === \"actor\") {\n            parent = scene._spriteset._actorSprites; // 액터 스프라이트 군을 반환\n        } else {\n            parent = scene._spriteset._enemySprites; // 적 스프라이트 군을 반환\n        }\n\n        // 타겟 스프라이트를 id 값으로 찾는다.\n        let tempBattlers = [];\n        tempBattlers = parent;\n        let target = tempBattlers[owner.id];\n        if (!target) {\n            console.warn(\"타겟이 없습니다\");\n            return;\n        }\n\n        // 이미 죽어있다면 메시지를 일반 메시지로 표시한다.\n        if (\n            (owner.type === \"actor\" &&\n                !(<Sprite_Actor>target)._actor.isAlive()) ||\n            (owner.type === \"enemy\" && !(<Sprite_Enemy>target)._enemy.isAlive())\n        ) {\n            return;\n        }\n\n        data.mx = target.x;\n        data.my = target.y;\n\n        data.padY =\n            owner.type === \"actor\"\n                ? (target as Sprite_Actor)._mainSprite.bitmap.height / 6\n                : target.bitmap.height;\n\n        data.tx = this._width / 2;\n        data.ty = this._height;\n\n        data.scaleY = 1;\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\n\n        data.dx = data.mx - this._bWidth / 2;\n        data.dy = data.my - this._bHeight - data.tileHeight - data.padY;\n\n        data.ny =\n            this.y -\n            this._nameWindow.height -\n            RS.MessageSystem.Params.nameWindowY;\n\n        data = <BalloonRectData>this.setBalloonPlacement(Object.create(data));\n\n        // 말풍선 위치 및 크기 설정\n        this.setBalloonRect(data);\n\n        // 멈춤 표시 스프라이트 위치 조정\n        this.updateSubBalloonElements(data);\n\n        if (this.transform) this.updateTransform();\n    }\n\n    updateTransform(): void {\n        this.messageWindow.updateTransform();\n    }\n\n    calcBalloonRectHeight(text: string) {\n        // 상태 저장\n        this.save();\n\n        const messageWindow = this.messageWindow;\n        const tempFontSize = this.contents.fontSize;\n\n        const textState = messageWindow.createTextState(text, 0, 0, 0);\n        textState.text = messageWindow.convertEscapeCharacters(text);\n        textState.height = messageWindow.calcTextHeight(textState, false);\n\n        // 상태 복구\n        this.restore();\n\n        messageWindow.setTextSize(tempFontSize);\n        return textState.height;\n    }\n}\n","import { EventEmitter } from \"./EventEmitter\";\n\nexport type ComponentProp = {\n    messageWindow: Window_Message;\n    [key: string]: any;\n};\n\n/**\n * @class Component\n * @description\n * 컴포넌트를 구현하기 위한 클래스입니다.\n */\nexport class Component extends EventEmitter {\n    public name?: string;\n    private props?: ComponentProp;\n\n    constructor(props: ComponentProp) {\n        super();\n        this.init(props);\n    }\n\n    init(props: ComponentProp) {\n        this.props = props;\n\n        this.on(\"ready\", (props: ComponentProp) => this.onReady(props));\n        this.on(\"mounted\", (props: ComponentProp) => this.mounted(props));\n        this.on(\"destroy\", (props: ComponentProp) => this.onDestroy());\n    }\n\n    ready() {\n        this.emit(\"ready\", this.props);\n    }\n\n    destroy() {\n        this.emit(\"destroy\", this.props);\n    }\n\n    execute() {\n        this.emit(\"mounted\", this.props);\n    }\n\n    onReady(props: ComponentProp) {}\n    onDestroy() {}\n    mounted(props: ComponentProp) {}\n}\n","/**\n * @class EventEmitter\n * @description\n * 이벤트를 전달하기 위한 클래스입니다.\n */\nexport class EventEmitter {\n  constructor(private _listeners: { [key: string]: Function[] } = {}) {\n    this._listeners = {};\n  }\n\n  on(eventName: string, func: Function) {\n    if (!this._listeners[eventName]) {\n      this._listeners[eventName] = [];\n    }\n\n    if (!func) {\n      return;\n    }\n\n    if (func instanceof Function) {\n      this._listeners[eventName].push(func);\n    }\n  }\n\n  emit(eventName: string, ...args: any[]) {\n    if (!this._listeners[eventName]) {\n      return;\n    }\n\n    this._listeners[eventName].forEach((func) => {\n      if (!(func instanceof Function)) {\n        console.warn(\"호출된 이벤트 리스너가 함수가 아닙니다.\");\n        return;\n      }\n      func(...args);\n    });\n  }\n}\n","import { BaseComponent } from \"./BaseComponent\";\n\n/**\n * @class NamwWindowPositionComponent\n * @description\n * 이름 윈도우의 X좌표를 재설정합니다.\n */\nexport class NameWindowPositionComponent extends BaseComponent {\n    setOpacity(value: number) {\n        let opacity = value;\n        if (typeof opacity !== \"number\") {\n            opacity = Number(opacity);\n        }\n        if (isNaN(opacity)) {\n            opacity = 255;\n        }\n        this._nameWindow.opacity = value;\n    }\n\n    updatePositionX() {\n        // 이름 윈도우가 없다면\n        if (!this._nameWindow) {\n            return;\n        }\n\n        const mx = this.x;\n        const w = this.width;\n        const nw = this._nameWindow.width;\n\n        const position = <NameWindowPositon>(\n            RS.MessageSystem.Params.namePositionTypeAtX\n        );\n\n        const nx = RS.MessageSystem.Params.nameWindowX;\n\n        let newX = mx + nx;\n\n        switch (position) {\n            case \"right\":\n                newX = mx + w - nw - nx;\n                break;\n            case \"center\":\n                newX = mx + w / 2 - nw / 2 - nx;\n                break;\n            case \"left\":\n                newX = mx + nx;\n                break;\n            case \"opacity0\":\n                this.setOpacity(0);\n                break;\n            case \"defaultOpacity\":\n                this.setOpacity(RS.MessageSystem.Params.defaultOpacity);\n                break;\n            case \"auto\":\n                newX = this.x + this.newLineX() + nx;\n                break;\n        }\n\n        this._nameWindow.x = newX;\n    }\n\n    updatePositionY() {\n        const ox = RS.MessageSystem.Params.windowOffset.x;\n        const oy = RS.MessageSystem.Params.windowOffset.y;\n        const positionType = $gameMessage.positionType();\n        const ballonOwnerType = $gameMessage.getBalloon();\n\n        this.updatePositionX();\n\n        // 메시지 윈도우가 상단이고, 말풍선 모드가 아니라면\n        if (positionType === 0 && ballonOwnerType === -2) {\n            // 최상단의 위치\n            const topY = 0;\n\n            this._nameWindow.y = topY + oy;\n\n            // 이름 윈도우가 열렸는 지 여부에 따라 메시지 윈도우의 Y 좌표를 설정합니다.\n            this.y = this._nameWindow.isOpen()\n                ? topY +\n                  this._nameWindow.height +\n                  RS.MessageSystem.Params.nameWindowY +\n                  oy\n                : topY + oy;\n        } else {\n            this._nameWindow.y =\n                this.y -\n                this._nameWindow.height -\n                RS.MessageSystem.Params.nameWindowY;\n        }\n    }\n}\n","interface DataLinkSet {\n    callbackFunction: Function;\n    active: boolean;\n}\n\n/**\n * @class ComponentExecutor\n * @author biud436\n * @description\n * ComponentExecutor는 컴포넌트를 샌드박스 환경에서 안전하게 실행합니다.\n * 샌드박스 환경이라는 것은 주요 메서드가 외부와 차단되어, 예외 처리를 통하여 각종 오류를 캐치할 수 있게 합니다.\n */\nexport default class ComponentExecutor {\n    public static INSTANCE: ComponentExecutor;\n    private _components: Record<string, DataLinkSet> = {};\n\n    public static getInstance(): ComponentExecutor {\n        if (!ComponentExecutor.INSTANCE) {\n            ComponentExecutor.INSTANCE = new ComponentExecutor();\n        }\n        return ComponentExecutor.INSTANCE;\n    }\n\n    public constructor() {}\n\n    public add(name: string, func: Function): ComponentExecutor {\n        if (name === \"\") {\n            let startChar = 97; // a\n            let endChar = 122; // z\n            let len = 7; // length of random string\n\n            for (let i = 0; i < len; i++) {\n                name += String.fromCharCode(\n                    Math.floor(Math.random() * (endChar - startChar)) +\n                        startChar\n                );\n            }\n        }\n\n        this._components[name] = <DataLinkSet>{\n            callbackFunction: func,\n            active: false,\n        };\n\n        return this;\n    }\n\n    public wrap(name: string, func: Function): ComponentExecutor {\n        return this.add(name, func);\n    }\n\n    public get(name: string): Function {\n        const prop = this._components[name];\n\n        return prop.callbackFunction;\n    }\n\n    public active(name: string): ComponentExecutor {\n        const prop = this._components[name];\n\n        prop.active = true;\n\n        return this;\n    }\n\n    public deactive(name: string): ComponentExecutor {\n        const prop = this._components[name];\n\n        prop.active = false;\n\n        return this;\n    }\n\n    public ready(name: string): ComponentExecutor {\n        return this.active(name);\n    }\n\n    public executeAll() {\n        try {\n            for (const key in this._components) {\n                const prop = this._components[key];\n\n                if (prop.active) {\n                    const currentCallback = this.get(key);\n\n                    if (currentCallback instanceof Function) {\n                        currentCallback();\n                    }\n                }\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n"],"sourceRoot":""}