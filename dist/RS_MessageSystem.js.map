{"version":3,"file":"RS_MessageSystem.js","mappings":"wIAEA,mCACI,MAAO,KACHA,aAAaC,QACbD,aAAaE,IAAI,gBAAgB,CAEzC,C,uFCDA,8BACI,MAAO,KACH,MAAMC,EAA0BC,OAAOC,UAAUC,WACjDF,OAAOC,UAAUC,WAAa,SAAUC,EAAeC,GACnDL,EAAwBM,KAAKC,KAAMH,EAAOC,GAC1CE,KAAKC,UAAW,EAChBD,KAAKE,cAAe,EACpBF,KAAKG,mBAAqB,IAC9B,EAEAT,OAAOC,UAAUS,YAAc,SAC3BC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAUX,KAAKY,SACfC,EAASb,KAAKc,iBAAiBT,GACrCM,EAAQI,OACR,MAAMC,EAAWL,EAAQM,qBACrBR,EACA,EACAA,EAAKI,EACL,GASJ,OAPAG,EAASE,aAAa,EAAGZ,GACzBU,EAASE,aAAa,GAAKX,GAC3BS,EAASE,aAAa,EAAGV,GACzBG,EAAQQ,UAERnB,KAAKoB,aAAaC,SAEXL,CACX,EAEAtB,OAAOC,UAAU2B,iBAAmB,SAChCjB,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAUX,KAAKY,SACff,EAAQG,KAAKc,iBAAiBT,GAC9BP,EAASyB,GAAGC,cAAcC,OAAOC,WACvC,IAAIC,EAEJhB,EAAQI,OAER,MAAMa,EAAQL,GAAGC,cAAcC,OAAOI,cAEtC,GAAc,WAAVD,EAEID,EADAC,EAAME,SAAS,cACTnB,EAAQM,qBAAqBR,EAAI,EAAGA,EAAKZ,EAAO,GAEhDc,EAAQM,qBAAqBR,EAAI,EAAG,EAAGC,EAAKZ,OAEnD,CACH,MAAMiC,EAAa,GAARlC,EACLmC,EAAc,GAATlC,EACX6B,EAAMhB,EAAQsB,qBAAqBF,EAAIC,EAAI,EAAKD,EAAIC,EAAID,E,CAmB5D,MAhBc,WAAVH,GACAD,EAAIT,aAAa,EAAKZ,GACtBqB,EAAIT,aAAa,EAAKX,IACfqB,EAAME,SAAS,UACtBH,EAAIT,aAAa,EAAKZ,GACtBqB,EAAIT,aAAa,GAAKX,GACtBoB,EAAIT,aAAa,EAAKV,KAEtBmB,EAAIT,aAAa,EAAKZ,GACtBqB,EAAIT,aAAa,EAAKX,IAG1BI,EAAQQ,UAERnB,KAAKoB,aAAaC,SAEXM,CACX,EAEAjC,OAAOC,UAAUuC,kBAAoB,WACjC,OACKlC,KAAKmC,WAAa,UAAY,KAC9BnC,KAAKC,SAAW,QAAU,IAC3BD,KAAKoC,SACL,MACApC,KAAKqC,QAEb,EAEA3C,OAAOC,UAAU2C,cAAgB,SAAUjC,EAAMI,EAAIC,EAAI6B,GACrD,MAAM5B,EAAUX,KAAKY,SAKrB,GAJAD,EAAQI,OACRJ,EAAQ6B,sBACJjB,GAAGC,cAAcC,OAAOgB,qBAExBzC,KAAKE,aAAc,CACnB,MAAMc,EAAWhB,KAAKsB,iBAClBjB,EACAkB,GAAGC,cAAcC,OAAOiB,eACxBnB,GAAGC,cAAcC,OAAOkB,eACxBpB,GAAGC,cAAcC,OAAOmB,eACxBnC,EACAC,GAEJC,EAAQkC,UAAY7B,C,MAEpBL,EAAQkC,UAAY7C,KAAK8C,UAE7BnC,EAAQoC,SAAS1C,EAAMI,EAAIC,EAAI6B,GAC/B5B,EAAQkC,UAAY7C,KAAK8C,UACzBnC,EAAQQ,SACZ,CAAC,CAET,C,kGC3HA,uCACI,MAAO,KAIH6B,iBAAiBrD,UAAUsD,qBAAuB,SAC9CC,EACAC,GAEA,MAAMC,EACF7B,GAAGC,cAAc6B,iBAAiBH,EAASC,EAAQ,GAEnDC,EAAK,YACL7B,GAAGC,cAAcC,OAAO6B,WACpBF,EAAK,UAAUG,QAAU,SAC7BC,aAAaC,WAAWlC,GAAGC,cAAcC,OAAO6B,aAEhDF,EAAK,eACL7B,GAAGC,cAAcC,OAAOiC,wBACpBN,EAAK,aAAaG,QAAU,SAChCC,aAAaC,WACTlC,GAAGC,cAAcC,OAAOiC,0BAG5BN,EAAK,WACL7B,GAAGC,cAAcC,OAAOC,WAAaiC,SACjCP,EAAK,WAGTA,EAAK,WACL7B,GAAGC,cAAcC,OAAOW,SAAWuB,SAASP,EAAK,WAEjDA,EAAK,QACL7B,GAAGC,cAAcC,OAAOmC,eAAiBD,SAASP,EAAK,QAEvDA,EAAK,cACL7B,GAAGC,cAAcC,OAAOoC,WAAaF,SACjCP,EAAK,cAGTA,EAAK,eACL7B,GAAGC,cAAcC,OAAOqC,OAASC,OAAOX,EAAK,eAE7CA,EAAK,eACL7B,GAAGC,cAAcC,OAAOuC,OAASD,OAAOX,EAAK,eAE7CA,EAAK,kBACL7B,GAAGC,cAAcC,OAAOwC,SAAWC,QACN,SAAzBd,EAAK,kBAGTA,EAAK,aACL7B,GAAGC,cAAcC,OAAO0C,eAAiBR,SACrCP,EAAK,aAGTA,EAAK,mBACL7B,GAAGC,cAAcC,OAAO2C,gBAAkBF,QACZ,SAA1Bd,EAAK,mBAGTA,EAAK,kBACL7B,GAAGC,cAAcC,OAAO4C,UAAYN,OAChCX,EAAK,iBAGjB,EAEAJ,iBAAiBrD,UAAU2E,iBAAmB,WAC1C,MAAMC,EAAQ,GACd,IAAIC,EAAW,IACXC,EAAY,EAChB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMC,EAAiB3E,KAAK4E,MAAM5E,KAAK6E,OAASH,GAChD,GAAIC,EAAgB,CAChB,MAAMG,EAAOH,EAAeG,KAC5BP,EAAMQ,KAAKD,GACXN,EAAWM,EACP,CAAC,IAAK,KAAKhD,SAASgD,IACpBL,G,EAIZ,QAAIF,EAAMzC,SAAS,MAERyC,EAAMzC,SAAS,MAEfxC,aAAa0F,cAAgB,GAE7BP,GAAa,GAEgC,QAA7ClD,GAAGC,cAAcC,OAAOwD,kBAKvC,EAEAjC,iBAAiBrD,UAAUuF,WAAa,SAAUC,GAC9C,GAAI7F,aAAa8F,SACb,OAAO,EAWX,GARAC,SAASC,YAAYtF,KAAKuF,UAAUvF,KAAKwF,SAAW,EAAI,GAAK,IAC7DlG,aAAamG,aAAaN,EAAO,GAAIA,EAAO,IAC5C7F,aAAaoG,cAAcP,EAAO,IAClC7F,aAAaqG,gBAAgBR,EAAO,IACpC7F,aAAasG,eAAeT,EAAO,IAEnCnF,KAAKiD,qBAAqBjD,KAAKwF,SAAUxF,KAAK6E,QAE1C7E,KAAK6F,cACL7F,KAAK8F,2BAEL,KAAgC,MAAzB9F,KAAK+F,iBAER/F,KAAK6E,SACLvF,aAAaE,IAAIQ,KAAK2E,iBAAiBqB,WAAW,IAI1D,OAAQhG,KAAK+F,iBACT,KAAK,IACD/F,KAAK6E,SACL7E,KAAKiG,aAAajG,KAAK2E,iBAAiBqB,YACxC,MACJ,KAAK,IACDhG,KAAK6E,SACL7E,KAAKkG,cAAclG,KAAK2E,iBAAiBqB,YACzC,MACJ,KAAK,IACDhG,KAAK6E,SACL7E,KAAKmG,gBAAgBnG,KAAK2E,iBAAiBqB,YAInD,OADAhG,KAAKoG,YAAY,YACV,CACX,EAEApD,iBAAiBrD,UAAUmG,oBAAsB,WAG7C,IAFA9F,KAAKqG,iBAEE/G,aAAagH,OAAOC,OAASjH,aAAa0F,cAAc,CAC3D,KAAgC,MAAzBhF,KAAK+F,kBACR/F,KAAK6E,SACLvF,aAAaE,IAAIQ,KAAK2E,iBAAiBqB,WAAW,IAClDhG,KAAKwG,kBACDxG,KAAKyG,aAAenH,aAAa0F,iBAIzC,GAA6B,MAAzBhF,KAAK+F,gBACL,K,CAMR,KAAgC,MAAzB/F,KAAK+F,iBACR/F,KAAK6E,QAEb,EAEA7B,iBAAiBrD,UAAU0G,eAAiB,WACxCrG,KAAKyG,YAAc,CACvB,EAEAzD,iBAAiBrD,UAAUkG,YAAc,WACrC,OAAO7F,KAAKsE,kBAChB,EAEAtB,iBAAiBrD,UAAU6G,cAAgB,WACvCxG,KAAKyG,cACwB,MAAzBzG,KAAK+F,iBACL/F,KAAK6E,QAEb,CAAC,CAET,C,0FClLA,+BACI,MAAO,KAIH,MAAM6B,EAA4BC,SAAShH,UAAUC,WACrD+G,SAAShH,UAAUC,WAAa,WAC5B8G,EAA0B3G,KAAKC,MAC/BA,KAAK4G,UAAYC,YACjB7G,KAAK8G,UAAY,CACrB,EAEAH,SAAShH,UAAUoH,YAAc,WAC7B,OAAO/G,KAAK4G,SAChB,EAMAD,SAAShH,UAAUqH,YAAc,SAAUC,GACvCjH,KAAK4G,UAAYK,EACjB3H,aAAa4H,wBAAwBlH,KAAKmH,aAC9C,EAEAR,SAAShH,UAAUyH,YAAc,WAC7B,OAAOpH,KAAK8G,SAChB,EAEAH,SAAShH,UAAU2F,YAAc,SAAU+B,GACvCrH,KAAK8G,UAAYO,CACrB,CAAC,CAET,C,8FCjCA,mCACI,MAAO,KAIH,MAAMC,EAA2BC,aAAa5H,UAAUJ,MACxDgI,aAAa5H,UAAUJ,MAAQ,WAC3B+H,EAAyBvH,KAAKC,MAC9BA,KAAKwH,UAAY,EACjBxH,KAAKyH,cAAgB,GACrBzH,KAAK0H,UAAY,EACjB1H,KAAK2H,OAAS,GACd3H,KAAK4H,sBAAwB,EAC7B5H,KAAK6H,YAAc,CACvB,EAEAN,aAAa5H,UAAUmI,YAAc,SAAUC,GAC3C/H,KAAKwH,UAAYO,CACrB,EAEAR,aAAa5H,UAAUqI,gBAAkB,SAAU3H,GAC/CL,KAAKyH,cAAgBpH,CACzB,EAEAkH,aAAa5H,UAAUsI,YAAc,WACjC,OAAOjI,KAAKwH,WAAa,CAC7B,EAEAD,aAAa5H,UAAUuI,gBAAkB,WACrC,OAAOlI,KAAKyH,aAChB,EAEAF,aAAa5H,UAAUqF,WAAa,WAChC,OAAOhF,KAAKmI,QAChB,EAEAZ,aAAa5H,UAAUyI,WAAa,SAAUC,GAC1CrI,KAAKmI,SAAWE,EAChB9G,GAAGC,cAAcC,OAAOmC,eAAiByE,CAC7C,EAEAd,aAAa5H,UAAU2I,WAAa,SAAUC,GAC1CvI,KAAK0H,SAAWa,CACpB,EAEAhB,aAAa5H,UAAU6I,WAAa,SAAUD,GAC1C,OAAOvI,KAAK0H,QAChB,EAEAH,aAAa5H,UAAU8I,SAAW,SAAUF,GACxCvI,KAAK2H,OAAS3H,KAAK2H,QAAU,GAC7B3H,KAAK6H,WAAaU,EAClBvI,KAAK2H,OAAO5C,KAAKwD,EACrB,EAEAhB,aAAa5H,UAAU+I,SAAW,SAAUH,GACxC,MAAMI,EAAO3I,KAAK2H,OAAOiB,QACzB,YAAaC,IAATF,EACO3I,KAAK6H,WAETc,CACX,EAEApB,aAAa5H,UAAUmJ,eAAiB,SAAUP,GAC9CvI,KAAK6H,YAAc,CACvB,EAEAN,aAAa5H,UAAUuH,wBAA0B,SAC7C6B,GAEA/I,KAAK4H,sBAAwBmB,CACjC,EAEAxB,aAAa5H,UAAUqJ,wBAA0B,WAC7C,OAAOhJ,KAAK4H,qBAChB,CAAC,CAET,C,2FC7EA,gCACI,MAAO,KAIHqB,UAAUtJ,UAAUuJ,gBAAkB,SAAUC,GAC5CnJ,KAAKoJ,kBAAoBD,CAC7B,EAEAF,UAAUtJ,UAAUyI,WAAa,SAAUG,GACnCvI,KAAKoJ,mBAAmBpJ,KAAKoJ,kBAAkBb,EACvD,CAAC,CAET,C,mLCdA,eAEA,YAOA,4BACI,MAAO,KAIH,MAAMc,EACFC,cAAc3J,UAAU4J,iBAC5BD,cAAc3J,UAAU4J,iBAAmB,WACvCF,EAAiDtJ,KAAKC,MACtD,MAAMwJ,EAAgBxJ,KAAKyJ,eAC3B,EAAAC,mBAAmBC,oBAAoBH,GACvC,EAAAE,mBAAmBE,OACvB,EAEAN,cAAc3J,UAAUkK,kBAAoB,WACxC,MAAMC,EAAKC,SAASlK,MACdmK,EAAKhK,KAAKiK,iBAAiB,GAAG,GAAS,EACvCC,GAAMH,SAASjK,OAASgK,GAAM,EAEpC,OAAO,IAAIK,UAAUD,EADV,EACkBJ,EAAIE,EACrC,EAEA,MAAMI,EAAgCd,cAAc3J,UAAU0K,UAC9Df,cAAc3J,UAAU0K,UAAY,WAChCD,EAA8BrK,KAAKC,MACnC,EAAA0J,mBAAmBY,oBACvB,EAEA/I,GAAGC,cAAc+I,aAEjB,MAAMC,EAAwBC,UAAU9K,UAAU+K,MAClDD,UAAU9K,UAAU+K,MAAQ,WACxBF,EAAsBzK,KAAKC,MAC3B,UAAkB2K,cAAcC,uBACpC,CAAC,CAET,C,gGC5CA,qCACI,MAAO,KAIHC,eAAelL,UAAUmL,QAAU,WAC/B,OAAO9K,KAAK+K,GAAK,CACrB,EAEAF,eAAelL,UAAUqL,QAAU,WAC/B,OAAOhL,KAAKiL,GAAK,CACrB,CAAC,CAET,C,+FCdA,eACA,SAEA,kCACI,MAAO,KAIHC,YAAYvL,UAAUwL,iBAAmB,SAAUC,GAC/C,MACMC,EADS9J,GAAGC,cAAc8J,IAAIC,kBACjBC,KAAKJ,EAAU/K,KAAKoL,MAAML,EAAUjI,QACvD,OAAIkI,GACAD,EAAUjI,OAASkI,EAAI,GAAG9E,OACnB8E,EAAI,GAAGK,eAEP,EAEf,EAOAR,YAAYvL,UAAUgM,gBAAkB,SAAUP,GAC9C,MAAMC,EAAM,cAAcG,KACtBJ,EAAU/K,KAAKoL,MAAML,EAAUjI,QAEnC,OAAIkI,GACAD,EAAUjI,OAASkI,EAAI,GAAG9E,OACnB,EAAAqF,MAAMC,QAAQR,EAAI,KAElBS,aAAahJ,UAAU,EAEtC,EAEAoI,YAAYvL,UAAUoM,gBAAkB,SAAUC,GAC9C,MAAMC,EAAItI,SAASqI,GAEfC,EAAI,GAAKA,EAAI,KACbD,EAAQF,aAAahJ,UAAUkJ,IAGnChM,KAAKkM,SAASpJ,UAAYkJ,CAE9B,EAEA,MAAMG,EACFjB,YAAYvL,UAAUyM,uBAC1BlB,YAAYvL,UAAUyM,uBAAyB,SAC3CtH,EACAsG,GAEA,MAAMiB,EAAU9K,GAAGC,cAAc8K,UAAUC,KACrCC,EAAWjL,GAAGC,cAAc8K,UAAUG,KAC5C,OAAQ3H,GACJ,IAAK,IACD9E,KAAK+L,gBACD/L,KAAK8C,UACO9C,KAAK0M,kBAAkBtB,KAGvC,MACJ,KAAKoB,EAASH,EAAQM,OAClB3M,KAAK+L,gBACD/L,KAAK2L,gBAA2BP,IAEpC,MACJ,IAAK,IACL,KAAKoB,EAASH,EAAQO,MAClB5M,KAAK6M,gBACO7M,KAAK0M,kBAAkBtB,GAC/BA,GAEJ,MACJ,IAAK,IACL,KAAKoB,EAASH,EAAQS,UAClB9M,KAAK+M,iBACL,MACJ,IAAK,IACL,KAAKP,EAASH,EAAQW,UAClBhN,KAAKiN,kBACL,MACJ,IAAK,OACD3N,aAAawJ,iBACb,MACJ,QACIqD,EAAyCpM,KACrCC,KACA8E,EACAsG,GAIhB,EAEA,MAAM8B,EAAuBhC,YAAYvL,UAAUwN,eACnDjC,YAAYvL,UAAUwN,eAAiB,WACnCD,EAAqBnN,KAAKC,MAC1BA,KAAKsD,WAAW8J,iBAAgB,KAC5B,EAAAxB,MAAMyB,UAAYvB,aAAahJ,UAAU,EAAE,GAEnD,EAEAoI,YAAYvL,UAAU2N,YAAc,WAChC,MAAMC,EACFhM,GAAGC,cAAcC,OAAO8L,UACxBC,UAAUC,SAAShC,MAAM,EAAG,GAEhC,OADclK,GAAGC,cAAcC,OAAOiM,MAAMH,IAIjChM,GAAGC,cAAcC,OAAOiM,MAAMC,OAE7C,EAEAzC,YAAYvL,UAAUiO,WAAa,SAAUvN,EAAM0K,EAAGE,EAAGpL,GACrDG,KAAKe,OACLf,KAAK6N,oBACL,MAAMzC,EAAYpL,KAAK8N,gBAAgBzN,EAAM0K,EAAGE,EAAGpL,GAGnD,OAFAG,KAAK+N,eAAe3C,GACpBpL,KAAKmB,UACEiK,EAAU4C,WACrB,EASA9C,YAAYvL,UAAUsN,gBAAkB,WAChCjN,KAAKkM,SAAS9J,UAAYb,GAAGC,cAAcC,OAAOwM,cAClDjO,KAAKkM,SAAS9J,UAAY,GAElC,EAEA8I,YAAYvL,UAAUkO,kBAAoB,WACtC7N,KAAKkM,SAAS7J,SAAWrC,KAAKsN,cAC9BtN,KAAKkM,SAAS9J,SAAWb,GAAGC,cAAcC,OAAOW,SACjDpC,KAAKkM,SAASjM,UAAW,EACzBD,KAAKkM,SAAS/J,YAAa,EAC3BnC,KAAKkM,SAASgC,aACV3M,GAAGC,cAAcC,OAAO0M,oBAC5BnO,KAAKkM,SAASkC,aACV7M,GAAGC,cAAcC,OAAO4M,oBAE5BrO,KAAKkM,SAAShM,cAAe,EAC7BF,KAAKkM,SAAS/L,mBAAqB,KACnCH,KAAKsO,gBACT,EAEApD,YAAYvL,UAAUoN,eAAiB,WAC/B/M,KAAKkM,SAAS9J,UAAYb,GAAGC,cAAcC,OAAO8M,cAClDvO,KAAKkM,SAAS9J,UAAY,GAElC,EAEA8I,YAAYvL,UAAUoB,KAAO,WACzBf,KAAKwO,aAAe,IAAI,EAAAC,YACxBzO,KAAKwO,aAAazN,KAAKf,MACvB0O,QAAQC,IAAI3O,KAAKwO,aACrB,EAEAtD,YAAYvL,UAAUwB,QAAU,WACvBnB,KAAKwO,eACVxO,KAAKwO,aAAarN,QAAQnB,MAC1BA,KAAKwO,kBAAe3F,EACxB,EAEA,MAAM+F,EACF1D,YAAYvL,UAAUkP,wBAC1B3D,YAAYvL,UAAUkP,wBAA0B,SAAUxO,GACtD,MAAMyO,EAAWvN,GAAGC,cAAc8J,IAAIyD,MAChC1C,EAAU9K,GAAGC,cAAc8K,UAAUC,KACrCC,EAAWjL,GAAGC,cAAc8K,UAAUG,KA4G5C,OAZApM,GANAA,GANAA,GANAA,GANAA,GANAA,GANAA,GANAA,GANAA,GANAA,GANAA,GAJAA,GANAA,GANAA,GAHAA,GANAA,GARAA,GADAA,EAAOuO,EAA0C7O,KAAKC,KAAMK,IAChD2O,QACRF,EAASzC,EAAQ4C,KACjB,YAAaC,GACT,OAAOC,eACFpG,MAAMpF,SAAiBuL,EAAK,KAC5BE,UACT,EAAEC,KAAKrP,QAECgP,QACRF,EAASzC,EAAQ4C,KACjB,YAAaC,GACT,OAAOC,eAAepG,MAAMpF,SAASuL,EAAK,KAAKE,UACnD,EAAEC,KAAKrP,QAECgP,QAAQF,EAASzC,EAAQiD,SAAS,IAAIJ,IACvClP,KAAKuP,UAAU5L,SAASuL,EAAK,QAE5BF,QACRF,EAASzC,EAAQmD,eACjB,IAAIN,IACOlP,KAAKyP,gBAAgB9L,SAASuL,EAAK,QAGtCF,QACRF,EAASzC,EAAQqD,KACjB,YAAaR,GACT,OAAOA,EAAK,GAAGS,SACnB,EAAEN,KAAKrP,QAECgP,QACRF,EAASzC,EAAQuD,MACjBC,YAAYC,eAEJd,QACRF,EAASzC,EAAQ0D,SACjB,YAAab,GACT,OAAOc,aAAarM,SAASuL,EAAK,KAAKe,MAAQ,EACnD,EAAEZ,KAAKrP,QAECgP,QACRF,EAASzC,EAAQ6D,MACjB,YAAahB,GACT,OAAOiB,WAAWxM,SAASuL,EAAK,KAAKe,MAAQ,EACjD,EAAEZ,KAAKrP,QAECgP,QACRF,EAASzC,EAAQ+D,QACjB,YAAalB,GACT,OAAOmB,aAAa1M,SAASuL,EAAK,KAAKe,MAAQ,EACnD,EAAEZ,KAAKrP,QAECgP,QACRF,EAASzC,EAAQiE,OACjB,YAAapB,GACT,OAAOqB,YAAY5M,SAASuL,EAAK,KAAKe,MAAQ,EAClD,EAAEZ,KAAKrP,QAECgP,QACRF,EAASzC,EAAQmE,OACjB,YAAatB,GACT,OAAOuB,aAAa9M,SAASuL,EAAK,KAAKe,MAAQ,EACnD,EAAEZ,KAAKrP,QAECgP,QACRF,EAASzC,EAAQqE,OACjB,YAAaxB,GACT,OAAOyB,YAAYhN,SAASuL,EAAK,KAAKe,MAAQ,EAClD,EAAEZ,KAAKrP,QAECgP,QACRF,EAASzC,EAAQuE,OACjB,YAAa1B,GACT,OAAO2B,YAAYlN,SAASuL,EAAK,KAAKe,MAAQ,EAClD,EAAEZ,KAAKrP,QAECgP,QACRF,EAASzC,EAAQyE,YACjB,WACI,MAAO,IAAStE,EAASH,EAAQ0E,OAAS,KAC9C,EAAE1B,KAAKrP,QAECgP,QACRF,EAASzC,EAAQ2E,cACjB,WACI,MAAO,IAASxE,EAASH,EAAQ0E,OAAS,KAC9C,EAAE1B,KAAKrP,QAECgP,QACRF,EAASzC,EAAQ4E,aACjB,WACI,MAAO,IAASzE,EAASH,EAAQ0E,OAAS,KAC9C,EAAE1B,KAAKrP,QAECgP,QAAQF,EAASzC,EAAQ0E,QAAQ,IAAI7B,KACxClP,KAAKkR,oBACN5R,aAAamJ,SAAS1E,OAAOmL,EAAK,IAAM,IAErC,OAECF,QACR,kCACA,WACI,OAAOF,EAASzC,EAAQ8E,aAAaC,MACzC,EAAE/B,KAAKrP,MAGf,EAKAkL,YAAYvL,UAAU0R,YAAc,WAChC,OAAOrR,KAAKsR,aAChB,EAEApG,YAAYvL,UAAU4R,SAAW,SAAUnG,GACvC,OAAOpL,KAAKqR,aAChB,EAEAnG,YAAYvL,UAAU6R,aAAe,SAAUpG,GAK3C,KAJAA,EAAYA,GAAapL,KAAKyR,YAEHC,IAM3B,OAAQpS,aAAaoJ,YACjB,KAAK,EACD1I,KAAK2R,aAAavG,GAClB,MACJ,KAAK,EACDpL,KAAK4R,eAAexG,GACpB,MACJ,KAAK,EACDpL,KAAK6R,cAAczG,GAG/B,EAEA,MAAM0G,EACF5G,YAAYvL,UAAUoS,eAC1B7G,YAAYvL,UAAUoS,eAAiB,SAAU3G,GAC7C0G,EAAuC/R,KAAKC,KAAMoL,GAClDpL,KAAKwR,aAAwBpG,EACjC,EAEAF,YAAYvL,UAAUgS,aAAe,SAAUvG,GAC3CA,EAAUL,EAAI/K,KAAKuR,SAASnG,GAC5BA,EAAU4G,OAAS5G,EAAUL,CACjC,EAEAG,YAAYvL,UAAUiS,eAAiB,SAAUxG,GAC7C,MAAM6G,EAAUjS,KAAKqR,cACrBjG,EAAUL,GACL/K,KAAKuR,SAASnG,GAAapL,KAAKkS,gBAAkBD,GAC/C,EACJ7G,EAAU4C,YAAc,EAC5B5C,EAAU4G,OAAS5G,EAAUL,CACjC,EAEAG,YAAYvL,UAAUkS,cAAgB,SAAUzG,GAC5C,MAAM6G,EAAUjS,KAAKqR,cACrBjG,EAAUL,EACN/K,KAAKkS,gBAAkBD,EAAU7G,EAAU4C,YAC/C5C,EAAU4G,OAAS5G,EAAUL,CACjC,CAAC,CAET,C,kGC3VA,eACA,SAEA,qCACI,MAAO,KAIHoH,eAAexS,UAAUyS,gBAAkB,SAAUhH,GACjD,MAAMC,EAAM,YAAYG,KAAKJ,EAAU/K,KAAKoL,MAAML,EAAUjI,QAC5D,OAAIkI,GACAD,EAAUjI,OAASkI,EAAI,GAAG9E,OACnB5C,SAAS0H,EAAI,KAEb,CAEf,EAEA8G,eAAexS,UAAU0S,mBAAqB,SAAUjH,GACpD,MAAMC,EAAM,WAAWG,KAAKJ,EAAU/K,KAAKoL,MAAML,EAAUjI,QAC3D,OAAIkI,GACAD,EAAUjI,OAASkI,EAAI,GAAG9E,OACnB+L,OAAOjH,EAAI,KAEX,YAEf,EAEA8G,eAAexS,UAAU4S,gBAAkB,SAAUnH,GACjD,MAAMC,EAAM,YAAYG,KAAKJ,EAAU/K,KAAKoL,MAAML,EAAUjI,QAC5D,OAAIkI,GACAD,EAAUjI,OAASkI,EAAI,GAAG9E,OACnB+L,OAAOjH,EAAI,KAEX,EAEf,EAEA,MAAMmH,EACFL,eAAexS,UAAUyM,uBAC7B+F,eAAexS,UAAUyM,uBAAyB,SAC9CtH,EACAsG,GAEA,MAAMiB,EAAU9K,GAAGC,cAAc8K,UAAUC,KACrCC,EAAWjL,GAAGC,cAAc8K,UAAUG,KAC5C,OAAQ3H,GACJ,KAAK0H,EAASH,EAAQoG,YAClBnT,aAAawI,YACD9H,KAAK0M,kBAAkBtB,IAEnC,MACJ,KAAKoB,EAASH,EAAQqG,WAClB1S,KAAK2S,YAAoB3S,KAAK0M,kBAAkBtB,IAChD,MACJ,KAAKoB,EAASH,EAAQuG,eAClB5S,KAAK6S,eACD7S,KAAK2L,gBAA2BP,IAEpC,MACJ,KAAKoB,EAASH,EAAQyG,QAClB9S,KAAK+S,cAAyB3H,GAC9B,MACJ,KAAKoB,EAASH,EAAQ2G,eAClBhT,KAAKiT,eACOjT,KAAK0M,kBAA6BtB,IAE9C,MACJ,KAAKoB,EAASH,EAAQ6G,MAClBlT,KAAKmT,aAAanT,KAAKkM,SAASjM,UAChC,MACJ,KAAKuM,EAASH,EAAQ+G,YAClBpT,KAAKmT,aAAY,GACjB,MACJ,KAAK3G,EAASH,EAAQgH,UAClBrT,KAAKmT,aAAY,GACjB,MACJ,KAAK3G,EAASH,EAAQiH,QAClBtT,KAAKuT,eAAevT,KAAKkM,SAAS/J,YAClC,MACJ,KAAKqK,EAASH,EAAQmH,cAClBxT,KAAKuT,eAAc,GACnB,MACJ,KAAK/G,EAASH,EAAQoH,YAClBzT,KAAKuT,eAAc,GACnB,MACJ,KAAK/G,EAASH,EAAQqH,UAClB1T,KAAK2T,gBAA2BvI,GAChC,MACJ,KAAKoB,EAASH,EAAQuH,sBAClB5T,KAAK6T,sBACD7T,KAAK2L,gBAA2BP,IAEpC,MACJ,KAAKoB,EAASH,EAAQyH,KACN1I,EAAWL,GAAKhH,OACxB/D,KAAK+T,UAAU,KAAOxS,GAAGC,cAAcC,OAAOuS,SAElD,MACJ,KAAKxH,EAASH,EAAQ4H,iBACN7I,EAAWL,EAAIhH,OACtBqH,EAAwB4G,QAAU,GAElChS,KAAKkR,oBAAoBlR,KAAKkU,UAAU,GAC7C,MACJ,KAAK1H,EAASH,EAAQ8H,SACbnU,KAAKkR,oBACNlR,KAAKoU,OAAOpU,KAAKuS,gBAA2BnH,IAChD,MACJ,KAAKoB,EAASH,EAAQgI,cAClB,GAAIrU,KAAKkR,mBAAoB,MAC7BlR,KAAKsU,YACDtU,KAAKuS,gBAA2BnH,IAEpCpL,KAAKkU,UAAU,IACnB,KAAK1H,EAASH,EAAQkI,cAClB,GAAIvU,KAAKkR,mBAAoB,MAC7BlR,KAAKwU,aACOxU,KAAK0M,kBAAkBtB,IAEnCpL,KAAKkU,UAAU,IACnB,KAAK1H,EAASH,EAAQoI,MAClB,GAAIzU,KAAKkR,mBAAoB,MAChBlR,KAAKuS,gBACHnH,GACbsJ,MAAM,KAER1U,KAAKkU,UAAU,GACf,MACJ,QACI1B,EAA4CzS,KACxCC,KACA8E,EACAsG,GAIhB,EAEA+G,eAAexS,UAAU4T,cAAgB,YAAarE,GAClDlP,KAAKkM,SAAS/J,WAAa+M,EAAK,EACpC,EAEAiD,eAAexS,UAAUwT,YAAc,YAAajE,GAChDlP,KAAKkM,SAASjM,SAAWiP,EAAK,EAClC,EAEAiD,eAAexS,UAAUgT,YAAc,YAAazD,GAChDlP,KAAKkM,SAAS9J,SAAW8M,EAAK,GAAGyF,MAC7BpT,GAAGC,cAAcC,OAAOwM,YACxB1M,GAAGC,cAAcC,OAAO8M,YAEhC,EAEA4D,eAAexS,UAAUsT,eAAiB,YAAa/D,GACnDlP,KAAKkM,SAASgC,aAAegB,EAAK,EACtC,EAEAiD,eAAexS,UAAUkT,eAAiB,YAAa3D,GACnDlP,KAAKkM,SAASkC,aAAec,EAAK,EACtC,EAEAiD,eAAexS,UAAUoT,cAAgB,SAAU3H,GAC/C,MAAMrC,EAAQpF,SAAiB3D,KAAK0M,kBAAkBtB,IACtDA,EAAUL,GAAKhC,CACnB,EAEAoJ,eAAexS,UAAUkU,sBAAwB,YAC1C3E,GAEH,IAAIlD,EAAakD,EAAK,GACR,SAAVlD,GAA8B,OAAVA,IACpBA,EAAQ,MAEZhM,KAAKkM,SAAS/L,mBAAqB6L,CACvC,EAEAmG,eAAexS,UAAUgU,gBAAkB,SAAUvI,GAGjDpL,KAAKkM,SAAShM,cAAe,CACjC,EAEAiS,eAAexS,UAAUyU,OAAS,SAAUQ,GACxC,MACMC,EAAiC,CACnC5E,KAFa2E,EAAOrR,OAGpBuR,IAAK,EACLC,MAAO,IACPC,OAAcC,cAAeC,UAEjCC,aAAaf,OAAOS,EACxB,EAEA1C,eAAexS,UAAU2U,YAAc,SAAUc,GAC7C,MAAMC,EAAMD,EAAMV,MAAM,KAAKY,KAAKC,GACvBA,EAAEhS,SAGb,IAAI4B,EAAS,CACTpB,OAAOsR,EAAI,IACXA,EAAI,GACJtR,OAAOsR,EAAI,IACXtR,OAAOsR,EAAI,IACXtR,OAAOsR,EAAI,IACX,IACA,IACA,IACA,GAEAG,GAAM,EAWV,OARIrQ,GACAA,EAAOsQ,SAAQ,CAACF,EAAG7Q,EAAGgR,KACdH,UACAC,GAAM,E,MAKdA,IACAG,YAAYrB,YAAYsB,MAAMD,YAAkBxQ,IACzC,EAGf,EAEAgN,eAAexS,UAAU6U,aAAe,SAAUqB,GACzB,iBAAVA,GACXF,YAAYnB,aAAaqB,EAC7B,EAGA1D,eAAexS,UAAUkO,kBAAoB,WACzC3C,YAAYvL,UAAUkO,kBAAkB9N,KAAKC,MAGzCA,KAAK8V,mBACL9V,KAAK8V,iBAAiBC,KAAK/V,KAAKgW,OAAS,EAAGhW,KAAKiW,SACjDjW,KAAK8V,iBAAiBI,MAAMjL,EAAI,GAGpC3L,aAAawI,YAAYvG,GAAGC,cAAcC,OAAO4C,UACrD,EAGA8N,eAAexS,UAAUwW,cAAgB,SAAU/K,GAC/CpL,KAAKkM,SAAShM,cAAe,CACjC,EAGAiS,eAAexS,UAAUiE,eAAiB,WACtC,OAAOrC,GAAGC,cAAcC,OAAOmC,cACnC,EAKA,MAAMwS,EACFjE,eAAexS,UAAUmO,gBAC7BqE,eAAexS,UAAUmO,gBAAkB,SACvCzN,EACA0K,EACAE,EACApL,GAEA,IAAIuL,EAAYgL,EAAqCrW,KACjDC,KACAK,EACA0K,EACAE,EACApL,GAGJ,MAAMwW,EAAKjL,EAAUL,EACfuL,EAAKlL,EAAUH,EAQrB,OALAsL,OAAOC,OAAOpL,EAAW,CACrBiL,KACAC,OAGGlL,CACX,EAEA+G,eAAexS,UAAU8W,gBAAkB,SACvCrL,EACAsL,EACA7W,EACA8W,GAEA,MAAMN,EAAuBjL,EAAUiL,GAEnCO,KAAKC,MAAMR,EAAS,EAAJK,GAAS7W,GACrB8W,IACA3W,KAAK+R,eAAe3G,GAChBpL,KAAK8W,aAAa1L,IAClBpL,KAAK+W,aAIrB,EAEA,MAAMC,EACF7E,eAAexS,UAAUoS,eAC7BI,eAAexS,UAAUoS,eAAiB,SAAU3G,GAChD4L,EAAsCjX,KAAKC,KAAMoL,GAErCA,EAAWiL,GACnBjL,EAAU4G,QAAsB5G,EAAWL,EAG3C/K,KAAKiX,aAAejX,KAAKiX,YAAYC,SACflX,KAAKiX,YAAY7L,SAE/C,EAMA+G,eAAexS,UAAUwX,iBAAmB,SAAU/L,GAClD,MAAMa,EAAIb,EAAU/K,KAAK+K,EAAUjI,SAC/B8I,EAAEmL,WAAW,GAAK,IAClBpX,KAAKqX,eAAejM,GACpBpL,KAAKsX,wBAAwBlM,EAAWa,KAExCb,EAAUmM,QAAUtL,EAGpBb,EAAUiL,IAAMrW,KAAK+T,UAAU9H,GAEvC,EAEA,MAAMuL,EACFrF,eAAexS,UAAUwX,iBAC7BhF,eAAexS,UAAUwX,iBAAmB,SAAU/L,GAElD,IAAI8L,GAAU,EAEVO,GADcrM,EAAUmM,QAAU,IACfhR,OAYvB,GAVAiR,EAAsCzX,KAAKC,KAAMoL,GAM7CqM,KAFerM,EAAUmM,QAAU,IACZhR,SAEvB2Q,GAAU,GAGVA,EAAS,CAIT,MAAMjL,EAAIb,EAAUmM,OAAOG,OACvBtM,EAAUmM,OAAOhR,OAAS,EAC1B,GAEJvG,KAAK2X,4BAA4BvM,EAAWa,E,CAEpD,EASAkG,eAAexS,UAAUgY,4BAA8B,SACnDvM,EACAa,GAIA,MAAMyK,EAAI1W,KAAK+T,UAAU9H,GACzB,IAAIpM,EAAQG,KAAKkS,gBAGjB,MAAM0F,GAAuD,IAA/BtY,aAAakJ,aACrCqP,EAAoBzM,EAAU0M,QACpC,IAAInB,EACAiB,GACAC,GACAtW,GAAGC,cAAcC,OAAOsW,oBAG5B/X,KAAKyW,gBAAgBrL,EAAWsL,EAAG7W,EAAO8W,GAE1C,MAAMzK,EAAWlM,KAAKkM,SAYtB,GARiB,KAHA5M,aAAa0Y,aAI1BnY,EAAQqM,EAASrM,MAAQ2D,aAAayU,UACtCtB,EAAoD,IAA1CpV,GAAGC,cAAcC,OAAOyW,cAClClY,KAAKyW,gBAAgBrL,EAAWsL,EAAG7W,EAAO8W,IAIgB,OAAhCzK,EAAS/L,mBACZ,CACvB,MAAMgY,EAAWvB,KAAKC,MAAU,EAAJH,GAAS,EAC/B0B,EAAWpY,KAAK0B,cAGhB,GAAE2U,EAAE,GAAEC,GAAkBlL,EAG9BpL,KAAKiX,YAAc,CACfM,OAAQ,IAAI7X,OAAOyY,EAAUC,GAC7BhN,UAAWA,EACX8L,SAAS,EACTnM,EAAGsL,EACHpL,EAAGqL,GAIPtW,KAAKiX,YAAYM,OAAOc,QACZnM,EAAS/L,oBAGrBH,KAAKiX,YAAYC,SAAU,EAC3BlX,KAAKiX,YAAY7L,UAAYA,C,CAErC,EAEA,MAAMkN,EACFnG,eAAexS,UAAU0X,eAC7BlF,eAAexS,UAAU0X,eAAiB,SACtCjM,GAEA,MAAMmN,EAAYnN,EAAU0M,QACtBU,GACDxY,KAAKyY,YAAczY,KAAK0Y,YAAYtN,IAAcmN,EACjDI,EACFJ,GAAavY,KAAKiX,aAAejX,KAAKiX,YAAYC,QAUtD,GARIsB,GACAxY,KAAKkU,UAAU5U,aAAa2I,eAAiB,GAO7C0Q,GAA2BJ,EAAW,CACtC,MAAMK,EAAa5Y,KAAKiX,YAClB4B,EAASD,EAAWrB,OAG1B,GAFsBqB,EAAWxN,UAEfkL,KAAOlL,EAAUH,EAG/B,OAFAjL,KAAKiX,YAAYC,SAAU,OAC3BoB,EAAoCvY,KAAKC,KAAMoL,GAG1CwN,EAAW7N,EACX6N,EAAW3N,EACVG,EAAUL,EACVK,EAAUH,EACV2L,KAAKkC,IAAI9Y,KAAK+Y,WAAYnC,KAAKC,MAAMgC,EAAOhZ,QAC5C+W,KAAKkC,IAAI9Y,KAAKgZ,YAAapC,KAAKC,MAAMgC,EAAO/Y,SAWvDE,KAAKiX,YAAYC,SAAU,C,CAG/BoB,EAAoCvY,KAAKC,KAAMoL,EACnD,EAKA+G,eAAexS,UAAUsZ,qBAAuB,SAC5C7N,GACD,EAEH+G,eAAexS,UAAUuZ,qBAAuB,WAC5C,IAAKlZ,KAAKmZ,cACN,OAEJ,IAAI,YAAEC,GAAgB7X,GAAGC,cAAcC,OAClC2X,IAAaA,EAAc,KAChC,MAAMrQ,EAAQqQ,EAAYzE,MAAM,EAAG,KACnC3U,KAAKmZ,cAAcE,QAAUtQ,CACjC,EAEAoJ,eAAexS,UAAU2Z,sBAAwB,WAC7C,GAAKtZ,KAAKmZ,gBAIMnZ,KAAKuZ,aAAevZ,KAAKwZ,aAC5B,CACT,MAAMC,GAAYzZ,KAAKyZ,UAAY,GAAG9E,MAAM,EAAG,KAC/C3U,KAAKmZ,cAAcjD,MAAMjL,EAAIwO,EAAW,IACxCzZ,KAAKmZ,cAAclO,EACdjL,KAAKmZ,cAAcrZ,OAAS,GAAM,EAAIE,KAAKyZ,SAAW,I,CAEnE,EAEA,MAAMC,EACFvH,eAAexS,UAAUga,gBAC7BxH,eAAexS,UAAUga,gBAAkB,WACvC3Z,KAAKsZ,wBACLI,EAAqC3Z,KAAKC,KAC9C,EAEAmS,eAAexS,UAAUia,sBAAwB,WAE7C,MAAMC,EACF,EAAAnQ,mBAAmBoQ,aACf,mCAGJD,GACAA,EAAUD,uBAElB,EAEAzH,eAAexS,UAAUoa,qBAAuB,WAC5C,MAAMC,EAAiBC,MAAMD,iBACvBE,EAAQF,EACRG,OAAOC,WACPD,OAAOE,OAAOC,WACdC,EAAQP,EACRG,OAAOK,YACPL,OAAOE,OAAOI,YACdlY,EAAWvC,KAAKH,MAChB6a,EAAY1a,KAAKF,OAEvB,MAAO,CACHoa,QACAK,QACAhY,WACAmY,YACAC,KAAMJ,EAAQG,EACdE,KAAMV,EAAQ3X,EAEtB,EAEA4P,eAAexS,UAAUkb,gBAAkB,WACvC,MAAMC,EAAa9a,KAAK+a,YAClBC,GAAoD,IAA/B1b,aAAakJ,aAClCyS,EAAoBC,aAAaC,kBAAkB1Q,UAIzD,GAHAzK,KAAKob,cAAgB9b,aAAa+b,eAG9BL,EAAoB,CACpB,MAAM,SAAEzY,EAAQ,UAAEmY,EAAS,KAAEE,EAAI,KAAED,GAC/B3a,KAAK+Z,uBAEHuB,EACFvR,SAASlK,MAAQ,EACjB0C,EAAW,EACXhB,GAAGC,cAAcC,OAAO8Z,aAAaxQ,EACnCyQ,EACDxb,KAAKob,eAAiBrR,SAASjK,OAAS4a,GAAc,EACvDnZ,GAAGC,cAAcC,OAAO8Z,aAAatQ,EAEzCjL,KAAK+K,EAAI6L,KAAKkC,IAAIwC,EAAUV,GAC5B5a,KAAKiL,EAAI2L,KAAKkC,IAAI0C,EAAUb,E,MAExBM,GACAjb,KAAK4Z,wBAKb,GAAIkB,EAAY,CACZ,MAAMW,EAAWX,EAAWhb,OAC5BE,KAAK+a,YAAY9P,EACbjL,KAAKiL,EAAIwQ,EAAW,EAAI1R,SAASjK,OAASgb,EAAWhb,M,CAa7D,GATAE,KAAK0b,uBACL1b,KAAK2b,wBACL3b,KAAKkZ,uBAO2B,KAA5B5Z,aAAa0Y,WAAmB,CAChC,MAAM4D,EAAY,QAAQpQ,KAAKlM,aAAa0Y,YACtC6D,EAAY,EAEdta,GAAGC,cAAcC,OAAOwC,SACxBjE,KAAK8b,cAAcF,EAAY,EAAIC,GAEnC7b,KAAK8b,cAAcD,E,CAG/B,EAEA1J,eAAexS,UAAUoc,mBAAqB,WAC1C,OAAO/b,KAAKmZ,cAAcN,QAAU7Y,KAAKuR,WAAa,CAC1D,EAEAY,eAAexS,UAAUmc,cAAgB,SAAUE,EAAS,GACxD,MAAMC,EAASjc,KAAKic,OACdC,EAAa3a,GAAGC,cAAcC,OAAOwC,SAEvCgY,GAAUC,GACVlc,KAAKmc,cAAcnc,KAAKmZ,cAAe6C,EAE/C,EAEA7J,eAAexS,UAAUyc,gBAAkB,WACnCpc,KAAKmZ,cAAcN,SAEnB7Y,KAAKmZ,cAAcN,OAAS,KAEpC,EAEA,MAAMwD,EACFlK,eAAexS,UAAUkP,wBAC7BsD,eAAexS,UAAUkP,wBAA0B,SAAUxO,GACzD,MAAMgM,EAAU9K,GAAGC,cAAc8K,UAAUC,KAErCuC,GADWvN,GAAGC,cAAc8K,UAAUG,KAC3BlL,GAAGC,cAAc8J,IAAIyD,OA0GtC,OA9CA1O,GA/BAA,GANAA,GANAA,GANAA,GANAA,GAJAA,EAAOgc,EAA6Ctc,KAChDC,KACAK,IAEQ2O,QACRF,EAASzC,EAAQiQ,eACjB,WACI,OAAOxN,EAASzC,EAAQ+G,YAAYhC,MACxC,EAAE/B,KAAKrP,QAECgP,QACRF,EAASzC,EAAQkQ,aACjB,WACI,OAAOzN,EAASzC,EAAQgH,UAAUjC,MACtC,EAAE/B,KAAKrP,QAECgP,QACRF,EAASzC,EAAQmQ,iBACjB,WACI,OAAO1N,EAASzC,EAAQmH,cAAcpC,MAC1C,EAAE/B,KAAKrP,QAECgP,QACRF,EAASzC,EAAQoQ,eACjB,WACI,OAAO3N,EAASzC,EAAQoH,YAAYrC,MACxC,EAAE/B,KAAKrP,QAECgP,QAAQF,EAASzC,EAAQqQ,OAAO,IAAIxN,KAC5C,IAAIyN,EAAUzN,EAAK,GA4BnB,OA1BIyN,EAAQC,SAAS,WACjBD,EAAUA,EAAQ3N,QAAQ,QAAS,IACnCzN,GAAGC,cAAcC,OAAOob,oBAAsB,QAE9CF,EAAQC,SAAS,WACjBD,EAAUA,EAAQ3N,QAAQ,QAAS,IACnCzN,GAAGC,cAAcC,OAAOob,oBAAsB,QAE9CF,EAAQC,SAAS,aACjBD,EAAUA,EAAQ3N,QAAQ,UAAW,IACrCzN,GAAGC,cAAcC,OAAOob,oBAAsB,UAE9CF,EAAQC,SAAS,eACjBD,EAAUA,EAAQ3N,QAAQ,YAAa,IACvCzN,GAAGC,cAAcC,OAAOob,oBAAsB,YAE9CF,EAAQC,SAAS,qBACjBD,EAAUA,EAAQ3N,QAAQ,kBAAmB,IAC7CzN,GAAGC,cAAcC,OAAOob,oBACpB,kBAEJF,EAAQC,SAAS,YACjBD,EAAUA,EAAQ3N,QAAQ,SAAU,IACpCzN,GAAGC,cAAcC,OAAOob,oBAAsB,SAElD7c,KAAK8c,eAAeC,QAAQJ,GACrB,EAAE,KAED3N,QACRF,EAASzC,EAAQ2Q,SACjB,WACI,MAAMjU,EAAQhF,OAAOkZ,UAAU,KAAO,GAWtC,OAVIC,WAAWC,WACX7d,aAAagJ,WAETS,EAAQ,EACF,aAAe6N,KAAKwG,IAAIrU,GACxB,YAAcA,GAGxBzJ,aAAagJ,WAAWS,GAErB,EACX,EAAEsG,KAAKrP,OAEXK,EAAOA,EAAK2O,QACRF,EAASzC,EAAQgR,iBACjB,WACI,MAAMtU,EAAQhF,OAAOkZ,UAAU,IAAM,GAKrC,OAJA3d,aAAagJ,WAET,YAAcS,GAEX,EACX,EAAEsG,KAAKrP,OAEXK,EAAOA,EAAK2O,QACRF,EAASzC,EAAQiR,cACjB,WACI,MAAMvU,EAAQhF,OAAOkZ,UAAU,IAAM,GAKrC,OAJA3d,aAAagJ,WAET,aAAeS,GAEZ,EACX,EAAEsG,KAAKrP,OAEJK,EAAK2O,QAAQF,EAASzC,EAAQkR,iBAAiB,KAClD,MAAMxU,EAAQhF,OAAOkZ,UAAU,IAAM,GAIrC,OAHKjd,KAAKkR,qBACN3P,GAAGC,cAAcC,OAAOyW,cAAgBnP,GAErC,EAAE,GAGjB,EAGAoJ,eAAexS,UAAU6d,UAAY,SAAUjV,GAC3CvI,KAAKkM,SAAS3M,QACdD,aAAa8I,WAAWG,GACxBvI,KAAKF,OAASE,KAAKyd,cAAclV,GACjCvI,KAAK0d,iBACL1d,KAAK6a,iBACT,EAEA,MAAM8C,EACFxL,eAAexS,UAAUC,WAC7BuS,eAAexS,UAAUC,WAAa,SAAUge,GAC5CD,EAAgC5d,KAAKC,KAAM4d,GAC3CC,UAAU3U,gBAAgBlJ,KAAKwd,UAAUnO,KAAKrP,OAC9CA,KAAKwd,UAAUjc,GAAGC,cAAcC,OAAOmC,gBACvC5D,KAAK8d,qBACL9d,KAAK+d,GAAG,UAAW/d,KAAKge,mBAAoBhe,MAC5CA,KAAK+d,GAAG,mBAAoB/d,KAAKie,iBAAkBje,KACvD,EAEAmS,eAAexS,UAAUue,gBAAkB,SAAU7d,GAE7C,EAAAqJ,mBAAmBoQ,aACf,mCAGEoE,gBAAgB7d,EAC9B,EAEA,MAAM8d,EAA+BhM,eAAexS,UAAUye,QAC9DjM,eAAexS,UAAUye,QAAU,SAAUhT,GACzCpL,KAAK8b,gBACL9b,KAAKoc,kBACLpc,KAAKmN,iBACLnN,KAAKqe,KAAK,oBACVre,KAAKse,YAAYhf,aAAakJ,cAC9B2V,EAA6Bpe,KAAKC,KAAMoL,EAC5C,EAEA+G,eAAexS,UAAU4e,8BAAgC,WACrD,MAAM1E,EACF,EAAAnQ,mBAAmBoQ,aACf,mCAGJD,GACAA,EAAU0E,+BAElB,EAEApM,eAAexS,UAAU2e,YAAc,SAAUE,IAE/B,IAAVA,GAKJxe,KAAKye,WAAWD,GAEMtD,aAAaC,kBAAkBuD,aAGjD1e,KAAKue,gCAELve,KAAK4Z,yBAXL5Z,KAAK2e,qBAab,EAMIxM,eAAexS,UAAUif,aAC7BzM,eAAexS,UAAUif,aAAe,WACpC,MAAMve,EAAOf,aAAauf,UACpBzT,EAAYpL,KAAK8N,gBAAgBzN,EAAM,EAAG,EAAG,GACnD+K,EAAUL,EAAI/K,KAAKuR,SAASnG,GAC5BA,EAAU4G,OAAS5G,EAAUL,EAC7B/K,KAAKyR,WAAarG,EAGlB,IAAI0T,EAAW1T,EAAU/K,KAAKoL,MAAM,IAED,IAA/BnM,aAAakJ,cACbjH,GAAGC,cAAcC,OAAOsW,sBAExB+G,EAAWA,EAAS9P,QAAQ,YAAa,MAG7ChP,KAAKke,gBAAgBY,GAErB9e,KAAKoe,QAAQpe,KAAKyR,YAGlBzR,KAAK2e,oBAAoB,YAEzB3e,KAAK6a,kBACL7a,KAAK+e,mBACL/e,KAAKgf,OACLhf,KAAK8c,eAAepS,OACxB,EAEAyH,eAAexS,UAAUsf,qBAAuB,WAC5C,OAAO3V,cAAc3J,UAAUkK,mBACnC,EAEAsI,eAAexS,UAAUuf,YAAc,WAEnC,OADalf,KAAKif,uBACNpf,KAChB,EAEAsS,eAAexS,UAAUwf,aAAe,WAEpC,OADanf,KAAKif,uBACNnf,MAChB,EAEAqS,eAAexS,UAAUgf,oBAAsB,YACxCzP,GAEH,MAAMkQ,IAA0BlQ,EAAK3I,OAAS,GAExC8Y,EAAgBnE,aAAaC,kBAAkBuD,aACrD,IAAKU,GAAgBC,EACjB,OAGJ,MAAM9W,EAAIjJ,aAAa+b,eACjBiE,EAAK/d,GAAGC,cAAcC,OAAO8Z,aAAaxQ,EAC1CwU,EAAKhe,GAAGC,cAAcC,OAAO8Z,aAAatQ,EAE1CuU,EAAa,CACf3f,MAAOG,KAAKkf,cACZpf,OAAQE,KAAKmf,gBAEXpU,EAAIhB,SAASlK,MAAQ,EAAI2f,EAAW3f,MAAQ,EAAIyf,EAChDrU,EAAK1C,GAAKwB,SAASjK,OAAS0f,EAAW1f,QAAW,EAAIyf,EACtD1f,EAAQ2f,EAAW3f,MACnBC,EAAS0f,EAAW1f,OAEtBiL,IAAM/K,KAAK+K,IAAG/K,KAAK+K,EAAIA,GACvBE,IAAMjL,KAAKiL,IAAGjL,KAAKiL,EAAIA,GACvBpL,IAAUG,KAAKH,OAASC,IAAWE,KAAKF,SACxCE,KAAKH,MAAQA,EACbG,KAAKF,OAASA,GAGdsf,GACA/Z,SAAS2B,YAAYH,YAE7B,EAEAsL,eAAexS,UAAUqe,mBAAqB,WAC1Che,KAAKyf,IAAI,mBAAoBzf,KAAKie,iBAAkBje,KACxD,EAQAmS,eAAexS,UAAUmD,UAAY,SAAUyF,GAC3C,MAAMjF,EAAatD,KAAKsD,WACxB,IAAKA,EAAWoc,UAEZ,OAAO,EAAA9T,MAAMyB,UAEjB,MAAMgJ,EAAK,GAAM9N,EAAI,EAAK,GAAK,EACzB+N,EAAK,IAA0B,GAApBM,KAAKC,MAAMtO,EAAI,GAAU,EAC1C,OAAOjF,EAAWqc,SAAStJ,EAAIC,EACnC,EAEAnE,eAAexS,UAAUse,iBAAmB,WACxC,EAAArS,MAAMyB,UAAYrN,KAAK8C,UAAU,GACjC9C,KAAK+L,gBAAgB,EAAAH,MAAMyB,UAC/B,EAEA8E,eAAexS,UAAUwN,eAAiB,WACtC,MAAM0L,EAASrV,aAAaC,WACxBlC,GAAGC,cAAcC,OAAO6B,YAI5B,GAAIuV,IAAW7Y,KAAKsD,aAChBtD,KAAKsD,WAAauV,EAClB7Y,KAAK4f,oBAAqB,EAC1B5f,KAAKsD,WAAW8J,iBAAgB,KAC5BpN,KAAK4f,oBAAqB,CAAI,IAE7B5f,KAAKkM,UACNlM,KAAK0d,iBAGT1d,KAAK+L,gBAAgB,EAAAH,MAAMyB,YAEtBrN,KAAKsD,WAAWoc,WACjB,OAAOG,YAAW,IAAM7f,KAAKmN,kBAAkB,GAG3D,EAEA,MAAM2S,EACF3N,eAAexS,UAAUogB,cAC7B5N,eAAexS,UAAUogB,cAAgB,WACrC,IAAIvK,GAAM,EAQV,OANIxV,KAAK4f,qBACL,EAAAhU,MAAMyB,UAAYvB,aAAahJ,UAAU,GACzC9C,KAAK+L,gBAAgB,EAAAH,MAAMyB,WAC3BrN,KAAK4f,oBAAqB,EAC1BpK,GAAM,GAEHsK,EAA8B/f,KAAKC,OAASwV,CACvD,EAEArD,eAAexS,UAAUmX,aAAe,SAAU1L,GAC9C,OACKpL,KAAK0Y,YAAYtN,IAClBA,EAAUH,EAAIG,EAAUtL,OAASE,KAAKggB,gBAE9C,EAEA7N,eAAexS,UAAUme,mBAAqB,WAM1C,OALA9d,KAAKmZ,cAAgB,IAAI8G,OACzBjgB,KAAKmZ,cAAcpO,EAAI,EACvB/K,KAAKmZ,cAAclO,EAAI,EAEvBjL,KAAKkgB,WAAWlgB,KAAKmZ,cAAe,GAC7BnZ,KAAKmZ,aAChB,EAEAhH,eAAexS,UAAUwgB,mBAAqB,WACtCngB,KAAKmZ,eAAenZ,KAAKogB,YAAYpgB,KAAKmZ,cAClD,EAKAhH,eAAexS,UAAU4R,SAAW,WAChC,MACMyG,EAAW1Y,aAAa0Y,WACxBqI,EAAY/gB,aAAa+gB,YAC/B,GAHY,SAGJ7U,KAAKwM,GAAW,CACpB,IAAIsI,EAAa/e,GAAGC,cAAcC,OAAOwC,SACnC,EACA1C,GAAGC,cAAcC,OAAOoC,WAC9B,OAAOwc,EAAY,EAAI,EAAIC,C,CAI3B,OAD8C,IAA1C/e,GAAGC,cAAcC,OAAOyW,cAEjB,EAEJF,EAAWzW,GAAGC,cAAcC,OAAO8e,iBAAmB,CAErE,EAMApO,eAAexS,UAAU6gB,eAAiB,SAAUxI,GAEhD,MADY,SACDxM,KAAKwM,EACpB,EAKA7F,eAAexS,UAAU8gB,iBAAmB,WAAa,EAOzDtO,eAAexS,UAAU+gB,oBAAsB,WAC3C,OAAOnf,GAAGC,cAAcC,OAAOkf,WACnC,EAMAxO,eAAexS,UAAUihB,mBAAqB,WAC1C,OAAOrf,GAAGC,cAAcC,OAAOmf,kBACnC,EAMAzO,eAAexS,UAAU+b,qBAAuB,WAC5C1b,KAAKqZ,QAAU9X,GAAGC,cAAcC,OAAO0C,cAC3C,EAMAgO,eAAexS,UAAUgc,sBAAwB,WAC7C3b,KAAK6gB,gBAAkBtf,GAAGC,cAAcC,OAAOof,eACnD,EAEA1O,eAAexS,UAAUmhB,gBAAkB,SACvCtC,GAEA,IAAKtB,WAAW6D,UAAW,OAAO,KAClC,MAAMC,EAAM9D,WAAW6D,UAAUxa,OAGjC,MAAO,CACH0a,KAAM,QACNC,IAJJ1C,EAAOA,EAAK7J,MAAM,EAAGqM,IAIN,EAEnB,EAEA7O,eAAexS,UAAUwhB,iBAAmB,SACxC3C,GAEA,IAAK4C,WAAWL,UAAW,OAAO,KAClC,MAAMC,EAAMI,WAAWL,UAAUxa,OAGjC,MAAO,CACH0a,KAAM,QACNC,IAJJ1C,EAAOA,EAAK7J,MAAM,EAAGqM,IAIN,EAEnB,EAEA7O,eAAexS,UAAU8e,WAAa,SAAUD,GAC5C,OAAQA,GACJ,KAAM,EACFnZ,SAAS2B,YAAYH,aACrB,MACJ,KAAK,EACDxB,SAAS2B,YAAwB3B,SAAS+B,eAC1C,MACJ,QACQ8T,aAAaC,kBAAkBuD,cAE3B,uBAAuB2C,KAAK7C,EAAKpP,aAEjC/J,SAAS2B,YACLhH,KAAKmhB,iBAAiBxd,SAAS2d,OAAOC,MAG1C,sBAAsBF,KAAK7C,EAAKpP,aAEhC/J,SAAS2B,YACLhH,KAAK8gB,gBAAgBnd,SAAS2d,OAAOC,OAK7Clc,SAAS2B,YAAY3B,SAASmc,MAAMhD,IAIpD,EAEA,MAAMiD,EACFtP,eAAexS,UAAU+hB,gBAC7BvP,eAAexS,UAAU+hB,gBAAkB,SAAUrhB,GACjD,MAAMshB,EAAmBF,EAAqC1hB,KAC1DC,KACAK,GAGJ,GAAIshB,GACIpgB,GAAGC,cAAcC,OAAO2C,gBAAiB,CACzC,MAAMwd,EAAWrgB,GAAGC,cAAcC,OAAOogB,kBAErC7hB,KAAK8hB,sBAAwB,IAC7B3M,aAAa4M,aAAuC,CAChD9R,KAAM1O,GAAGC,cAAcwgB,aACnB,aACA,WAEJlN,IAAK,EACLC,MAAO,IACPC,OAAQ,KAEZhV,KAAK8hB,mBAAqBF,E,CAKtC,OAAOD,CACX,CAAC,CAET,C,gGC9mCA,qCACI,MAAO,KAIHM,eAAetiB,UAAUkb,gBAAkB,WACvC7a,KAAKH,MAAQG,KAAKkf,cAClBlf,KAAKF,OAASE,KAAKmf,eACnB,MAAM3V,EAAgBxJ,KAAKyJ,eACvBnK,aAAa4iB,QACbliB,KAAK+K,EAAIvB,EAAcuB,EAAIvB,EAAc3J,MAAQG,KAAKH,MAEtDG,KAAK+K,EAAIvB,EAAcuB,EAEvBvB,EAAcyB,EAAI,EAClBjL,KAAKiL,EAAIzB,EAAcyB,EAAIjL,KAAKF,OAEhCE,KAAKiL,EAAIzB,EAAcyB,EAAIzB,EAAc1J,MAEjD,CAAC,CAET,C,0GCvBA,eAoDA,MAAaqiB,UAAwC,EAAAC,cAArD,c,oBACY,KAAAC,QAAkB,EAClB,KAAAC,SAAmB,CA8Y/B,CA3YIC,QAAQC,GACJC,MAAMF,QAAQC,GACdxiB,KAAKqiB,QAAUriB,KAAKH,MACpBG,KAAKsiB,SAAWtiB,KAAKF,MACzB,CAQAoe,gBAAgB7d,GAiFZL,KAAKe,OAEL,CAII,MAAM6c,EAAO5d,KAAK0iB,WAAWriB,GACvB4R,EAAUjS,KAAK2iB,kBACrB3iB,KAAKqiB,QAAUzE,EAAK/d,MAAkB,EAAVoS,EAC5BjS,KAAKsiB,SAAW1L,KAAKoK,IACjBpD,EAAK9d,OAAmB,EAAVmS,EACdjS,KAAKyd,cAAc,G,CAI3Bzd,KAAKmB,SACT,CAEAuhB,WAAWriB,GACPL,KAAKwJ,cAAc0H,oBAAqB,EACxC,MAAM0M,EAAO5d,KAAKwJ,cAAckZ,WAAWriB,GAG3C,OAFAL,KAAKwJ,cAAc0H,oBAAqB,EAEjC0M,CACX,CAKA/C,kBACI7a,KAAKwJ,cAAcqR,iBACvB,CAEA+H,oBAEI,SADwD,IAA/BtjB,aAAakJ,eAElCxI,KAAK6a,kBACE,GAGf,CAEAgI,eAAehO,GACX,MAAMmD,EAAW1Y,aAAa0Y,WACxBE,EAAgB3W,GAAGC,cAAcC,OAAOyW,cAExCoH,EAAK/d,GAAGC,cAAcC,OAAO8Z,aAAaxQ,EAC1CwU,EAAKhe,GAAGC,cAAcC,OAAO8Z,aAAatQ,EAChDjL,KAAK+K,EAAI8J,EAAKiO,GAAKxD,EACnBtf,KAAKiL,EAAI4J,EAAKkO,GAAKxD,EACnBvf,KAAKH,MAAQG,KAAKqiB,QAClBriB,KAAKF,OAASE,KAAKsiB,SAEftK,GAA8B,IAAlBE,GACZlY,KAAKgjB,iBAEb,CAEAC,oBAAoBpO,GACL9K,SAASlK,MACTkK,SAASjK,OADpB,MAEMojB,EAAKnZ,SAASoZ,SACdC,EAAKrZ,SAASsZ,UAIpB,GAFA3U,QAAQC,IAAI,2BAA6B2U,KAAKC,UAAU1O,IAEnDA,EA2BL,OA1BIA,EAAK2O,GAAKxjB,KAAKqiB,QAAU,EAAI,IAC7BxN,EAAKiO,GAAK,EACVjO,EAAKpU,GAAKT,KAAKyjB,eAAe5O,EAAK2O,KAInC3O,EAAK2O,GAAKxjB,KAAKqiB,QAAU,EAAIa,EAAKljB,KAAKqiB,UACvCxN,EAAKiO,GAAKI,EAAKljB,KAAKqiB,QACpBxN,EAAKpU,GAAKT,KAAKyjB,eAAe5O,EAAK2O,KAInC3O,EAAK6O,GAAK1jB,KAAKsiB,SAAWzN,EAAK1N,WAAa,EAAI,IAChD0N,EAAKkO,GAAKlO,EAAK6O,GAAK7O,EAAK1N,WAAa,EACtC0N,EAAK8O,QAAU,EACf9O,EAAKnU,GAAKV,KAAKiW,QAAUpB,EAAK8O,OAAS3jB,KAAKiW,QAC5CpB,EAAK+O,GACD5jB,KAAKiL,EAAIjL,KAAKsiB,SAAW/gB,GAAGC,cAAcC,OAAOoiB,aAIrDhP,EAAK6O,GAAK1jB,KAAKsiB,SAAWc,EAAKpjB,KAAKsiB,WACpCzN,EAAKkO,GAAKK,EAAKpjB,KAAKsiB,SACpBzN,EAAKnU,GAAKV,KAAKiW,SAGZpB,CACX,CAOAiP,yBAAyBjP,GACrB,MAAMiB,EAAmB9V,KAAKwJ,cAAcsM,iBACxCA,IACAA,EAAiBC,KAAKlB,EAAKpU,GAAIoU,EAAKnU,IACpCoV,EAAiBI,MAAMjL,EAAI4J,EAAK8O,QAEpC3jB,KAAK+jB,YAAY9Y,EAAI4J,EAAK+O,EAC9B,CAEAI,iBAMI,OAJIhkB,KAAKiL,EACLjL,KAAK+jB,YAAYjkB,OACjByB,GAAGC,cAAcC,OAAOoiB,aAEX,CACrB,CAoBAjK,wBACIlL,QAAQC,IACJ,mEAGJ,IAAIkG,EAAwB,CAAC,EAE7B,IAAK7U,KAAK4iB,oBAAqB,OAG/B,MAAMqB,EAAwB5e,SAAS0B,cAEvC,IAAKkd,EAED,MADAvV,QAAQwV,KAAK7e,SAAS0B,eAChB,IAAIod,MAAM,kBAGpBtP,EAAK2O,GAAKS,EAAMnZ,UAChB+J,EAAK6O,GAAKO,EAAMjZ,UAEhB0D,QAAQC,IAAI,QAASkG,EAAK2O,GAAI3O,EAAK6O,IAEnC7O,EAAKpU,GAAKT,KAAKqiB,QAAU,EACzBxN,EAAKnU,GAAKV,KAAKsiB,SACfzN,EAAK8O,OAAS,EACd9O,EAAK1N,WAAa7H,aAAa0J,0BAC/B6L,EAAKiO,GAAKjO,EAAK2O,GAAKxjB,KAAKqiB,QAAU,EACnCxN,EAAKkO,GAAKlO,EAAK6O,GAAK1jB,KAAKsiB,SAAWzN,EAAK1N,WACzC0N,EAAK+O,GAAK5jB,KAAKgkB,iBAEftV,QAAQC,IAAI2U,KAAKC,UAAU1O,IAE3BA,EAAwB7U,KAAKijB,oBAAoBpO,GAG7CA,EAAKiO,GAAKvhB,GAAGC,cAAcC,OAAO8Z,aAAaxQ,IAAM/K,KAAK+K,GAC1D8J,EAAKkO,GAAKxhB,GAAGC,cAAcC,OAAO8Z,aAAatQ,IAAMjL,KAAKiL,GAC1DjL,KAAKqiB,UAAYriB,KAAKH,OACtBG,KAAKsiB,WAAatiB,KAAKF,SAGvBE,KAAK6iB,eAAehO,GAGpB7U,KAAK8jB,yBAAyBjP,GAEtC,CAEA0J,gCACI,IAAKrB,WAAWC,WAGZ,YADAzO,QAAQwV,KAAK,YAGjB,IAAKE,YAAYC,aAGb,YADA3V,QAAQwV,KAAK,kBAIjB,IAAIrP,EAAwB,CAAC,EAGzBoP,EAAQ5e,SAAS0B,cACrB,IAAKkd,EAED,YADAvV,QAAQwV,KAAK,kBAGjB,IAAKD,EAAMK,eAAe,QAEtB,YADA5V,QAAQwV,KAAK,mBAAqBD,GAGtC,IAAKA,EAAMK,eAAe,MAEtB,YADA5V,QAAQwV,KAAK,iBAAmBD,GAKpC,IAMIhI,EANAsI,EAAQrJ,aAAaC,OACzB,KAAMoJ,aAAiB7F,cAEnB,OADAhQ,QAAQwV,KAAK,gBACN,EAOPjI,EADe,UAAfgI,EAAMhD,KACGsD,EAAMC,WAAWC,cAEjBF,EAAMC,WAAWE,cAI9B,IAAIC,EAAe,GACnBA,EAAe1I,EACf,IAAI2I,EAASD,EAAaV,EAAM/C,IAC3B0D,EAOe,UAAfX,EAAMhD,OACa2D,EAAQC,OAAOC,WACnB,UAAfb,EAAMhD,OAAoC2D,EAAQG,OAAOD,YAK9DjQ,EAAK2O,GAAKoB,EAAO7Z,EACjB8J,EAAK6O,GAAKkB,EAAO3Z,EAEjB4J,EAAKmQ,KACc,UAAff,EAAMhD,KACC2D,EAAwBK,YAAYpM,OAAO/Y,OAAS,EACrD8kB,EAAO/L,OAAO/Y,OAExB+U,EAAKpU,GAAKT,KAAKgW,OAAS,EACxBnB,EAAKnU,GAAKV,KAAKiW,QAEfpB,EAAK8O,OAAS,EACd9O,EAAK1N,WAAa7H,aAAa0J,0BAE/B6L,EAAKiO,GAAKjO,EAAK2O,GAAKxjB,KAAKqiB,QAAU,EACnCxN,EAAKkO,GAAKlO,EAAK6O,GAAK1jB,KAAKsiB,SAAWzN,EAAK1N,WAAa0N,EAAKmQ,KAE3DnQ,EAAK+O,GACD5jB,KAAKiL,EACLjL,KAAK+jB,YAAYjkB,OACjByB,GAAGC,cAAcC,OAAOoiB,YAE5BhP,EAAwB7U,KAAKijB,oBAAoBpO,GAGjD7U,KAAK6iB,eAAehO,GAGpB7U,KAAK8jB,yBAAyBjP,GAE1B7U,KAAKklB,WAAWllB,KAAKmlB,mBA3CrBzW,QAAQwV,KAAK,WA4CrB,CAEAiB,kBACInlB,KAAKwJ,cAAc2b,iBACvB,CAEAC,sBAAsB/kB,GAElBL,KAAKe,OAEL,MAAMyI,EAAgBxJ,KAAKwJ,cACrB6b,EAAerlB,KAAKkM,SAAS9J,SAE7BgJ,EAAY5B,EAAcsE,gBAAgBzN,EAAM,EAAG,EAAG,GAQ5D,OAPA+K,EAAU/K,KAAOmJ,EAAcqF,wBAAwBxO,GACvD+K,EAAUtL,OAAS0J,EAAc8b,eAAela,GAAW,GAG3DpL,KAAKmB,UAELqI,EAAcmJ,YAAY0S,GACnBja,EAAUtL,MACrB,EA/YJ,mC,wFCpDA,eAOA,MAAasiB,UAAsB,EAAAmD,UAG/BC,YAAYhD,GACRC,MAAMD,EACV,CAEAD,QAAQC,GAEE,kBAAmBA,GAKzB9T,QAAQC,IAAI,0BAKZ3O,KAAKyJ,eAAiB+Y,EAAMhZ,eATxBkF,QAAQ+W,MAAM,+BAUtB,CAGIjc,oBACA,OAAOxJ,KAAKyJ,cAChB,CAEIyC,eACA,OAAOlM,KAAKyJ,eAAeyC,QAC/B,CAKI6X,kBAEA,IADuB/jB,KAAKyJ,eAAeqT,eAEvC,MAAM,IAAIqH,MACN,iDAIR,OAAOnkB,KAAKyJ,eAAeqT,cAC/B,CAEI4I,oBACA,OAAO1lB,KAAKyJ,eAAekc,kBACrB3lB,KAAKyJ,eAAekc,kBACpB,CACIzG,YAAa,IAAM,EACnBC,aAAc,IAAM,EAElC,CAEApe,OACIf,KAAKyJ,eAAe1I,MACxB,CAEAI,UACInB,KAAKyJ,eAAetI,SACxB,CAEAwhB,kBAMI,OAHA3iB,KAAKyJ,eAAemc,gBACJ5lB,KAAKyJ,eAAewI,SAAW,EAGnD,CAEAZ,cAEI,OAAOrR,KAAKyJ,eAAe6H,eAAiB,CAChD,CAEAC,WACI,OAAOvR,KAAKyJ,eAAe8H,UAC/B,CAEAkM,cAAcoI,GACV,OAAO7lB,KAAKyJ,eAAegU,cAAcoI,EAC7C,CAEAjY,WAAWvN,GAEP,OADYL,KAAKyJ,eAAeiZ,WAAWriB,GAChCR,KACf,CAEA6B,aACI,OAAO1B,KAAKyJ,eAAe/H,YAC/B,CAKAmZ,kBAAmB,CAEnBmI,kBACIhjB,KAAKyJ,eAAeuZ,iBACxB,CAEIjY,MAAEhC,GACF/I,KAAKyJ,eAAesB,EAAIhC,CAC5B,CAEIkC,MAAElC,GACF/I,KAAKyJ,eAAewB,EAAIlC,CAC5B,CAEIlJ,UAAMkJ,GACN/I,KAAKyJ,eAAe5J,MAAQkJ,CAChC,CAEIjJ,WAAOiJ,GACP/I,KAAKyJ,eAAe3J,OAASiJ,CACjC,CAEIlJ,YACA,OAAOG,KAAKyJ,eAAe5J,KAC/B,CAEImW,aACA,OAAOhW,KAAKyJ,eAAe5J,KAC/B,CAEIC,aACA,OAAOE,KAAKyJ,eAAe3J,MAC/B,CAEImW,cACA,OAAOjW,KAAKyJ,eAAe3J,MAC/B,CAEA2jB,eAAe1Y,GACX,OAAOA,CACX,CAEA+a,eAAe7a,GACX,OAAOA,CACX,EA5IJ,iB,sGCPA,eAOA,MAAa8a,UAAoC,EAAA3D,cAC7C4D,WAAWjd,GACP,IAAIsQ,EAAUtQ,EACS,iBAAZsQ,IACPA,EAAUtV,OAAOsV,IAEjB4M,MAAM5M,KACNA,EAAU,KAEdrZ,KAAK+jB,YAAY1K,QAAUtQ,CAC/B,CAEAmd,kBAEI,IAAKlmB,KAAK+jB,YACN,OAGJ,MAAMP,EAAKxjB,KAAK+K,EACV2L,EAAI1W,KAAKH,MACTsmB,EAAKnmB,KAAK+jB,YAAYlkB,MAEtBumB,EACF7kB,GAAGC,cAAcC,OAA0B,oBAGzC4kB,EAAK9kB,GAAGC,cAAcC,OAAO6kB,YAEnC,IAAIC,EAAO/C,EAAK6C,EAEhB,OAAQD,GACJ,IAAK,QACDG,EAAO/C,EAAK9M,EAAIyP,EAAKE,EACrB,MACJ,IAAK,SACDE,EAAO/C,EAAK9M,EAAI,EAAIyP,EAAK,EAAIE,EAC7B,MACJ,IAAK,OACDE,EAAO/C,EAAK6C,EACZ,MACJ,IAAK,WACDrmB,KAAKgmB,WAAW,GAChB,MACJ,IAAK,iBACDhmB,KAAKgmB,WAAWzkB,GAAGC,cAAcC,OAAO0C,gBACxC,MACJ,IAAK,OACDoiB,EAAOvmB,KAAK+K,EAAI/K,KAAKuR,WAAa8U,EAI1CrmB,KAAK+jB,YAAYhZ,EAAIwb,CACzB,CAEAC,kBACejlB,GAAGC,cAAcC,OAAO8Z,aAAaxQ,EAAhD,MACMwU,EAAKhe,GAAGC,cAAcC,OAAO8Z,aAAatQ,EAC1CoQ,EAAe/b,aAAa+b,eAC5BoL,EAAkBnnB,aAAakJ,aAKrC,GAHAxI,KAAKkmB,kBAGgB,IAAjB7K,IAA2C,IAArBoL,EAAwB,CAE9C,MAAMC,EAAO,EAEb1mB,KAAK+jB,YAAY9Y,EAAIyb,EAAOnH,EAG5Bvf,KAAKiL,EAAIjL,KAAK+jB,YAAY4C,SACpBD,EACA1mB,KAAK+jB,YAAYjkB,OACjByB,GAAGC,cAAcC,OAAOoiB,YACxBtE,EACAmH,EAAOnH,C,MAEbvf,KAAK+jB,YAAY9Y,EACbjL,KAAKiL,EACLjL,KAAK+jB,YAAYjkB,OACjByB,GAAGC,cAAcC,OAAOoiB,WAEpC,EAlFJ,+B,oFCPA,eAYA,MAAa0B,UAAkB,EAAAqB,aAI3BpB,YAAYhD,GACRC,QACAziB,KAAK6mB,KAAKrE,EACd,CAEAqE,KAAKrE,GACDxiB,KAAKwiB,MAAQA,EAEbxiB,KAAK+d,GAAG,SAAUyE,GAAyBxiB,KAAKuiB,QAAQC,KACxDxiB,KAAK+d,GAAG,WAAYyE,GAAyBxiB,KAAK8mB,QAAQtE,KAC1DxiB,KAAK+d,GAAG,WAAYyE,GAAyBxiB,KAAK+mB,aACtD,CAEAnd,QACI5J,KAAKqe,KAAK,QAASre,KAAKwiB,MAC5B,CAEAwE,UACIhnB,KAAKqe,KAAK,UAAWre,KAAKwiB,MAC9B,CAEAyE,UACIjnB,KAAKqe,KAAK,UAAWre,KAAKwiB,MAC9B,CAEAD,QAAQC,GAAuB,CAC/BuE,YAAa,CACbD,QAAQtE,GAAuB,EA/BnC,a,+DCGA,MAAqB0E,EAKVC,qBAIH,OAHKD,EAAkBE,WACnBF,EAAkBE,SAAW,IAAIF,GAE9BA,EAAkBE,QAC7B,CAEA,cAVQ,KAAAC,YAA2C,CAAC,EAC5C,KAAAC,OAAmB,EASL,CAEf9nB,IAAIyQ,EAAc9G,GACrB,GAAa,KAAT8G,EAAa,CACb,IAAIsX,EAAY,GACZC,EAAU,IACVC,EAAM,EAEV,IAAK,IAAI/iB,EAAI,EAAGA,EAAI+iB,EAAK/iB,IACrBuL,GAAQqC,OAAOoV,aACX9Q,KAAKC,MAAMD,KAAK+Q,UAAYH,EAAUD,IAClCA,E,CAahB,OARAvnB,KAAKqnB,YAAYpX,GAAqB,CAClC2X,iBAAkBze,EAClB0e,QAAQ,EACRC,QAAQ,GAGZ9nB,KAAKsnB,OAAOviB,KAAKkL,GAEVjQ,IACX,CAEO+nB,KAAK9X,EAAc9G,GACtB,OAAOnJ,KAAKR,IAAIyQ,EAAM9G,EAC1B,CAEO6e,WAAW/X,EAAc9G,GAI5B,OAHAnJ,KAAKR,IAAIyQ,EAAM9G,GACfnJ,KAAK6nB,OAAO5X,GAELjQ,IACX,CAEOioB,KAAKhY,EAAc9G,GAUtB,OATAnJ,KAAKgoB,WAAW/X,EAAM9G,GAElBnJ,KAAKqnB,YAAYpX,KACjBjQ,KAAKqnB,YAAYpX,GAAQ,OAAH,wBACfjQ,KAAKqnB,YAAYpX,IAAK,CACzB6X,QAAQ,KAIT9nB,IACX,CAEOkoB,IAAIjY,GAGP,OAFajQ,KAAKqnB,YAAYpX,GAElB2X,gBAChB,CAEOC,OAAO5X,GAKV,OAJajQ,KAAKqnB,YAAYpX,GAEzB4X,QAAS,EAEP7nB,IACX,CAEOmoB,SAASlY,GAKZ,OAJajQ,KAAKqnB,YAAYpX,GAEzB4X,QAAS,EAEP7nB,IACX,CAEO4J,MAAMqG,GACT,OAAOjQ,KAAK6nB,OAAO5X,EACvB,CAEOmY,aACH,IACI,IAAK,MAAMC,KAAOroB,KAAKsnB,OAAQ,CAC3B,MAAMgB,EAAOtoB,KAAKqnB,YAAYgB,GAE9B,GAAIC,EAAKT,SAAWS,EAAKR,OAAQ,CAC7B,MAAMS,EAAkBvoB,KAAKkoB,IAAIG,GAE7BE,aAA2BC,UAC3BD,G,GAId,MAAOhT,GACL7G,QAAQC,IAAI4G,E,CAEpB,CAKO3K,wBACH,IACI,MAAM6d,EAA0C,CAAC,EAEjDlS,OAAOmS,QAAQ1oB,KAAKqnB,aACfsB,QAAO,EAAEC,EAAGC,OAASA,EAAEf,SACvBrS,SAAQ,EAAEmT,EAAGC,MACVJ,EAAWG,GAAKC,CAAC,IAGzB,IAAK,MAAMR,KAAOroB,KAAKsnB,OAAQ,CAC3B,MAAMgB,EAAOG,EAAWJ,GAExB,GAAIC,GAAQA,EAAKT,OAAQ,CACrB,MAAMU,EAAkBvoB,KAAKkoB,IAAIG,GAE7BE,aAA2BC,UAC3BD,G,GAId,MAAOhT,GACL7G,QAAQC,IAAI4G,E,CAEpB,EAtIJ,W,6FCdA,eACA,SAEA,SA0CA,MAAa7L,EAWFyd,2BAA2B3d,GAE9BE,EAAmBD,eAAiBD,EACpCE,EAAmBof,OAAOtf,EAC9B,CAEO2d,4BACCzd,EAAmBqf,WACnBrf,EAAmBD,oBAAiBZ,EACpCa,EAAmBsf,gBAAangB,EAChCa,EAAmBqf,UAAW,EAEtC,CAQQ5B,cAAc3d,GACdE,EAAmBqf,SACnBra,QAAQC,IAAI,oCAKhBjF,EAAmBsf,WAAa,CAC5B,IAAI,EAAA7G,gCAAgC,CAAE3Y,kBACtC,IAAI,EAAAuc,4BAA4B,CAAEvc,mBAGtCE,EAAmBqf,UAAW,EAClC,CAQO5B,oBACHlX,GASA,OAJcvG,EAAmBsf,WAAYL,QAAQpT,GAC1CA,aAAa7L,EAAmBuf,kBAAkBhZ,KAGhDiZ,KACjB,CAEA/B,yBAAyBlX,GACrB,OAAQA,GACJ,IAAK,kCACD,OAAO,EAAAkS,gCACX,IAAK,8BACD,OAAO,EAAA4D,4BACX,QACI,OAAO,EAAA3D,cAEnB,CAEO+E,eACCzd,EAAmBsf,YACnBtf,EAAmBsf,WAAWvT,SAASoE,IACnCA,EAAUjQ,OAAO,GAG7B,EAlFJ,uBAMkB,EAAAyd,YAA4C,CAAC,EAC5C,EAAA0B,UAAoB,C,qFCrCvC,qBACEvD,YAAoB2D,EAA8B,CAAC,GAA/B,KAAAA,WAAAA,EAClBnpB,KAAKmpB,WAAa,CAAC,CACrB,CASApL,GAAGqL,EAAuBjgB,GACnBnJ,KAAKmpB,WAAWC,KACnBppB,KAAKmpB,WAAWC,GAAa,IAG1BjgB,GAIDA,aAAgBqf,UAClBxoB,KAAKmpB,WAAWC,GAAWrkB,KAAKoE,EAEpC,CASAkV,KAAK+K,KAA0Bla,GACxBlP,KAAKmpB,WAAWC,IAIrBppB,KAAKmpB,WAAWC,GAAW3T,SAAStM,IAC5BA,aAAgBqf,SAKtBrf,KAAQ+F,GAJNR,QAAQwV,KAAK,yBAIF,GAEjB,E,oFC9DF,oBAcIsB,cACIxlB,KAAKqC,SAAW,eAChBrC,KAAKoC,SAAW,GAChBpC,KAAKC,UAAW,EAChBD,KAAKmC,YAAa,EAClBnC,KAAK8C,UAAY,OACjB9C,KAAKoO,aAAe,OACpBpO,KAAKkO,aAAe,EACpBlO,KAAKE,cAAe,EACpBF,KAAKG,mBAAqB,KAC1BH,KAAKqE,UAAY,EAEjBrE,KAAKqpB,UAAW,CACpB,CAEAtoB,KAA4ByI,GACxBxJ,KAAKqC,SAAWmH,EAAc0C,SAAS7J,SACvCrC,KAAKoC,UAAYoH,EAAc0C,SAAS9J,SACxCpC,KAAKC,SAAWuJ,EAAc0C,SAASjM,SACvCD,KAAKmC,WAAaqH,EAAc0C,SAAS/J,WACzCnC,KAAK8C,UAAY0G,EAAc0C,SAASpJ,UACxC9C,KAAKoO,aAAe5E,EAAc0C,SAASkC,aAC3CpO,KAAKkO,aAAe1E,EAAc0C,SAASgC,aAC3ClO,KAAKE,aAAesJ,EAAc0C,SAAShM,aAC3CF,KAAKG,mBAAqBqJ,EAAc0C,SAAS/L,mBAE7Cb,eACAU,KAAKqE,UAAY/E,aAAa2I,eAGlCjI,KAAKqpB,UAAW,CACpB,CAEAloB,QAA+BqI,GACtBxJ,KAAKqpB,UACJ7f,EAAc0C,oBAAoBxM,SACxC8J,EAAc0C,SAAS7J,SAAWrC,KAAKqC,SACvCmH,EAAc0C,SAAS9J,SAAWpC,KAAKoC,SACvCoH,EAAc0C,SAASjM,SAAWD,KAAKC,SACvCuJ,EAAc0C,SAAS/J,WAAanC,KAAKmC,WACzCqH,EAAc0C,SAASpJ,UAAY9C,KAAK8C,UACxC0G,EAAc0C,SAASkC,aAAepO,KAAKoO,aAC3C5E,EAAc0C,SAASgC,aAAelO,KAAKkO,aAC3C1E,EAAc0C,SAAShM,aAAeF,KAAKE,aAC3CsJ,EAAc0C,SAAS/L,mBAAqBH,KAAKG,mBAC7Cb,cACAA,aAAawI,YAAY9H,KAAKqE,WAElCrE,KAAKqpB,UAAW,EACpB,E,sHCKJ,MAAMC,aAAeC,SAASZ,QAAQjkB,GAC3BA,EAAE8kB,YAAY1nB,SAAS,wBAG5B2nB,WACDH,aAAa/iB,OAAS,GAAK+iB,aAAa,GAAGrZ,KAE1CjK,WACDsjB,aAAa/iB,OAAS,GAAK+iB,aAAa,GAAGtjB,WAG1CzE,GAAS,CACXC,cAA8B,CAAC,GAyCnC,IAAKkoB,cAtCLnoB,GAAGC,cAAcmoB,UAAY,SAAUC,GASnC,OARgBtG,KAAKuG,MAAMD,GAAK,CAAChB,EAAGC,KAChC,IACI,OAAOtnB,GAAGC,cAAcmoB,UAAUd,E,CACpC,MAAOtT,GACL,OAAOsT,C,IAKnB,EAKAtnB,GAAGC,cAAcwgB,aAAe,YAAa9S,GACzC,MAAM0Z,EAAIrS,OAAOuT,KAAK5a,GACtB,IAAI6a,EAAW,GAEf,KAAOnB,EAAEriB,OAAS,GAId,GAHAwjB,EAAW7a,EAAKvL,SAAiBilB,EAAEM,QAG/BljB,WAAW+jB,GAAW,OAAO/jB,WAAW+jB,GAGhD,MAAO,EACX,EAEAxoB,GAAGC,cAAc8J,IAAM,CACnB0e,QAAS,GACTjb,MAAO,GACPkb,OAAQ,GACRC,QAAS,GACTC,QAAS,GACTC,SAAU,IAGd,SAAKV,GACD,mDACA,+CACA,2CACA,8BACA,iCACH,CAND,CAAKA,gBAAAA,cAAa,KAQlBnoB,GAAGC,cAAcC,OAAS,CACtB8e,iBAAkBmJ,cAAcW,oBAChCC,gBAAiBZ,cAAca,kBAC/BC,eAAgBd,cAAce,iBAC9BC,UAAWhB,cAAcgB,UACzBC,YAAajB,cAAciB,YAC3BC,sBAAsB,EACtBxoB,SAAU2B,OACNxC,GAAGC,cAAcwgB,aAAa,YAAa,UAAY,IAE3D3d,UAAWN,OACPxC,GAAGC,cAAcwgB,aAAa,aAAc,iBACxC,GAER/T,YAAalK,OACTxC,GAAGC,cAAcwgB,aAAa,gBAAiB,aAAe,IAElEzT,YAAaxK,OACTxC,GAAGC,cAAcwgB,aAAa,gBAAiB,aAAe,IAElEne,WAAYE,OACRxC,GAAGC,cAAcwgB,aAAa,eAAgB,aAElDpe,eAAgBG,OACZxC,GAAGC,cAAcwgB,aAAa,iBAAkB,UAAY,GAEhEtf,eAAgB4P,OACZ/Q,GAAGC,cAAcwgB,aACb,iBACA,gBACC,WAETrf,eAAgB2P,OACZ/Q,GAAGC,cAAcwgB,aACb,iBACA,gBACC,WAETpf,eAAgB0P,OACZ/Q,GAAGC,cAAcwgB,aAAa,iBAAkB,eAC5C,WAERsE,YAAaviB,OACTxC,GAAGC,cAAcwgB,aAAa,gBAAiB,aAAe,GAElE6B,YAAa9f,OACTxC,GAAGC,cAAcwgB,aAAa,gBAAiB,aAAe,GAElE6I,qBAAsB9mB,OAClBxC,GAAGC,cAAcwgB,aACb,4BACA,iBACC,IAETnF,oBACItb,GAAGC,cAAcwgB,aACb,uBACA,cACC,OACTle,OAAQC,OACJxC,GAAGC,cAAcwgB,aAAa,cAAe,cAAgB,GAEjEhe,OAAQD,OACJxC,GAAGC,cAAcwgB,aAAa,cAAe,cAAgB,GAEjE/d,SAAUC,QAIA,SAHN3C,GAAGC,cAAcwgB,aACb,qBACA,kBACY,GAEpB8I,MAAiC,EAA1BpB,cAAcgB,UAAgBhB,cAAciB,YACnDI,OAAQrB,cAAcgB,UAAYhB,cAAciB,YAAc,EAC9D3W,QAASjQ,OAAOxC,GAAGC,cAAcwgB,aAAa,WAAY,SAC1DrB,YAAa5c,OACTxC,GAAGC,cAAcwgB,aAAa,eAAgB,eAElDpB,mBAAoB7c,OAChBxC,GAAGC,cAAcwgB,aAAa,sBAAuB,SAEzD7d,eAAgBJ,OACZxC,GAAGC,cAAcwgB,aAAa,kBAAmB,WAErDnB,gBAAiB9c,OACbxC,GAAGC,cAAcwgB,aAAa,mBAAoB,YAEtD7T,oBAAqBpK,OACjBxC,GAAGC,cAAcwgB,aAAa,wBAAyB,WAE3D3T,oBACI9M,GAAGC,cAAcwgB,aAAa,wBAAyB,WACvD,QACJtU,MAAO,CACHC,QAAS,iBAEbqd,iCAAiC,EACjCtpB,WAAY,GACZ6Z,aAAc,IAAI0P,OAAO,GAAI,GAC7BxoB,sBAAsB,EACtByoB,WAAYhnB,QAIF,SAHN3C,GAAGC,cAAcwgB,aACb,oBACA,oBAGRmJ,eAAgB7Y,OACZ/Q,GAAGC,cAAcwgB,aACb,mBACA,eACC,YAEToJ,cAAe9Y,OACX/Q,GAAGC,cAAcwgB,aACb,kBACA,iBACC,8BAET1e,WACI/B,GAAGC,cAAcwgB,aACb,qBACA,aACC,SACTte,wBACInC,GAAGC,cAAcwgB,aAAa,kBAAmB,aACjD,SACJ/c,kBAAmBqN,OACf/Q,GAAGC,cAAcwgB,aAAa,eAAgB,YAC1C,WAERqJ,qBAAsBrlB,WAAW,4BAA8B,QAC/DslB,aAAc/pB,GAAGC,cAAcmoB,UAC3BpoB,GAAGC,cAAcwgB,aAAa,aAAc,WAEhD5d,gBAAiBF,QAIP,SAHN3C,GAAGC,cAAcwgB,aACb,oBACA,kBAGRuJ,cAAejZ,OACX/Q,GAAGC,cAAcwgB,aAAa,aAAc,YACxC,eAERwJ,eAAgBjqB,GAAGC,cAAcmoB,UAC7BpoB,GAAGC,cAAcwgB,aACb,iCACA,kBACC,4BAETyJ,eAAgBlqB,GAAGC,cAAcmoB,UAC7BpoB,GAAGC,cAAcwgB,aACb,oBACA,eACC,mEAETH,kBAAmBle,SACfpC,GAAGC,cAAcwgB,aACb,sBACA,kBAGR0J,kBAAmB/nB,SACfpC,GAAGC,cAAcwgB,aACb,eACA,yBACC,GAETzU,SACIhM,GAAGC,cAAcwgB,aAAa,QAAS,kBAAoB,KAC/D2J,mBAAoBrI,KAAKuG,MAAM7jB,WAAW,uBAAyB,MACnE+R,oBAAqB7T,QAA6C,SAArC8B,WAAW,uBACxCnE,cAAemE,WAAW,kBAC1BoT,YAAazV,SAASqC,WAAW,iBAAmB,IACpDkS,cAAevU,SAASqC,WAAW,mBAAqB,GACxD4lB,MACW3R,MAAM4R,UAAY5R,MAAM6R,cAAc,SAIrD,MACI,MAAMC,EAAiCxqB,GAAGC,cAAcmoB,UACpD3jB,WAAuB,YAEtBzE,GAAGC,cAAcC,OAAOiM,OAG7Bqe,EAAYC,SAASvW,SAAS/Q,IAC1B,MAAMS,EAAuC,CAAC,EAC9CA,EAAOT,EAAEunB,cAAgBvnB,EAAEwnB,SAC3B3V,OAAOC,OAAOjV,GAAGC,cAAcC,OAAOiM,MAAavI,EAAO,GAEjE,EAZD,GAkBA,IAAIgnB,2BAA6BljB,UAAUtJ,UAAUC,WACrDqJ,UAAUtJ,UAAUC,WAAa,WAC7BusB,2BAA2BpsB,KAAKC,MAChCuB,GAAGC,cAAcC,OAAOyd,YACpBkN,KAAKpmB,WAAW,kBAAoB+D,SAASoZ,QACrD,EAMA5hB,GAAGC,cAAc8J,IAAI+gB,iBACjB,0CACJ9qB,GAAGC,cAAc8J,IAAIghB,kBACjB,0CACJ/qB,GAAGC,cAAc8J,IAAIihB,kBAAoB,oCACzChrB,GAAGC,cAAc8J,IAAIkhB,mBACjB,qGACJjrB,GAAGC,cAAc8J,IAAIC,kBACjB,uCAEJhK,GAAGC,cAAc8K,UAAY,WACzB,MAAMmgB,EAAUlrB,GAAGC,cAAcwgB,aAAa,YAAa,UACrDnN,EAAOyO,KAAKuG,MAAM4C,GAClBC,EAAoB,CAAC,EAO3B,OALAA,EAAQzC,OAAS,MAACphB,GAAW8jB,OAAOrJ,KAAKuG,MAAMhV,EAAKoV,SACpDyC,EAAQxC,QAAU,MAACrhB,GAAW8jB,OAAOrJ,KAAKuG,MAAMhV,EAAKqV,UACrDwC,EAAQvC,QAAU,MAACthB,GAAW8jB,OAAOrJ,KAAKuG,MAAMhV,EAAKsV,UACrDuC,EAAQtC,SAAW,MAACvhB,GAAW8jB,OAAOrJ,KAAKuG,MAAMhV,EAAKuV,WAE/CsC,CACV,CAX4B,GAa7BnrB,GAAGC,cAAc8K,UAAUG,KAAO,GAElClL,GAAGC,cAAc8K,UAAUC,KAAO,CAC9BI,MAAO,EACP8F,WAAY,EACZG,cAAe,EACfI,cAAe,EACfF,OAAQ,EACRI,KAAM,EACNI,OAAQ,EACRoJ,KAAM,EACNhJ,SAAU,EACVlE,aAAc,GACdF,OAAQ,GACRL,IAAK,GACLrC,KAAM,GACNE,SAAU,GACVE,SAAU,GACV4C,KAAM,GACNoN,QAAS,GACTjM,MAAO,GACPrB,IAAK,GACLgD,UAAW,GACXoB,IAAK,GACLG,gBAAiB,GACjBE,QAAS,GACTE,aAAc,GACdE,aAAc,GACdrE,KAAM,GACNE,OAAQ,GACRE,MAAO,GACPP,QAAS,GACTS,MAAO,GACPE,MAAO,GACPE,MAAO,GACP6D,KAAM,GACN4I,gBAAiB,GACjBC,aAAc,GACdsP,YAAa,GACbC,YAAa,GACbC,YAAa,GACbC,kBAAmB,GACnBC,kBAAmB,GACnBC,WAAY,GACZ7Z,WAAY,GACZC,SAAU,GACVG,aAAc,GACdC,WAAY,GACZ3C,WAAY,GACZE,aAAc,GACdC,YAAa,GACbqL,cAAe,GACfC,YAAa,GACbC,gBAAiB,GACjBC,cAAe,GACftL,YAAa,GACbyC,qBAAsB,GACtB2J,eAAgB,IAOpBhc,GAAGC,cAAc0rB,YAAc,SAAUC,GACrC,MAAM5f,EAAWhM,GAAGC,cAAcC,OAAO8L,SAEzC,OAAIA,EAAS6f,MAAM,MACR7rB,GAAGC,cAAc8K,UAAkB,OAAE6gB,GAE5C5f,EAAS6f,MAAM,MACR7rB,GAAGC,cAAc8K,UAAmB,QAAE6gB,GAE7C5f,EAAS6f,MAAM,MACR7rB,GAAGC,cAAc8K,UAAmB,QAAE6gB,GAE7C5f,EAAS6f,MAAM,MACR7rB,GAAGC,cAAc8K,UAAoB,SAAE6gB,GAE3C5rB,GAAGC,cAAc8K,UAAmB,QAAE6gB,EACjD,EAQA5rB,GAAGC,cAAc6B,iBAAmB,SAAUH,EAAiBC,GAC3D,IAAI0R,EAAyB,CACzBwY,KAAM,GACNjqB,KAAM,CAAC,GAEX,IAEI,IAAIkqB,EAAOjoB,SAASmc,MAAMte,GAASoqB,OAMnC,GAHInqB,EAAQ,IAAGA,EAAQ,GAGnBD,GAAW,EAAG,CACd,IAAIqqB,EAAc1P,UAAU2P,sBAC5B,GAAID,IACAD,EAAOC,EAAYD,MAEdA,GACD,OAAOzY,C,CAKnB,IAAIO,EAAQkY,EAAKnqB,GAGjB,KAAOiS,GAAS,CAAC,IAAK,KAAKtT,SAASsT,EAAMtQ,OACtC+P,EAAKwY,MAAQjY,EAAMpP,WAAW,GAAK,OAEnCoP,EAAQkY,IADRnqB,GAIJ,GAAIiS,GAAwB,MAAfA,EAAMtQ,KAAc,CAM7B,IALA+P,EAAKwY,MAAQjY,EAAMpP,WAAW,GAAK,OAGnCoP,EAAQkY,IADRnqB,GAGsB,MAAfiS,EAAMtQ,MACT+P,EAAKwY,MAAQjY,EAAMpP,WAAW,GAAK,OAEnCoP,EAAQkY,IADRnqB,GAIe,MAAfiS,EAAMtQ,OACN+P,EAAKwY,MAAQjY,EAAMpP,WAAW,GAAK,O,CAK3C,MAAMynB,EAAK,0BAEX,IADA5Y,EAAKzR,KAAO,CAAC,IACJ,CACL,MAAMgqB,EAAQK,EAAGjiB,KAAKqJ,EAAKwY,MAC3B,IAAID,EAOA,MANiB,MAAbA,EAAM,GACNvY,EAAKzR,KAAKgqB,EAAM,GAAG7pB,QAAU6pB,EAAM,GAEnCvY,EAAKzR,KAAKgqB,EAAM,GAAG7pB,SAAU,C,EAM3C,MAAOgS,GAEL,MAAO,CACH8X,KAAM,GACNjqB,KAAM,CAAC,E,CAGf,OAAOyR,EAAKzR,IAChB,EAIkB,CAAC,SAAU,UAAW,UAAW,YACvCqS,SAAQ,SAAUF,EAAG7Q,EAAGgR,GAC5B,IAAIrJ,EAAU9K,GAAGC,cAAc8K,UAAUiJ,GACzClJ,EAAUA,EAAQiJ,KAAI,CAACC,EAAQ7Q,EAAWgR,KACtC,QAAU7M,IAAN0M,EAAJ,CACA,IAAIV,EAAO,GAEX,IAAK,IAAI+U,KAAOrU,EAERV,EAAK9P,KAAK6kB,GAOlB,OADM/U,EAAK6Y,KAAK,GAXW,CAYjB,IAEdnsB,GAAGC,cAAc8J,IAAIiK,GAAG,QAAK1M,EAC7BtH,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAC7B,UAAgBjV,EAAQ,iBACxB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAC7B,IAAOjV,EAAQ,iBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAC7B,IAAOjV,EAAQ,gBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAC7B,IAAOjV,EAAQ,iBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAC7B,IAAOjV,EAAQ,iBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAAO,IAAOjV,EAAQ,KAAM,MAC7D9K,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAAO,IAAOjV,EAAQ,KAAM,MAC7D9K,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAC7B,IAAOjV,EAAQ,gBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,GAAK,IAAI+L,OAC7B,IAAOjV,EAAQ,eACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,UAAgBjV,EAAQ,mBACxB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,UAAgBjV,EAAQ,mBACxB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,UAAgBjV,EAAQ,mBACxB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,UAAgBjV,EAAQ,mBACxB,KAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,UAAgBjV,EAAQ,OACxB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,UAAgBjV,EAAQ,OACxB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,UAAgBjV,EAAQ,OACxB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,iBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,kBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,kBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,kBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,iBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,iBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,kBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,KAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,KAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,KAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,KAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,KAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,KAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,KAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,gBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,OAAUjV,EAAQ,mBAClB,MAGJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAE/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAE/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,OAAOjV,EAAQ,QAAS,MACjE9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,OAAOjV,EAAQ,QAAS,MACjE9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,OAAOjV,EAAQ,QAAS,MAEjE9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,QAAQjV,EAAQ,SAChB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,SAAUjV,EAAQ,SAClB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,QAAQjV,EAAQ,SAChB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,SAAUjV,EAAQ,SAClB,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAAO,IAAOjV,EAAQ,MAAO,MAC/D9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,gBACf,MAEJ9K,GAAGC,cAAc8J,IAAIiK,GAAG,IAAM,IAAI+L,OAC9B,IAAOjV,EAAQ,kBACf,KAER,IAGJ9K,GAAGC,cAAc+I,WAAa,WAC1B,IAAI0W,EAAO1f,GAAGC,cAAcC,OAAO8L,SAC/BiI,GAAM,EACNyL,EAAKmM,MAAM,QACX7rB,GAAGC,cAAc8J,IAAIyD,MAAQxN,GAAGC,cAAc8J,IAAI2e,OAClD1oB,GAAGC,cAAc8J,IAAIC,kBACjBhK,GAAGC,cAAc8J,IAAI+gB,iBACzB9qB,GAAGC,cAAc8K,UAAUG,KAAOlL,GAAGC,cAAc8K,UAAU2d,OAC7DzU,GAAM,GAENyL,EAAKmM,MAAM,QACX7rB,GAAGC,cAAc8J,IAAIyD,MAAQxN,GAAGC,cAAc8J,IAAI4e,QAClD3oB,GAAGC,cAAc8J,IAAIC,kBACjBhK,GAAGC,cAAc8J,IAAIghB,kBACzB/qB,GAAGC,cAAc8K,UAAUG,KAAOlL,GAAGC,cAAc8K,UAAU4d,QAC7D1U,GAAM,GAENyL,EAAKmM,MAAM,QACX7rB,GAAGC,cAAc8J,IAAIyD,MAAQxN,GAAGC,cAAc8J,IAAI6e,QAClD5oB,GAAGC,cAAc8J,IAAIC,kBACjBhK,GAAGC,cAAc8J,IAAIihB,kBACzBhrB,GAAGC,cAAc8K,UAAUG,KAAOlL,GAAGC,cAAc8K,UAAU6d,QAC7D3U,GAAM,GAENyL,EAAKmM,MAAM,QACX7rB,GAAGC,cAAc8J,IAAIyD,MAAQxN,GAAGC,cAAc8J,IAAI8e,SAClD7oB,GAAGC,cAAc8J,IAAIC,kBACjBhK,GAAGC,cAAc8J,IAAIkhB,mBACzBjrB,GAAGC,cAAc8K,UAAUG,KAAOlL,GAAGC,cAAc8K,UAAU8d,SAC7D5U,GAAM,IAEE,IAARA,IACAjU,GAAGC,cAAc8J,IAAIyD,MAAQxN,GAAGC,cAAc8J,IAAI6e,QAClD5oB,GAAGC,cAAc8J,IAAIC,kBACjBhK,GAAGC,cAAc8J,IAAIihB,kBACzBhrB,GAAGC,cAAc8K,UAAUG,KAAOlL,GAAGC,cAAc8K,UAAU6d,QAErE,EAca,QAAAve,MAAgB,CAAC,EAE9B,QAAAA,MAAA,SAAiB,SAAUrD,GAKvB,MADa,QAHD,IAAJA,KACCA,GAAK,EAAK,OACVA,GAAK,GAAM,QAGxB,EAEA,QAAAqD,MAAA,UAAkB,QAAAA,MAAM+hB,SAAS,UAEjC,QAAA/hB,MAAA,aAAqB,WACjB,OAAO,QAAAA,MAAMyB,SACjB,EAEA,QAAAzB,MAAA,mBAA2B,SAAUge,GAGjC,IAAIgE,EAAarsB,GAAGC,cAAcC,OAAO6pB,aACrC9V,EAAMoU,EAEV,MAAwB,iBAAXgE,EAAI,GAAyBpY,EACrCoY,EAAI,GAAGtJ,eAAe,eAE3BsJ,EAAInY,SAAQ,CAACF,EAAQ7Q,EAAW2G,KAC5B,GAAIkK,EAAE,gBAAkBqU,EAAK,CACzB,IAAIiE,EAAIlqB,SAAS4R,EAAO,MAAM,EAC1BuY,EAAInqB,SAAS4R,EAAS,QAAM,EAC5BwY,EAAIpqB,SAAS4R,EAAQ,OAAM,EAC3BG,EAAIsY,WAAWzY,EAAS,QAAM,EAElCC,EAAM,QAAQqY,KAAKC,KAAKC,KAAKrY,I,KAI9BF,GAb0CA,CAcrD,EAEA,MAAMyY,cAAwC,CAC1C,GAAI,oBACJ,IAAK,oBACLC,OAAQ,oBACR,IAAK,gBACL,GAAI,gBACJC,QAAS,gBACT,IAAK,kBACL,GAAI,kBACJC,OAAQ,kBACR,KAAM,mBACNC,SAAU,mBACV,IAAK,oBACL,GAAI,oBACJC,UAAW,oBACX,GAAI,sBACJC,OAAQ,sBACR,GAAI,kBACJC,QAAS,kBACT,KAAM,kBACN,GAAI,kBACJC,OAAQ,kBACR,KAAM,sBACNC,SAAU,sBACV,GAAI,kBACJ,GAAI,kBACJC,SAAU,kBACV,IAAK,kBACL,IAAK,kBACLC,OAAQ,kBACR,IAAK,oBACL,IAAK,oBACLC,QAAS,oBACT,IAAK,qBACL,GAAI,qBACJ,IAAK,qBACLC,SAAU,qBACV,IAAK,oBACL,GAAI,oBACJC,SAAU,oBACV,IAAK,kBACL,GAAI,kBACJC,MAAO,kBACP,GAAI,sBACJ,EAAG,sBACHC,SAAU,sBACV,IAAK,oBACLC,OAAQ,oBACR,GAAI,sBACJ,EAAG,sBACHC,QAAS,sBACT,IAAK,oBACL,GAAI,oBACJC,SAAU,qBAGRC,cAAwC,CAC1C,GAAI,oBACJnB,OAAQ,oBACR,GAAI,gBACJC,QAAS,gBACT,GAAI,kBACJC,OAAQ,kBACR,IAAK,mBACLC,SAAU,mBACV,IAAK,oBACLC,UAAW,oBACX,GAAI,sBACJC,OAAQ,sBACR,GAAI,kBACJC,QAAS,kBACT,IAAK,kBACLC,OAAQ,kBACR,IAAK,sBACLC,SAAU,sBACV,GAAI,kBACJC,SAAU,kBACV,IAAK,kBACLC,OAAQ,kBACR,IAAK,oBACLC,QAAS,oBACT,IAAK,qBACLC,SAAU,qBACV,GAAI,oBACJC,SAAU,oBACV,GAAI,kBACJC,MAAO,kBACP,IAAK,sBACLC,SAAU,sBACV,IAAK,oBACLC,OAAQ,oBACR,GAAI,sBACJC,QAAS,sBACT,GAAI,oBACJC,SAAU,qBAGRE,cAAwC,CAC1CC,KAAM,oBACNrB,OAAQ,oBACRsB,MAAO,gBACPrB,QAAS,gBACTsB,KAAM,kBACNrB,OAAQ,kBACRsB,OAAQ,mBACRrB,SAAU,mBACVsB,QAAS,oBACTrB,UAAW,oBACXsB,KAAM,sBACNrB,OAAQ,sBACRsB,MAAO,kBACPrB,QAAS,kBACTsB,KAAM,kBACNrB,OAAQ,kBACRsB,OAAQ,sBACRrB,SAAU,sBACVsB,OAAQ,kBACRrB,SAAU,kBACVsB,KAAM,kBACNrB,OAAQ,kBACRsB,MAAO,oBACPrB,QAAS,oBACTsB,OAAQ,qBACRrB,SAAU,qBACVsB,OAAQ,oBACRrB,SAAU,oBACVsB,IAAK,kBACLrB,MAAO,kBACPsB,OAAQ,sBACRrB,SAAU,sBACVsB,KAAM,oBACNrB,OAAQ,oBACRsB,MAAO,sBACPrB,QAAS,sBACTsB,OAAQ,oBACRrB,SAAU,qBAGRsB,eAAyC,CAC3C,GAAI,oBACJ,KAAM,oBACNxC,OAAQ,oBACR,GAAI,gBACJC,QAAS,gBACT,GAAI,kBACJC,OAAQ,kBACR,KAAM,mBACNC,SAAU,mBACV,IAAK,oBACLC,UAAW,oBACX,GAAI,sBACJC,OAAQ,sBACR,GAAI,kBACJC,QAAS,kBACT,GAAI,kBACJC,OAAQ,kBACR,GAAI,sBACJC,SAAU,sBACV,KAAM,kBACNC,SAAU,kBACV,IAAK,kBACL,KAAM,kBACNC,OAAQ,kBACR,IAAK,oBACL,MAAO,oBACPC,QAAS,oBACT,GAAI,qBACJ,MAAO,qBACPC,SAAU,qBACV,GAAI,oBACJC,SAAU,oBACV,GAAI,kBACJ,IAAK,kBACLC,MAAO,kBACP,GAAI,sBACJC,SAAU,sBACV,KAAM,oBACN,IAAK,oBACLC,OAAQ,oBACR,GAAI,sBACJC,QAAS,sBACT,GAAI,oBACJC,SAAU,qBAGd7tB,GAAGC,cAAcmvB,eAAiB,SAAU/G,GAGxC,OAFYqE,cAAcrE,KAMtB,CAAC,KAAM,MAAO,YAAY9nB,SAAS8nB,GAC5B,QAAAhe,MAAMglB,eAGV,QAAAhlB,MAAMilB,mBAAmBjH,GACpC,EAEAroB,GAAGC,cAAcsvB,gBAAkB,SAAUlH,GAGzC,OAFYyF,cAAczF,KAMtB,CAAC,KAAM,YAAY9nB,SAAS8nB,GACrB,QAAAhe,MAAMglB,eAGV,QAAAhlB,MAAMilB,mBAAmBjH,GACpC,EAEAroB,GAAGC,cAAcuvB,gBAAkB,SAAUnH,GAGzC,OAFY0F,cAAc1F,KAMtB,aAAeA,EACR,QAAAhe,MAAMglB,eAGV,QAAAhlB,MAAMilB,mBAAmBjH,GACpC,EAEAroB,GAAGC,cAAcwvB,iBAAmB,SAAUpH,GAG1C,OAFY8G,eAAe9G,KAMvB,CAAC,MAAO,YAAY9nB,SAAS8nB,GACtB,QAAAhe,MAAMglB,eAGV,QAAAhlB,MAAMilB,mBAAmBjH,GACpC,EAEAroB,GAAGC,cAAcyvB,WAAa,WAE1B,IACIC,EADAC,EAAK3jB,UAAU4jB,UAEfC,EACIF,EAAG/D,MACC,sEACC,GAEb,GAAI,WAAW/L,KAAKgQ,EAAE,IAGlB,MAAO,CACHphB,KAAM,KACNqhB,SAJJJ,EAAM,kBAAkB1lB,KAAK2lB,IAAO,IAInB,IAAM,IAI3B,GAAa,WAATE,EAAE,GAAiB,CAEnB,GAAW,OADXH,EAAMC,EAAG/D,MAAM,iBAEX,MAAO,CACHnd,KAAM,QACNqhB,QAASJ,EAAI,IAKrB,GAAW,OADXA,EAAMC,EAAG/D,MAAM,kBAEX,MAAO,CACHnd,KAAM,OACNqhB,QAASJ,EAAI,G,CAWzB,OANAG,EAAIA,EAAE,GAAK,CAACA,EAAE,GAAIA,EAAE,IAAM,CAAC7jB,UAAU+jB,QAAS/jB,UAAUgkB,WAAY,MAEzB,OAAtCN,EAAMC,EAAG/D,MAAM,qBAChBiE,EAAEI,OAAO,EAAG,EAAGP,EAAI,IAGhB,CACHjhB,KAAMohB,EAAE,GACRC,QAASD,EAAE,GAEnB,EAEA,QAAAzlB,MAAA,QAAgB,SAAUge,GACtB,MAAM3I,EAAe1f,GAAGC,cAAcC,OAAO8L,SAC7C,OAAI0T,EAAKmM,MAAM,MACJ7rB,GAAGC,cAAcmvB,eAAe/G,GAEvC3I,EAAKmM,MAAM,MACJ7rB,GAAGC,cAAcsvB,gBAAgBlH,GAExC3I,EAAKmM,MAAM,MACJ7rB,GAAGC,cAAcuvB,gBAAgBnH,GAExC3I,EAAKmM,MAAM,MACJ7rB,GAAGC,cAAcwvB,iBAAiBpH,GAEtCroB,GAAGC,cAAcuvB,gBAAgBnH,EAC5C,EAEAzP,OAAO5Y,GAAKA,E,2JCvlCZ,kBACA,OACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEiB,UAAkBoJ,cAI9Bqd,WAAW,UAAU,IAAA0J,qBACrB1J,WAAW,gBAAgB,IAAA2J,0BAC3B3J,WAAW,kBAAkB,IAAA4J,4BAC7B5J,WAAW,eAAe,IAAA6J,yBAC1B7J,WAAW,kBAAkB,IAAA8J,4BAC7B9J,WAAW,oBAAoB,IAAA+J,8BAC/B/J,WAAW,kBAAkB,IAAAgK,4BAC7BhK,WAAW,aAAa,IAAAiK,uBACxBjK,WAAW,YAAY,IAAAkK,sBACvBlK,WAAW,QAAQ,IAAAmK,mBACnBlK,KAAK,QAAQ,IAAAmK,0BAEbhK,Y,GC9BDiK,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqB1pB,IAAjB2pB,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,yBAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,oBAAoBJ,GAAUxyB,KAAK2yB,EAAOD,QAASC,EAAQA,EAAOD,QAASH,qBAGpEI,EAAOD,OACf,CCnBA,IAAIG,oBAAsBN,oBAAoB,I","sources":["webpack://message-system-mz/./src/__test__/DefaultCommand.test.ts","webpack://message-system-mz/./src/commands/Bitmap.command.ts","webpack://message-system-mz/./src/commands/GameInterpreter.command.ts","webpack://message-system-mz/./src/commands/GameMap.command.ts","webpack://message-system-mz/./src/commands/GameMessage.command.ts","webpack://message-system-mz/./src/commands/GameTemp.command.ts","webpack://message-system-mz/./src/commands/Main.command.ts","webpack://message-system-mz/./src/commands/SpriteBattler.command.ts","webpack://message-system-mz/./src/commands/WindowBase.command.ts","webpack://message-system-mz/./src/commands/WindowMessage.command.ts","webpack://message-system-mz/./src/commands/WindowNameBox.command.ts","webpack://message-system-mz/./src/components/BalloonWindowTransformComponent.ts","webpack://message-system-mz/./src/components/BaseComponent.ts","webpack://message-system-mz/./src/components/NameWindowPositionComponent.ts","webpack://message-system-mz/./src/core/Component.ts","webpack://message-system-mz/./src/core/ComponentExecutor.ts","webpack://message-system-mz/./src/core/DependencyInjector.ts","webpack://message-system-mz/./src/core/EventEmitter.ts","webpack://message-system-mz/./src/core/MessageDesc.ts","webpack://message-system-mz/./src/core/RS.ts","webpack://message-system-mz/./src/index.ts","webpack://message-system-mz/webpack/bootstrap","webpack://message-system-mz/webpack/startup"],"sourcesContent":["import { Executuor } from \"../core/ComponentExecutor\";\n\nexport function getDefaultCommandTest(): Executuor {\n    return () => {\n        $gameMessage.clear();\n        $gameMessage.add(\"Hello, World!\");\n    };\n}\n","import { Executuor } from \"../core/ComponentExecutor\";\n\n/**\n * ? Bitmap\n * @description 텍스트에 그라데이션을 채우는 기능을 추가합니다.\n */\nexport function getBitmapCommand(): Executuor {\n    return () => {\n        const alias_Bitmap_initialize = Bitmap.prototype.initialize;\n        Bitmap.prototype.initialize = function (width: number, height: number) {\n            alias_Bitmap_initialize.call(this, width, height);\n            this.fontBold = false;\n            this.fontGradient = false;\n            this.highlightTextColor = null;\n        };\n\n        Bitmap.prototype.setGradient = function (\n            text,\n            color1,\n            color2,\n            color3,\n            tx,\n            ty\n        ) {\n            const context = this._context;\n            const tWidth = this.measureTextWidth(text);\n            context.save();\n            const gradient = context.createLinearGradient(\n                tx,\n                0,\n                tx + tWidth,\n                0\n            );\n            gradient.addColorStop(0, color1);\n            gradient.addColorStop(0.6, color2);\n            gradient.addColorStop(1, color3);\n            context.restore();\n\n            this._baseTexture.update();\n\n            return gradient;\n        };\n\n        Bitmap.prototype.setGradientStyle = function (\n            text,\n            color1,\n            color2,\n            color3,\n            tx,\n            ty\n        ) {\n            const context = this._context;\n            const width = this.measureTextWidth(text);\n            const height = RS.MessageSystem.Params.lineHeight;\n            let grd;\n\n            context.save();\n\n            const style = RS.MessageSystem.Params.gradientStyle;\n\n            if (style !== \"radial\") {\n                if (style.contains(\"horizontal\")) {\n                    grd = context.createLinearGradient(tx, 0, tx + width, 0);\n                } else {\n                    grd = context.createLinearGradient(tx, 0, 0, ty + height);\n                }\n            } else {\n                const ws = width * 0.5;\n                const hs = height * 0.5;\n                grd = context.createRadialGradient(ws, hs, 0.0, ws, hs, ws);\n            }\n\n            if (style === \"radial\") {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(1.0, color2);\n            } else if (style.contains(\"axial\")) {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(0.5, color2);\n                grd.addColorStop(1.0, color3);\n            } else {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(1.0, color2);\n            }\n\n            context.restore();\n\n            this._baseTexture.update();\n\n            return grd;\n        };\n\n        Bitmap.prototype._makeFontNameText = function () {\n            return (\n                (this.fontItalic ? \"Italic \" : \"\") +\n                (this.fontBold ? \"bold \" : \"\") +\n                this.fontSize +\n                \"px \" +\n                this.fontFace\n            );\n        };\n\n        Bitmap.prototype._drawTextBody = function (text, tx, ty, maxWidth) {\n            const context = this._context;\n            context.save(); // 드로잉 상태 저장\n            context.imageSmoothingEnabled =\n                RS.MessageSystem.Params.fontSmoothingEnabled;\n\n            if (this.fontGradient) {\n                const gradient = this.setGradientStyle(\n                    text,\n                    RS.MessageSystem.Params.gradientColor1,\n                    RS.MessageSystem.Params.gradientColor2,\n                    RS.MessageSystem.Params.gradientColor3,\n                    tx,\n                    ty\n                );\n                context.fillStyle = gradient;\n            } else {\n                context.fillStyle = this.textColor;\n            }\n            context.fillText(text, tx, ty, maxWidth);\n            context.fillStyle = this.textColor;\n            context.restore();\n        };\n    };\n}\n","import { Executuor } from \"../core/ComponentExecutor\";\n\nexport function getGameInterpreterCommand(): Executuor {\n    return () => {\n        //============================================================================\n        // Game_Interpreter\n        //============================================================================\n        Game_Interpreter.prototype.processMessageParams = function (\n            eventId: number,\n            index: number\n        ) {\n            const meta = <EventCommand.CommentMeta>(\n                RS.MessageSystem.getEventComments(eventId, index - 1)\n            );\n            if (meta[\"윈도우 스킨\"]) {\n                RS.MessageSystem.Params.windowskin =\n                    meta[\"윈도우 스킨\"].trim() || \"Window\";\n                ImageManager.loadSystem(RS.MessageSystem.Params.windowskin);\n            }\n            if (meta[\"이름 윈도우 스킨\"]) {\n                RS.MessageSystem.Params.windowskinForNameWindow =\n                    meta[\"이름 윈도우 스킨\"].trim() || \"Window\";\n                ImageManager.loadSystem(\n                    RS.MessageSystem.Params.windowskinForNameWindow\n                );\n            }\n            if (meta[\"라인 높이\"]) {\n                RS.MessageSystem.Params.lineHeight = parseInt(\n                    meta[\"라인 높이\"]\n                );\n            }\n            if (meta[\"폰트 크기\"]) {\n                RS.MessageSystem.Params.fontSize = parseInt(meta[\"폰트 크기\"]);\n            }\n            if (meta[\"라인\"]) {\n                RS.MessageSystem.Params.numVisibleRows = parseInt(meta[\"라인\"]);\n            }\n            if (meta[\"텍스트 시작 X\"]) {\n                RS.MessageSystem.Params.textStartX = parseInt(\n                    meta[\"텍스트 시작 X\"]\n                );\n            }\n            if (meta[\"큰 페이스칩 OX\"]) {\n                RS.MessageSystem.Params.faceOX = Number(meta[\"큰 페이스칩 OX\"]);\n            }\n            if (meta[\"큰 페이스칩 OY\"]) {\n                RS.MessageSystem.Params.faceOY = Number(meta[\"큰 페이스칩 OY\"]);\n            }\n            if (meta[\"대화창 뒤에 얼굴 표시\"]) {\n                RS.MessageSystem.Params.faceSide = Boolean(\n                    meta[\"대화창 뒤에 얼굴 표시\"] === \"true\"\n                );\n            }\n            if (meta[\"대화창 투명도\"]) {\n                RS.MessageSystem.Params.defaultOpacity = parseInt(\n                    meta[\"대화창 투명도\"]\n                );\n            }\n            if (meta[\"텍스트 효과음 재생 여부\"]) {\n                RS.MessageSystem.Params.isPlayTextSound = Boolean(\n                    meta[\"텍스트 효과음 재생 여부\"] === \"true\"\n                );\n            }\n            if (meta[\"기본 텍스트 출력 속도\"]) {\n                RS.MessageSystem.Params.textSpeed = Number(\n                    meta[\"기본 텍스트 출력 속도\"]\n                );\n            }\n        };\n\n        Game_Interpreter.prototype.isValidMultiLine = function () {\n            const codes = [];\n            let prevCode = 401;\n            let lineCount = 0;\n            for (let i = 1; i < 8; i++) {\n                const currentCommand = this._list[this._index + i];\n                if (currentCommand) {\n                    const code = currentCommand.code;\n                    codes.push(code);\n                    prevCode = code;\n                    if ([101, 401].contains(code)) {\n                        lineCount++;\n                    }\n                }\n            }\n            if (codes.contains(102)) {\n                return false;\n            } else if (codes.contains(103)) {\n                return false;\n            } else if ($gameMessage.getMaxLine() <= 4) {\n                return false;\n            } else if (lineCount <= 4) {\n                return false;\n            } else if (RS.MessageSystem.Params.choiceWindowStyle == \"RMXP\") {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        Game_Interpreter.prototype.command101 = function (params) {\n            if ($gameMessage.isBusy()) {\n                return false;\n            }\n\n            $gameMap.setMsgEvent(this.character(this._eventId > 0 ? 0 : -1));\n            $gameMessage.setFaceImage(params[0], params[1]);\n            $gameMessage.setBackground(params[2]);\n            $gameMessage.setPositionType(params[3]);\n            $gameMessage.setSpeakerName(params[4]);\n\n            this.processMessageParams(this._eventId, this._index);\n\n            if (this.isMultiLine()) {\n                this.multiLineAddMessage();\n            } else {\n                while (this.nextEventCode() === 401) {\n                    // Text data\n                    this._index++;\n                    $gameMessage.add(this.currentCommand().parameters[0]);\n                }\n            }\n\n            switch (this.nextEventCode()) {\n                case 102: // Show Choices\n                    this._index++;\n                    this.setupChoices(this.currentCommand().parameters);\n                    break;\n                case 103: // Input Number\n                    this._index++;\n                    this.setupNumInput(this.currentCommand().parameters);\n                    break;\n                case 104: // Select Item\n                    this._index++;\n                    this.setupItemChoice(this.currentCommand().parameters);\n                    break;\n            }\n            this.setWaitMode(\"message\");\n            return true;\n        };\n\n        Game_Interpreter.prototype.multiLineAddMessage = function () {\n            this.initLineHeight();\n\n            while ($gameMessage._texts.length < $gameMessage.getMaxLine()) {\n                while (this.nextEventCode() === 401) {\n                    this._index++;\n                    $gameMessage.add(this.currentCommand().parameters[0]);\n                    this.addLineHeight();\n                    if (this._lineHeight >= $gameMessage.getMaxLine()) {\n                        break;\n                    }\n                }\n                if (this.nextEventCode() !== 101) {\n                    break;\n                }\n            }\n\n            // 커맨드 코드 401번이 아직 남아있는 상황이라면,\n            // 다음 인덱스로 넘겨야 선택지가 제대로 동작한다.\n            while (this.nextEventCode() === 401) {\n                this._index++;\n            }\n        };\n\n        Game_Interpreter.prototype.initLineHeight = function () {\n            this._lineHeight = 0;\n        };\n\n        Game_Interpreter.prototype.isMultiLine = function () {\n            return this.isValidMultiLine();\n        };\n\n        Game_Interpreter.prototype.addLineHeight = function () {\n            this._lineHeight++;\n            if (this.nextEventCode() === 101) {\n                this._index++;\n            }\n        };\n    };\n}\n","import { Executuor } from \"../core/ComponentExecutor\";\n\nexport function getGameMapCommand(): Executuor {\n    return () => {\n        //============================================================================\n        // Game_Map\n        //============================================================================\n        const alias_Game_Map_initialize = Game_Map.prototype.initialize;\n        Game_Map.prototype.initialize = function () {\n            alias_Game_Map_initialize.call(this);\n            this._msgOwner = $gamePlayer;\n            this._msgEvent = 0;\n        };\n\n        Game_Map.prototype.getMsgOwner = function () {\n            return this._msgOwner;\n        };\n\n        /**\n         * @method setMsgOwner\n         * @param o {Game_Event | Game_Player}\n         */\n        Game_Map.prototype.setMsgOwner = function (o) {\n            this._msgOwner = o;\n            $gameMessage.setBalloonPatternHeight(this.tileHeight());\n        };\n\n        Game_Map.prototype.getMsgEvent = function () {\n            return this._msgEvent;\n        };\n\n        Game_Map.prototype.setMsgEvent = function (ev) {\n            this._msgEvent = ev;\n        };\n    };\n}\n","import { Executuor } from \"../core/ComponentExecutor\";\n\nexport function getGameCommandCommand(): Executuor {\n    return () => {\n        //============================================================================\n        // Game_Message\n        //============================================================================\n        const alias_Game_Message_clear = Game_Message.prototype.clear;\n        Game_Message.prototype.clear = function () {\n            alias_Game_Message_clear.call(this);\n            this._waitTime = 0;\n            this._gradientText = \"\";\n            this._balloon = -2;\n            this._align = [];\n            this._balloonPatternHeight = 0;\n            this._lastAlign = -1;\n        };\n\n        Game_Message.prototype.setWaitTime = function (time) {\n            this._waitTime = time;\n        };\n\n        Game_Message.prototype.setGradientText = function (text) {\n            this._gradientText = text;\n        };\n\n        Game_Message.prototype.getWaitTime = function () {\n            return this._waitTime || 0;\n        };\n\n        Game_Message.prototype.getGradientText = function () {\n            return this._gradientText;\n        };\n\n        Game_Message.prototype.getMaxLine = function () {\n            return this._maxLine;\n        };\n\n        Game_Message.prototype.setMaxLine = function (maxLine) {\n            this._maxLine = maxLine;\n            RS.MessageSystem.Params.numVisibleRows = maxLine;\n        };\n\n        Game_Message.prototype.setBalloon = function (n) {\n            this._balloon = n;\n        };\n\n        Game_Message.prototype.getBalloon = function (n) {\n            return this._balloon;\n        };\n\n        Game_Message.prototype.setAlign = function (n) {\n            this._align = this._align || [];\n            this._lastAlign = n; // 마지막 정렬 위치 기억\n            this._align.push(n);\n        };\n\n        Game_Message.prototype.getAlign = function (n) {\n            const last = this._align.shift();\n            if (last === undefined) {\n                return this._lastAlign;\n            }\n            return last;\n        };\n\n        Game_Message.prototype.clearAlignLast = function (n) {\n            this._lastAlign = -1;\n        };\n\n        Game_Message.prototype.setBalloonPatternHeight = function (\n            value: number\n        ) {\n            this._balloonPatternHeight = value;\n        };\n\n        Game_Message.prototype.getBalloonPatternHeight = function () {\n            return this._balloonPatternHeight;\n        };\n    };\n}\n","import { Executuor } from \"../core/ComponentExecutor\";\n\nexport function getGameTempCommand(): Executuor {\n    return () => {\n        //============================================================================\n        // Game_Temp\n        //============================================================================\n        Game_Temp.prototype.setMSHeightFunc = function (func) {\n            this._callMSHeightFunc = func;\n        };\n\n        Game_Temp.prototype.setMaxLine = function (n) {\n            if (this._callMSHeightFunc) this._callMSHeightFunc(n);\n        };\n    };\n}\n","import { Color } from \"../core/RS\";\nimport { DependencyInjector } from \"../core/DependencyInjector\";\nimport { BalloonWindowTransformComponent } from \"../components/BalloonWindowTransformComponent\";\nimport ComponentExecutor, { Executuor } from \"../core/ComponentExecutor\";\n\n/**\n * ? Main\n * @description\n * 메인 엔트리 포인트입니다.\n */\nexport function getMainCommand(): Executuor {\n    return () => {\n        /// ======================================================================\n        /// DI\n        /// ======================================================================\n        const alias_Scene_Message_associateWindows__enrtyPoint =\n            Scene_Message.prototype.associateWindows;\n        Scene_Message.prototype.associateWindows = function () {\n            alias_Scene_Message_associateWindows__enrtyPoint.call(this);\n            const messageWindow = this._messageWindow;\n            DependencyInjector.injectMessageWindow(messageWindow);\n            DependencyInjector.ready();\n        };\n\n        Scene_Message.prototype.messageWindowRect = function () {\n            const ww = Graphics.width;\n            const wh = this.calcWindowHeight(4, false) + 8;\n            const wx = (Graphics.height - ww) / 2;\n            const wy = 0;\n            return new Rectangle(wx, wy, ww, wh);\n        };\n\n        const alias_Scene_Message_terminate = Scene_Message.prototype.terminate;\n        Scene_Message.prototype.terminate = function () {\n            alias_Scene_Message_terminate.call(this);\n            DependencyInjector.ejectMessageWindow();\n        };\n\n        RS.MessageSystem.initSystem();\n\n        const alias_Scene_Map_start = Scene_Map.prototype.start;\n        Scene_Map.prototype.start = function () {\n            alias_Scene_Map_start.call(this);\n            ComponentExecutor.getInstance().executeLazyCommandAll();\n        };\n    };\n}\n","import { Executuor } from \"../core/ComponentExecutor\";\n\nexport function getSpriteBattlerCommand(): Executuor {\n    return () => {\n        //============================================================================\n        // Sprite_Battler\n        //============================================================================\n        Sprite_Battler.prototype.screenX = function () {\n            return this.x || 0;\n        };\n\n        Sprite_Battler.prototype.screenY = function () {\n            return this.y || 0;\n        };\n    };\n}\n","import { Executuor } from \"../core/ComponentExecutor\";\nimport { MessageDesc } from \"../core/MessageDesc\";\nimport { Color } from \"../core/RS\";\n\nexport function getWindowBaseCommand(): Executuor {\n    return () => {\n        //============================================================================\n        // Window_Base\n        //============================================================================\n        Window_Base.prototype.obtainEscapeCode = function (textState) {\n            const regExp = RS.MessageSystem.Reg.defaultEscapeCode;\n            const arr = regExp.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return arr[0].toUpperCase();\n            } else {\n                return \"\";\n            }\n        };\n\n        /**\n         * 확장된 색상 변경 텍스트 코드 처리\n         * \\색[빨강]과 웹색상 처리를 위한 정규 표현식 처리\n         * @param {}} textState\n         */\n        Window_Base.prototype.obtainNameColor = function (textState) {\n            const arr = /\\[(.+?)\\]/gi.exec(\n                textState.text.slice(textState.index)\n            );\n            if (arr) {\n                textState.index += arr[0].length;\n                return Color.gmColor(arr[1]);\n            } else {\n                return ColorManager.textColor(0);\n            }\n        };\n\n        Window_Base.prototype.changeTextColor = function (color) {\n            const c = parseInt(color);\n            // 색상 코드가 숫자인 경우\n            if (c > 0 && c < 32) {\n                color = ColorManager.textColor(color);\n            }\n            // if (!this._isUsedTextWidthEx) {\n            this.contents.textColor = color;\n            // }\n        };\n\n        const alias_Window_Base_processEscapeCharacter =\n            Window_Base.prototype.processEscapeCharacter;\n        Window_Base.prototype.processEscapeCharacter = function (\n            code,\n            textState\n        ) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            switch (code) {\n                case \"C\":\n                    this.changeTextColor(\n                        this.textColor(\n                            <number>this.obtainEscapeParam(textState)\n                        )\n                    );\n                    break;\n                case textCode[tcGroup.COLOR]:\n                    this.changeTextColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case \"I\":\n                case textCode[tcGroup.ICON]:\n                    this.processDrawIcon(\n                        <number>this.obtainEscapeParam(textState),\n                        textState\n                    );\n                    break;\n                case \"{\":\n                case textCode[tcGroup.INCREASE]:\n                    this.makeFontBigger();\n                    break;\n                case \"}\":\n                case textCode[tcGroup.DECREASE]:\n                    this.makeFontSmaller();\n                    break;\n                case \"AEND\":\n                    $gameMessage.clearAlignLast();\n                    break;\n                default:\n                    alias_Window_Base_processEscapeCharacter.call(\n                        this,\n                        code,\n                        textState\n                    );\n                    break;\n            }\n        };\n\n        const alias_loadWindowskin = Window_Base.prototype.loadWindowskin;\n        Window_Base.prototype.loadWindowskin = function () {\n            alias_loadWindowskin.call(this);\n            this.windowskin.addLoadListener(() => {\n                Color.baseColor = ColorManager.textColor(0);\n            });\n        };\n\n        Window_Base.prototype.getFontFace = function () {\n            const langCode =\n                RS.MessageSystem.Params.langCode ||\n                navigator.language.slice(0, 2);\n            const fonts = RS.MessageSystem.Params.fonts[langCode];\n            if (fonts) {\n                return fonts;\n            } else {\n                return RS.MessageSystem.Params.fonts.default;\n            }\n        };\n\n        Window_Base.prototype.drawTextEx = function (text, x, y, width) {\n            this.save();\n            this.resetFontSettings();\n            const textState = this.createTextState(text, x, y, width);\n            this.processAllText(textState);\n            this.restore();\n            return textState.outputWidth;\n        };\n\n        // Window_Base.prototype.processAllText = function (textState) {\n        //     this._isUsedTextWidthEx = !textState.drawing;\n        //     while (textState.index < textState.text.length) {\n        //         this.processCharacter(textState);\n        //     }\n        //     this.flushTextState(textState);\n        // };\n        Window_Base.prototype.makeFontSmaller = function () {\n            if (this.contents.fontSize >= RS.MessageSystem.Params.minFontSize) {\n                this.contents.fontSize -= 12;\n            }\n        };\n\n        Window_Base.prototype.resetFontSettings = function () {\n            this.contents.fontFace = this.getFontFace();\n            this.contents.fontSize = RS.MessageSystem.Params.fontSize;\n            this.contents.fontBold = false;\n            this.contents.fontItalic = false;\n            this.contents.outlineWidth =\n                RS.MessageSystem.Params.defaultOutlineWidth;\n            this.contents.outlineColor =\n                RS.MessageSystem.Params.defaultOutlineColor;\n\n            this.contents.fontGradient = false;\n            this.contents.highlightTextColor = null;\n            this.resetTextColor();\n        };\n\n        Window_Base.prototype.makeFontBigger = function () {\n            if (this.contents.fontSize <= RS.MessageSystem.Params.maxFontSize) {\n                this.contents.fontSize += 12;\n            }\n        };\n\n        Window_Base.prototype.save = function () {\n            this._messageDesc = new MessageDesc();\n            this._messageDesc.save(this);\n            console.log(this._messageDesc);\n        };\n\n        Window_Base.prototype.restore = function () {\n            if (!this._messageDesc) return;\n            this._messageDesc.restore(this);\n            this._messageDesc = undefined;\n        };\n\n        const alias_Window_Base_convertEscapeCharacters =\n            Window_Base.prototype.convertEscapeCharacters;\n        Window_Base.prototype.convertEscapeCharacters = function (text) {\n            const regGroup = RS.MessageSystem.Reg.Group;\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n\n            text = alias_Window_Base_convertEscapeCharacters.call(this, text);\n            text = text.replace(\n                regGroup[tcGroup.VAR],\n                function (...args: any[]): string {\n                    return $gameVariables\n                        .value(parseInt(<string>args[1]))\n                        .toString();\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.VAR],\n                function (...args: any[]) {\n                    return $gameVariables.value(parseInt(args[1])).toString();\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.PLAYER], (...args: any[]) => {\n                return this.actorName(parseInt(args[1]));\n            });\n            text = text.replace(\n                regGroup[tcGroup.PARTY_MEMBER],\n                (...args: any[]) => {\n                    return this.partyMemberName(parseInt(args[1]));\n                }\n            );\n            text = text.replace(\n                regGroup[tcGroup.NUM],\n                function (...args: any[]) {\n                    return args[1].toComma();\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.GOLD],\n                TextManager.currencyUnit\n            );\n            text = text.replace(\n                regGroup[tcGroup.CLASSES],\n                function (...args: any[]) {\n                    return $dataClasses[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITEM],\n                function (...args: any[]) {\n                    return $dataItems[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.WEAPON],\n                function (...args: any[]) {\n                    return $dataWeapons[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ARMOR],\n                function (...args: any[]) {\n                    return $dataArmors[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ENEMY],\n                function (...args: any[]) {\n                    return $dataEnemies[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.STATE],\n                function (...args: any[]) {\n                    return $dataStates[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.SKILL],\n                function (...args: any[]) {\n                    return $dataSkills[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_LEFT],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[0]\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_CENTER],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[1]\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_RIGHT],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[2]\";\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.ALIGN], (...args: any[]) => {\n                if (!this._isUsedTextWidthEx) {\n                    $gameMessage.setAlign(Number(args[1] || 0));\n                }\n                return \"\";\n            });\n            text = text.replace(\n                /<\\/LEFT>|<\\/CENTER>|<\\/RIGHT>/gi,\n                function () {\n                    return regGroup[tcGroup.ALIGN_CLEAR].source;\n                }.bind(this)\n            );\n            return text;\n        };\n\n        /**\n         * @deprecated\n         */\n        Window_Base.prototype.textPadding = function () {\n            return this.itemPadding();\n        };\n\n        Window_Base.prototype.newLineX = function (textState) {\n            return this.textPadding();\n        };\n\n        Window_Base.prototype.processAlign = function (textState) {\n            textState = textState || this._textState;\n\n            const isArabic = textState.rtl;\n\n            if (isArabic) {\n                return;\n            }\n\n            switch ($gameMessage.getAlign()) {\n                case 0:\n                    this.setAlignLeft(textState);\n                    break;\n                case 1:\n                    this.setAlignCenter(textState);\n                    break;\n                case 2:\n                    this.setAlignRight(textState);\n                    break;\n            }\n        };\n\n        const alias_Window_Base_processNewLine_align =\n            Window_Base.prototype.processNewLine;\n        Window_Base.prototype.processNewLine = function (textState) {\n            alias_Window_Base_processNewLine_align.call(this, textState);\n            this.processAlign(<TextState>textState);\n        };\n\n        Window_Base.prototype.setAlignLeft = function (textState) {\n            textState.x = this.newLineX(textState);\n            textState.startX = textState.x;\n        };\n\n        Window_Base.prototype.setAlignCenter = function (textState) {\n            const padding = this.textPadding();\n            textState.x =\n                (this.newLineX(textState) + this.contentsWidth() + padding) /\n                    2 -\n                textState.outputWidth / 2;\n            textState.startX = textState.x;\n        };\n\n        Window_Base.prototype.setAlignRight = function (textState) {\n            const padding = this.textPadding();\n            textState.x =\n                this.contentsWidth() - padding - textState.outputWidth;\n            textState.startX = textState.x;\n        };\n    };\n}\n","import { BalloonWindowTransformComponent } from \"../components/BalloonWindowTransformComponent\";\nimport { Executuor } from \"../core/ComponentExecutor\";\nimport { DependencyInjector } from \"../core/DependencyInjector\";\nimport { Color } from \"../core/RS\";\n\nexport function getWindowMessageCommand(): Executuor {\n    return () => {\n        //============================================================================\n        // Window_Message\n        //============================================================================\n        Window_Message.prototype.obtainTextSpeed = function (textState) {\n            const arr = /\\[(\\d+)\\]/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return parseInt(arr[1]);\n            } else {\n                return 0;\n            }\n        };\n\n        Window_Message.prototype.obtainGradientText = function (textState) {\n            const arr = /^<(.+?)>/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return String(arr[1]);\n            } else {\n                return \"Empty Text\";\n            }\n        };\n\n        Window_Message.prototype.obtainSoundName = function (textState) {\n            const arr = /\\<(.+?)\\>/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return String(arr[1]);\n            } else {\n                return \"\";\n            }\n        };\n\n        const alias_Window_Message_processEscapeCharacter =\n            Window_Message.prototype.processEscapeCharacter;\n        Window_Message.prototype.processEscapeCharacter = function (\n            code,\n            textState: TextState | string\n        ) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            switch (code) {\n                case textCode[tcGroup.TEXT_SPEED]:\n                    $gameMessage.setWaitTime(\n                        <number>this.obtainEscapeParam(textState)\n                    );\n                    break;\n                case textCode[tcGroup.TEXT_SIZE]:\n                    this.setTextSize(<number>this.obtainEscapeParam(textState));\n                    break;\n                case textCode[tcGroup.OUTLINE_COLOR]:\n                    this.setStrokeColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.INDENT]:\n                    this.setTextIndent(<TextState>textState);\n                    break;\n                case textCode[tcGroup.OUTLINE_WIDTH]:\n                    this.setStrokeWidth(\n                        <number>this.obtainEscapeParam(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.BOLD]:\n                    this.setTextBold(!this.contents.fontBold);\n                    break;\n                case textCode[tcGroup.BOLD_START]:\n                    this.setTextBold(true);\n                    break;\n                case textCode[tcGroup.BOLD_END]:\n                    this.setTextBold(false);\n                    break;\n                case textCode[tcGroup.ITALIC]:\n                    this.setTextItalic(!this.contents.fontItalic);\n                    break;\n                case textCode[tcGroup.ITALIC_START]:\n                    this.setTextItalic(true);\n                    break;\n                case textCode[tcGroup.ITALIC_END]:\n                    this.setTextItalic(false);\n                    break;\n                case textCode[tcGroup.GRADIENT]:\n                    this.setTextGradient(<TextState>textState);\n                    break;\n                case textCode[tcGroup.HIGHLIGHT_TEXT_COLOR]:\n                    this.setHighlightTextColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.TAB]:\n                    (<TextState>textState).x += Number(\n                        this.textWidth(\"A\") * RS.MessageSystem.Params.TabSize\n                    );\n                    break;\n                case textCode[tcGroup.CARRIAGE_RETURN]:\n                    (<TextState>textState).x = Number(\n                        (textState as TextState).startX || 0\n                    );\n                    if (!this._isUsedTextWidthEx) this.startWait(1);\n                    break;\n                case textCode[tcGroup.PLAY_SE]:\n                    if (!this._isUsedTextWidthEx)\n                        this.playSe(this.obtainSoundName(<TextState>textState));\n                    break;\n                case textCode[tcGroup.SHOW_PICTURE]:\n                    if (this._isUsedTextWidthEx) break;\n                    this.showPicture(\n                        this.obtainSoundName(<TextState>textState)\n                    );\n                    this.startWait(15);\n                case textCode[tcGroup.HIDE_PICTURE]:\n                    if (this._isUsedTextWidthEx) break;\n                    this.erasePicture(\n                        <number>this.obtainEscapeParam(textState)\n                    );\n                    this.startWait(15);\n                case textCode[tcGroup.FACE]:\n                    if (this._isUsedTextWidthEx) break;\n                    var params = this.obtainSoundName(\n                        <TextState>textState\n                    ).split(\",\");\n                    // this.redrawFaceImage(textState, params[0], params[1], 0, 0);\n                    this.startWait(1);\n                    break;\n                default:\n                    alias_Window_Message_processEscapeCharacter.call(\n                        this,\n                        code,\n                        textState\n                    );\n                    break;\n            }\n        };\n\n        Window_Message.prototype.setTextItalic = function (...args) {\n            this.contents.fontItalic = args[0];\n        };\n\n        Window_Message.prototype.setTextBold = function (...args) {\n            this.contents.fontBold = args[0];\n        };\n\n        Window_Message.prototype.setTextSize = function (...args) {\n            this.contents.fontSize = args[0].clamp(\n                RS.MessageSystem.Params.minFontSize,\n                RS.MessageSystem.Params.maxFontSize\n            );\n        };\n\n        Window_Message.prototype.setStrokeWidth = function (...args) {\n            this.contents.outlineWidth = args[0];\n        };\n\n        Window_Message.prototype.setStrokeColor = function (...args) {\n            this.contents.outlineColor = args[0];\n        };\n\n        Window_Message.prototype.setTextIndent = function (textState) {\n            const value = parseInt(<string>this.obtainEscapeParam(textState));\n            textState.x += value;\n        };\n\n        Window_Message.prototype.setHighlightTextColor = function (\n            ...args: any[]\n        ) {\n            let color: any = args[0];\n            if (color === \"null\" || color === \"없음\") {\n                color = null;\n            }\n            this.contents.highlightTextColor = color;\n        };\n\n        Window_Message.prototype.setTextGradient = function (textState) {\n            // TODO: 여기에서는 텍스트를 그리지 않는다.\n            // TODO: 그레디언트 모드임을 명시하고 flush 단계에서 한 번에 그려야 한다 (배경색도 마찬가지이다)\n            this.contents.fontGradient = true;\n        };\n\n        Window_Message.prototype.playSe = function (seName) {\n            const realName = seName.trim();\n            const data = <rm.types.AudioParameters>{\n                name: realName,\n                pan: 0,\n                pitch: 100,\n                volume: (<any>ConfigManager).seVolume,\n            };\n            AudioManager.playSe(data);\n        };\n\n        Window_Message.prototype.showPicture = function (param: string) {\n            const raw = param.split(\",\").map((e) => {\n                return e.trim();\n            });\n\n            let params = [\n                Number(raw[0]),\n                raw[1],\n                Number(raw[2]),\n                Number(raw[3]),\n                Number(raw[4]),\n                100,\n                100,\n                255,\n                0,\n            ];\n            let ret = true;\n\n            // 모든 요소 검증\n            if (params) {\n                params.forEach((e, i, a) => {\n                    if (e === undefined || e === null) {\n                        ret = false;\n                    }\n                });\n            }\n            // 검증 결과가 참이라면 그림 표시\n            if (ret) {\n                $gameScreen.showPicture.apply($gameScreen, <any>params);\n                return true;\n            }\n            return false;\n        };\n\n        Window_Message.prototype.erasePicture = function (picId) {\n            if (typeof picId !== \"number\") return;\n            $gameScreen.erasePicture(picId);\n        };\n\n        // 구조가 변경된 메서드\n        Window_Message.prototype.resetFontSettings = function () {\n            Window_Base.prototype.resetFontSettings.call(this);\n\n            // pause 아이콘 표시 위치 초기화\n            if (this._pauseSignSprite) {\n                this._pauseSignSprite.move(this._width / 2, this._height);\n                this._pauseSignSprite.scale.y = 1;\n            }\n\n            $gameMessage.setWaitTime(RS.MessageSystem.Params.textSpeed);\n        };\n\n        // 새로 추가된 메서드\n        Window_Message.prototype.resetGradient = function (textState) {\n            this.contents.fontGradient = false;\n        };\n\n        // 폰트 사이즈 설정 메서드는 MZ에서 없다\n        Window_Message.prototype.numVisibleRows = function () {\n            return RS.MessageSystem.Params.numVisibleRows;\n        };\n\n        /**\n         * Create text state included px and py values for text word wrapping.\n         */\n        const alias_Window_Message_createTextState =\n            Window_Message.prototype.createTextState;\n        Window_Message.prototype.createTextState = function (\n            text,\n            x,\n            y,\n            width\n        ) {\n            let textState = alias_Window_Message_createTextState.call(\n                this,\n                text,\n                x,\n                y,\n                width\n            );\n\n            const px = textState.x;\n            const py = textState.y;\n\n            // mixin\n            Object.assign(textState, {\n                px,\n                py,\n            });\n\n            return textState;\n        };\n\n        Window_Message.prototype.processWordWrap = function (\n            textState,\n            w,\n            width,\n            isValid\n        ) {\n            const px = <Required<number>>textState.px;\n\n            if (Math.floor(px + w * 2) > width) {\n                if (isValid) {\n                    this.processNewLine(textState);\n                    if (this.needsNewPage(textState)) {\n                        this.startPause();\n                    }\n                }\n            }\n        };\n\n        const alias_Window_Message_processNewLinePW =\n            Window_Message.prototype.processNewLine;\n        Window_Message.prototype.processNewLine = function (textState) {\n            alias_Window_Message_processNewLinePW.call(this, textState);\n            // 내부 버퍼의 위치를 시작 지점으로 초기화한다.\n            (<TextState>textState).px =\n                textState.startX || (<TextState>textState).x;\n\n            // background buffer 초기화\n            if (this._backBuffer && this._backBuffer.isDirty) {\n                const backTextState = this._backBuffer.textState;\n            }\n        };\n\n        /**\n         * ! Override\n         * @param {Object} textState\n         */\n        Window_Message.prototype.processCharacter = function (textState) {\n            const c = textState.text[textState.index++];\n            if (c.charCodeAt(0) < 0x20) {\n                this.flushTextState(textState);\n                this.processControlCharacter(textState, c);\n            } else {\n                textState.buffer += c;\n\n                // 내부 버퍼의 위치를 누적 계산한다.\n                textState.px += this.textWidth(c);\n            }\n        };\n\n        const alias_Window_Message_processCharacter =\n            Window_Message.prototype.processCharacter;\n        Window_Message.prototype.processCharacter = function (textState) {\n            // 이전 텍스트의 길이를 계산한다.\n            let isDirty = false;\n            const preBuffer = textState.buffer || \"\";\n            let preLen = preBuffer.length;\n\n            alias_Window_Message_processCharacter.call(this, textState);\n\n            // 새로운 텍스트가 이후에 있는가?\n            // 그게 문자인지 제어 문자인지는 이 로직에선 알 수 없다.\n            const postBuffer = textState.buffer || \"\";\n            const postLen = postBuffer.length;\n            if (preLen !== postLen) {\n                isDirty = true;\n            }\n\n            if (isDirty) {\n                // 끝에 있는 글자를 가지고 온다.\n                // 하지만 제어 문자인지는 확인하지 않는다.\n                // 제어 문자 여부는 메인 로직에서 판단하게 둔다.\n                const c = textState.buffer.substr(\n                    textState.buffer.length - 1,\n                    1\n                );\n                this.processNormalCharacterProxy(textState, c);\n            }\n        };\n\n        /**\n         * MZ에서는 processNormalCharacter의 구현이 없다.\n         * 하지만, 자동 개행이나 사운드 재생 그리고 배경색 묘화를 위해 위치 계산이 필요하다.\n         * 이 때문에 추가한 메서드이며, 텍스트의 묘화를 하진 않는다.\n         * @param {*} textState\n         * @param {*} c\n         */\n        Window_Message.prototype.processNormalCharacterProxy = function (\n            textState,\n            c\n        ) {\n            // MZ에서는 텍스트 상태(textState)가 다음 제어 문자가 등장해야 flush 처리된다.\n            // 따라서 이곳에서는 텍스트가 그려질 수 없다.\n            const w = this.textWidth(c);\n            let width = this.contentsWidth();\n\n            // 일반 메시지 모드에서만 동작 한다.\n            const isNormalMessageWindow = $gameMessage.getBalloon() === -2;\n            const isRealDrawingMode = textState.drawing;\n            let isValid =\n                isNormalMessageWindow &&\n                isRealDrawingMode &&\n                RS.MessageSystem.Params.isParagraphMinifier;\n\n            // 소수점 자리를 버려야 정확히 계산된다.\n            this.processWordWrap(textState, w, width, isValid);\n\n            const contents = this.contents;\n            const faceName = $gameMessage.faceName();\n\n            // if the faceName is not empty and the face direction is to right?\n            if (faceName !== \"\") {\n                width = contents.width - ImageManager.faceWidth;\n                isValid = RS.MessageSystem.Params.faceDirection === 2;\n                this.processWordWrap(textState, w, width, isValid);\n            }\n\n            // 배경색의 위치를 계산하고 비트맵 인스턴스를 생성한다.\n            const isValidTextBackground = contents.highlightTextColor !== null;\n            if (isValidTextBackground) {\n                const contentW = Math.floor(w * 2) + 1.0;\n                const contentH = this.lineHeight();\n\n                // 내부 버퍼의 텍스트 위치를 받아옵니다 (글자 하나의 버퍼 위치)\n                const { px, py } = <TextState>textState;\n\n                // 배경 버퍼의 생성\n                this._backBuffer = {\n                    buffer: new Bitmap(contentW, contentH),\n                    textState: textState,\n                    isDirty: false,\n                    x: px,\n                    y: py,\n                };\n\n                // 배경 버퍼는 내부 버퍼의 초기 위치로부터 계산된다.\n                this._backBuffer.buffer.fillAll(\n                    <string>contents.highlightTextColor\n                );\n                // 이 플래그가 활성화되어있다면 flushTextState에서 그리기 처리를 해야 한다.\n                this._backBuffer.isDirty = true;\n                this._backBuffer.textState = textState;\n            }\n        };\n\n        const alias_Window_Message_flushTextState =\n            Window_Message.prototype.flushTextState;\n        Window_Message.prototype.flushTextState = function (\n            textState: TextState\n        ) {\n            const isDrawing = textState.drawing; // !this._isUsedTextWidthEx와 같은 효과\n            const isSlowTextMode =\n                !this._showFast && !this.isEndOfText(textState) && isDrawing;\n            const isDrawingTextBackground =\n                isDrawing && this._backBuffer && this._backBuffer.isDirty;\n\n            if (isSlowTextMode) {\n                this.startWait($gameMessage.getWaitTime() || 0);\n            }\n\n            // 텍스트 코드를 만나면, flush가 시작되는데 배경색의 시작 라인이 달라지면,\n            // 다음 라인까지 배경색이 제대로 그려지지 않게 됩니다.\n            // 이는 MZ에서는 버퍼 방식이기 때문에 한 글자씩 배경색이 그려지지 않기 때문입니다.\n            // 따라서 라인이 달라질 때, flushBackground를 해줘야 합니다.\n            if (isDrawingTextBackground && isDrawing) {\n                const backBuffer = this._backBuffer;\n                const bitmap = backBuffer.buffer;\n                const backTextState = backBuffer.textState!;\n\n                if (backTextState.py !== textState.y) {\n                    this._backBuffer.isDirty = false;\n                    alias_Window_Message_flushTextState.call(this, textState);\n                    return;\n                }\n                let tx = backBuffer.x;\n                let ty = backBuffer.y;\n                const x = textState.x;\n                const y = textState.y;\n                const w = Math.min(this.innerWidth, Math.floor(bitmap.width));\n                const h = Math.min(this.innerHeight, Math.floor(bitmap.height));\n\n                // this.contents.blt(\n                //     bitmap,\n                //     0,\n                //     0,\n                //     w,\n                //     h,\n                //     Math.min(tx, y),\n                //     Math.min(ty, y)\n                // );\n                this._backBuffer.isDirty = false;\n            }\n\n            alias_Window_Message_flushTextState.call(this, textState);\n        };\n\n        /**\n         * 새로운 라인이 시작되기 전에 이전 라인에 그려야 할 배경색을 마저 그리는 기능입니다.\n         */\n        Window_Message.prototype.flushTextBackgbround = function (\n            textState: TextState\n        ) {};\n\n        Window_Message.prototype.updateBigFaceOpacity = function () {\n            if (!this._faceContents) {\n                return;\n            }\n            let { faceOpacity } = RS.MessageSystem.Params;\n            if (!faceOpacity) faceOpacity = 255;\n            const value = faceOpacity.clamp(0, 255);\n            this._faceContents.opacity = value;\n        };\n\n        Window_Message.prototype.fadeInOutFaceContents = function () {\n            if (!this._faceContents) {\n                return;\n            }\n\n            const isValid = this.isOpening() || this.isClosing();\n            if (isValid) {\n                const openness = (this.openness || 0).clamp(0, 255);\n                this._faceContents.scale.y = openness / 255;\n                this._faceContents.y =\n                    (this._faceContents.height / 2) * (1 - this.openness / 255);\n            }\n        };\n\n        const alias_Window_Message_checkToNotClose =\n            Window_Message.prototype.checkToNotClose;\n        Window_Message.prototype.checkToNotClose = function () {\n            this.fadeInOutFaceContents();\n            alias_Window_Message_checkToNotClose.call(this);\n        };\n\n        Window_Message.prototype.updateBalloonPosition = function () {\n            // Get the component\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            if (component) {\n                component.updateBalloonPosition();\n            }\n        };\n\n        Window_Message.prototype.getDefaultSizeOption = function () {\n            const isMobileDevice = Utils.isMobileDevice();\n            const maxSW = isMobileDevice\n                ? window.outerWidth\n                : window.screen.availWidth;\n            const maxSH = isMobileDevice\n                ? window.outerHeight\n                : window.screen.availHeight;\n            const maxWidth = this.width;\n            const maxHeight = this.height;\n\n            return {\n                maxSW,\n                maxSH,\n                maxWidth,\n                maxHeight,\n                maxY: maxSH - maxHeight,\n                maxX: maxSW - maxWidth,\n            };\n        };\n\n        Window_Message.prototype.updatePlacement = function () {\n            const goldWindow = this._goldWindow;\n            const isNormalWindowMode = $gameMessage.getBalloon() === -2;\n            const isValidSceneIsMap = SceneManager._scene instanceof Scene_Map;\n            this._positionType = $gameMessage.positionType();\n\n            // 말풍선 모드가 아니라면 X좌표를 화면 중앙에 맞춘다.\n            if (isNormalWindowMode) {\n                const { maxWidth, maxHeight, maxX, maxY } =\n                    this.getDefaultSizeOption();\n\n                const desiredX =\n                    Graphics.width / 2 -\n                    maxWidth / 2 +\n                    RS.MessageSystem.Params.windowOffset.x;\n                const desiredY =\n                    (this._positionType * (Graphics.height - maxHeight)) / 2 +\n                    RS.MessageSystem.Params.windowOffset.y;\n\n                this.x = Math.min(desiredX, maxX);\n                this.y = Math.min(desiredY, maxY);\n            } else {\n                if (isValidSceneIsMap) {\n                    this.updateBalloonPosition();\n                }\n            }\n\n            // 골드 윈도우의 위치 설정\n            if (goldWindow) {\n                const minGoldY = goldWindow.height;\n                this._goldWindow.y =\n                    this.y > minGoldY ? 0 : Graphics.height - goldWindow.height;\n            }\n\n            // 투명도 업데이트\n            this.updateDefaultOpacity();\n            this.updateContentsOpacity();\n            this.updateBigFaceOpacity();\n\n            // 이름 윈도우 업데이트\n            // if (this._nameBoxWindow.isOpen() || this.areSettingsChanged()) {\n            //     this.updateNameWindow();\n            // }\n            // 얼굴 이미지의 Z-Index 업데이트\n            if ($gameMessage.faceName() !== \"\") {\n                const isBigFace = /^Big_/.exec($gameMessage.faceName());\n                const backIndex = 2;\n\n                if (RS.MessageSystem.Params.faceSide) {\n                    this.setFaceZIndex(isBigFace ? 0 : backIndex);\n                } else {\n                    this.setFaceZIndex(backIndex);\n                }\n            }\n        };\n\n        Window_Message.prototype.isAlreadyDrawnFace = function () {\n            return this._faceContents.bitmap || this.newLineX() > 0;\n        };\n\n        Window_Message.prototype.setFaceZIndex = function (zIndex = 0) {\n            const parent = this.parent;\n            const isFaceSide = RS.MessageSystem.Params.faceSide;\n\n            if (parent && isFaceSide) {\n                this.setChildIndex(this._faceContents, zIndex);\n            }\n        };\n\n        Window_Message.prototype.clearFaceBitmap = function () {\n            if (this._faceContents.bitmap) {\n                // @ts-ignore\n                this._faceContents.bitmap = null;\n            }\n        };\n\n        const alias_Window_Message_convertEscapeCharacters =\n            Window_Message.prototype.convertEscapeCharacters;\n        Window_Message.prototype.convertEscapeCharacters = function (text) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            const regGroup = RS.MessageSystem.Reg.Group;\n            text = alias_Window_Message_convertEscapeCharacters.call(\n                this,\n                text\n            );\n            text = text.replace(\n                regGroup[tcGroup.BOLD_START_CV],\n                function () {\n                    return regGroup[tcGroup.BOLD_START].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.BOLD_END_CV],\n                function () {\n                    return regGroup[tcGroup.BOLD_END].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITALIC_START_CV],\n                function () {\n                    return regGroup[tcGroup.ITALIC_START].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITALIC_END_CV],\n                function () {\n                    return regGroup[tcGroup.ITALIC_END].source;\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.NAME], (...args) => {\n                let retName = args[1];\n\n                if (retName.endsWith(\":left\")) {\n                    retName = retName.replace(\":left\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"left\";\n                }\n                if (retName.endsWith(\":auto\")) {\n                    retName = retName.replace(\":auto\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"auto\";\n                }\n                if (retName.endsWith(\":center\")) {\n                    retName = retName.replace(\":center\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"center\";\n                }\n                if (retName.endsWith(\":opacity0\")) {\n                    retName = retName.replace(\":opacity0\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"opacity0\";\n                }\n                if (retName.endsWith(\":defaultOpacity\")) {\n                    retName = retName.replace(\":defaultOpacity\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX =\n                        \"defaultOpacity\";\n                }\n                if (retName.endsWith(\":right\")) {\n                    retName = retName.replace(\":right\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"right\";\n                }\n                this._nameBoxWindow.setName(retName);\n                return \"\";\n            });\n            text = text.replace(\n                regGroup[tcGroup.BALLOON],\n                function () {\n                    const value = Number(arguments[1] || -2);\n                    if ($gameParty.inBattle()) {\n                        $gameMessage.setBalloon(\n                            // @ts-ignore\n                            value < 0\n                                ? \"ENEMIES : \" + Math.abs(value)\n                                : \"ACTORS : \" + value\n                        );\n                    } else {\n                        $gameMessage.setBalloon(value);\n                    }\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.FRIENDLY_TROOPS],\n                function () {\n                    const value = Number(arguments[1] || 0);\n                    $gameMessage.setBalloon(\n                        // @ts-ignore\n                        \"ACTORS : \" + value\n                    );\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ENEMY_TROOPS],\n                function () {\n                    const value = Number(arguments[1] || 0);\n                    $gameMessage.setBalloon(\n                        // @ts-ignore\n                        \"ENEMIES : \" + value\n                    );\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.FACE_DIRECTION], () => {\n                const value = Number(arguments[1] || 0);\n                if (!this._isUsedTextWidthEx) {\n                    RS.MessageSystem.Params.faceDirection = value;\n                }\n                return \"\";\n            });\n            return text;\n        };\n\n        // Window_Message.prototype.terminateMessage\n        Window_Message.prototype.setHeight = function (n) {\n            this.contents.clear();\n            $gameMessage.setMaxLine(n);\n            this.height = this.fittingHeight(n);\n            this.createContents();\n            this.updatePlacement();\n        };\n\n        const alias_Window_Message_initialize =\n            Window_Message.prototype.initialize;\n        Window_Message.prototype.initialize = function (rect) {\n            alias_Window_Message_initialize.call(this, rect);\n            $gameTemp.setMSHeightFunc(this.setHeight.bind(this));\n            this.setHeight(RS.MessageSystem.Params.numVisibleRows);\n            this.createFaceContents();\n            this.on(\"removed\", this.removeEventHandler, this);\n            this.on(\"onLoadWindowskin\", this.onLoadWindowskin, this);\n        };\n\n        Window_Message.prototype.calcBalloonRect = function (text: string) {\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            component.calcBalloonRect(text);\n        };\n\n        const alias_Window_Message_newPage = Window_Message.prototype.newPage;\n        Window_Message.prototype.newPage = function (textState) {\n            this.setFaceZIndex();\n            this.clearFaceBitmap();\n            this.loadWindowskin();\n            this.emit(\"onLoadWindowskin\");\n            this.openBalloon($gameMessage.getBalloon());\n            alias_Window_Message_newPage.call(this, textState);\n        };\n\n        Window_Message.prototype.updateBalloonPositionInBattle = function () {\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            if (component) {\n                component.updateBalloonPositionInBattle();\n            }\n        };\n\n        Window_Message.prototype.openBalloon = function (sign) {\n            // 말풍선 모드가 아니면 빠져나간다.\n            if (sign === -2) {\n                this.resizeMessageSystem();\n                return;\n            }\n\n            this.setupOwner(sign);\n\n            const isBattleScene = SceneManager._scene instanceof Scene_Battle;\n            // 전투 중일 경우\n            if (isBattleScene) {\n                this.updateBalloonPositionInBattle();\n            } else {\n                this.updateBalloonPosition();\n            }\n        };\n\n        /**\n         * 1. start\n         */\n        const alias_Window_Message_startMessage =\n            Window_Message.prototype.startMessage;\n        Window_Message.prototype.startMessage = function () {\n            const text = $gameMessage.allText();\n            const textState = this.createTextState(text, 0, 0, 0);\n            textState.x = this.newLineX(textState);\n            textState.startX = textState.x;\n            this._textState = textState;\n\n            // 말풍선 영역을 계산합니다.\n            let tempText = textState.text.slice(0);\n            if (\n                $gameMessage.getBalloon() === -2 &&\n                RS.MessageSystem.Params.isParagraphMinifier\n            ) {\n                tempText = tempText.replace(/[\\r\\n]+/gm, \" \");\n            }\n            // ! BUG의 원인\n            this.calcBalloonRect(tempText);\n\n            this.newPage(this._textState);\n\n            // width 와 height를 재설정한다.\n            this.resizeMessageSystem(\"no reset\");\n\n            this.updatePlacement();\n            this.updateBackground();\n            this.open();\n            this._nameBoxWindow.start();\n        };\n\n        Window_Message.prototype.getDefaultWindowRect = function () {\n            return Scene_Message.prototype.messageWindowRect();\n        };\n\n        Window_Message.prototype.windowWidth = function () {\n            const rect = this.getDefaultWindowRect();\n            return rect.width;\n        };\n\n        Window_Message.prototype.windowHeight = function () {\n            const rect = this.getDefaultWindowRect();\n            return rect.height;\n        };\n\n        Window_Message.prototype.resizeMessageSystem = function (\n            ...args: any[]\n        ) {\n            const isResetOwner: Boolean = !(args.length > 0);\n\n            const isBattleScene = SceneManager._scene instanceof Scene_Battle;\n            if (!isResetOwner && isBattleScene) {\n                return;\n            }\n\n            const n = $gameMessage.positionType();\n            const ox = RS.MessageSystem.Params.windowOffset.x;\n            const oy = RS.MessageSystem.Params.windowOffset.y;\n\n            const windowRect = {\n                width: this.windowWidth(),\n                height: this.windowHeight(),\n            };\n            const x = Graphics.width / 2 - windowRect.width / 2 + ox;\n            const y = (n * (Graphics.height - windowRect.height)) / 2 + oy;\n            const width = windowRect.width;\n            const height = windowRect.height;\n\n            if (x !== this.x) this.x = x;\n            if (y !== this.y) this.y = y;\n            if (width !== this.width || height !== this.height) {\n                this.width = width;\n                this.height = height;\n            }\n\n            if (isResetOwner) {\n                $gameMap.setMsgOwner($gamePlayer);\n            }\n        };\n\n        Window_Message.prototype.removeEventHandler = function () {\n            this.off(\"onLoadWindowskin\", this.onLoadWindowskin, this);\n        };\n\n        /**\n         * TODO: ColorManager.textColor의 대체 구현.\n         *\n         * @param {Number} n\n         * @returns\n         */\n        Window_Message.prototype.textColor = function (n) {\n            const windowskin = this.windowskin;\n            if (!windowskin.isReady()) {\n                // Set the default text color if the windowskin is not ready.\n                return Color.baseColor;\n            }\n            const px = 96 + (n % 8) * 12 + 6;\n            const py = 144 + Math.floor(n / 8) * 12 + 6;\n            return windowskin.getPixel(px, py);\n        };\n\n        Window_Message.prototype.onLoadWindowskin = function () {\n            Color.baseColor = this.textColor(0);\n            this.changeTextColor(Color.baseColor);\n        };\n\n        Window_Message.prototype.loadWindowskin = function () {\n            const bitmap = ImageManager.loadSystem(\n                RS.MessageSystem.Params.windowskin\n            );\n\n            // if the windowskin is changed?\n            if (bitmap !== this.windowskin) {\n                this.windowskin = bitmap;\n                this._isDirtyWindowskin = false;\n                this.windowskin.addLoadListener(() => {\n                    this._isDirtyWindowskin = true;\n                });\n                if (!this.contents) {\n                    this.createContents();\n                }\n                // Set the default text color if the windowskin didn't load yet.\n                this.changeTextColor(Color.baseColor);\n\n                if (!this.windowskin.isReady()) {\n                    return setTimeout(() => this.loadWindowskin(), 10);\n                }\n            }\n        };\n\n        const _Window_Message_updateLoading =\n            Window_Message.prototype.updateLoading;\n        Window_Message.prototype.updateLoading = function () {\n            let ret = true;\n\n            if (this._isDirtyWindowskin) {\n                Color.baseColor = ColorManager.textColor(0);\n                this.changeTextColor(Color.baseColor);\n                this._isDirtyWindowskin = false;\n                ret = true;\n            }\n            return _Window_Message_updateLoading.call(this) && ret;\n        };\n\n        Window_Message.prototype.needsNewPage = function (textState) {\n            return (\n                !this.isEndOfText(textState) &&\n                textState.y + textState.height > this.contentsHeight()\n            );\n        };\n\n        Window_Message.prototype.createFaceContents = function () {\n            this._faceContents = new Sprite();\n            this._faceContents.x = 0;\n            this._faceContents.y = 0;\n\n            this.addChildAt(this._faceContents, 2);\n            return this._faceContents;\n        };\n\n        Window_Message.prototype.removeFaceContents = function () {\n            if (this._faceContents) this.removeChild(this._faceContents);\n        };\n\n        /**\n         * 큰 얼굴 이미지가 설정되었을 때 텍스트 시작 위치\n         */\n        Window_Message.prototype.newLineX = function () {\n            const reg = /^Big_/i;\n            const faceName = $gameMessage.faceName();\n            const faceIndex = $gameMessage.faceIndex();\n            if (reg.exec(faceName)) {\n                var faceStartX = RS.MessageSystem.Params.faceSide\n                    ? 0\n                    : RS.MessageSystem.Params.textStartX;\n                return faceIndex > 0 ? 0 : faceStartX;\n            } else {\n                const isRightDirection =\n                    RS.MessageSystem.Params.faceDirection === 2;\n                if (isRightDirection) {\n                    return 0;\n                }\n                return faceName ? RS.MessageSystem.Params.faceStartOriginX : 0;\n            }\n        };\n\n        // TODO: 큰 얼굴 이미지 구현 필요\n        /**\n         * @param {String} faceName\n         */\n        Window_Message.prototype.isValidBigFace = function (faceName) {\n            const reg = /^Big_/i;\n            return reg.exec(faceName);\n        };\n\n        /**\n         * TODO: deprecated\n         */\n        Window_Message.prototype.updateNameWindow = function () {};\n\n        /**\n         * Window 구성 스프라이트 _windowBackSprite의 투명도를 조절합니다.\n         * TODO: deprecated\n         * @method standardBackOpacity\n         */\n        Window_Message.prototype.standardBackOpacity = function () {\n            return RS.MessageSystem.Params.backOpacity;\n        };\n\n        /**\n         * Bitmap의 context.globalAlpha 값을 변경합니다.\n         * @method translucentOpacity\n         */\n        Window_Message.prototype.translucentOpacity = function () {\n            return RS.MessageSystem.Params.translucentOpacity;\n        };\n\n        /**\n         * 윈도우를 구성하는 모든 객체의 투명도를 변경합니다.\n         * @method updateDefaultOpacity\n         */\n        Window_Message.prototype.updateDefaultOpacity = function () {\n            this.opacity = RS.MessageSystem.Params.defaultOpacity;\n        };\n\n        /**\n         * Window 구성 스프라이트 _windowContentsSprite의 투명도를 변경합니다.\n         * @method updateContentsOpacity\n         */\n        Window_Message.prototype.updateContentsOpacity = function () {\n            this.contentsOpacity = RS.MessageSystem.Params.contentsOpacity;\n        };\n\n        Window_Message.prototype.getSpriteActors = function (\n            sign: number\n        ): IBalloonSpriteTarget | null {\n            if (!$gameParty.members()) return null;\n            const max = $gameParty.members().length;\n            sign = sign.clamp(0, max);\n\n            return {\n                type: \"actor\",\n                id: sign - 1,\n            };\n        };\n\n        Window_Message.prototype.getSpriteEnemies = function (\n            sign: number\n        ): IBalloonSpriteTarget | null {\n            if (!$gameTroop.members()) return null;\n            const max = $gameTroop.members().length;\n            sign = sign.clamp(0, max);\n\n            return {\n                type: \"enemy\",\n                id: sign - 1,\n            };\n        };\n\n        Window_Message.prototype.setupOwner = function (sign) {\n            switch (sign) {\n                case -1: // 플레이어\n                    $gameMap.setMsgOwner($gamePlayer);\n                    break;\n                case 0: // 이 이벤트\n                    $gameMap.setMsgOwner(<Game_Event>$gameMap.getMsgEvent());\n                    break;\n                default:\n                    if (SceneManager._scene instanceof Scene_Battle) {\n                        // 전투 중인가?\n                        if (/(?:ENEMIES)[ ]*:(.*)/.test(sign.toString())) {\n                            // 적\n                            $gameMap.setMsgOwner(\n                                this.getSpriteEnemies(parseInt(RegExp.$1))\n                            );\n                        }\n                        if (/(?:ACTORS)[ ]*:(.*)/.test(sign.toString())) {\n                            // 아군\n                            $gameMap.setMsgOwner(\n                                this.getSpriteActors(parseInt(RegExp.$1))\n                            );\n                        }\n                    } else {\n                        // 맵 이벤트\n                        $gameMap.setMsgOwner($gameMap.event(sign));\n                    }\n                    break;\n            }\n        };\n\n        const alias_Window_Message_shouldBreakHere =\n            Window_Message.prototype.shouldBreakHere;\n        Window_Message.prototype.shouldBreakHere = function (text) {\n            const isBreakCharacter = alias_Window_Message_shouldBreakHere.call(\n                this,\n                text\n            );\n\n            if (isBreakCharacter) {\n                if (RS.MessageSystem.Params.isPlayTextSound) {\n                    const interval = RS.MessageSystem.Params.textSoundInterval;\n\n                    if (this._textSoundInterval-- <= 0) {\n                        AudioManager.playStaticSe(<rm.types.AudioParameters>{\n                            name: RS.MessageSystem.popParameter(\n                                \"Text Sound\",\n                                \"텍스트 효과음\"\n                            ),\n                            pan: 0,\n                            pitch: 100,\n                            volume: 90,\n                        });\n                        this._textSoundInterval = interval;\n                    }\n                }\n            }\n\n            return isBreakCharacter;\n        };\n    };\n}\n","import { Executuor } from \"../core/ComponentExecutor\";\n\nexport function getWindowNameBoxCommand(): Executuor {\n    return () => {\n        //============================================================================\n        // Window_NameBox\n        //============================================================================\n        Window_NameBox.prototype.updatePlacement = function () {\n            this.width = this.windowWidth();\n            this.height = this.windowHeight();\n            const messageWindow = this._messageWindow;\n            if ($gameMessage.isRTL()) {\n                this.x = messageWindow.x + messageWindow.width - this.width;\n            } else {\n                this.x = messageWindow.x;\n            }\n            if (messageWindow.y > 0) {\n                this.y = messageWindow.y - this.height;\n            } else {\n                this.y = messageWindow.y + messageWindow.height;\n            }\n        };\n    };\n}\n","import { BaseComponent } from \"./BaseComponent\";\nimport { ComponentProp } from \"../core/Component\";\n\nexport type BalloonRectData = {\n    /**\n     *\n     */\n    mx: number;\n    /**\n     *\n     */\n    my: number;\n    /**\n     *\n     */\n    tx: number;\n    /**\n     *\n     */\n    ty: number;\n    /**\n     *\n     */\n    tileHeight: number;\n    /**\n     * Sets or gets `dx` that means the destination x coordinate.\n     */\n    dx: number;\n    /**\n     * Sets or gets `dy` that means the destination y coordinate.\n     */\n    dy: number;\n    /**\n     * Gets or sets the value related for the name window.\n     */\n    ny: number;\n    /**\n     *\n     */\n    scaleY: number;\n    /**\n     * Gets or sets the padding value (like value named `padding-bottom`)\n     * `screenX`와 `screenY`는 `right-bottom`에 위치하므로 `height` 만큼 빼야 합니다.\n     */\n    padY: number;\n};\n\n/**\n * @class BalloonWindowTransformComponent\n * @description\n * 말풍선 윈도우의 위치를 조정하기 위한 컴포넌트입니다.\n */\nexport class BalloonWindowTransformComponent extends BaseComponent {\n    private _bWidth: number = 0;\n    private _bHeight: number = 0;\n    public transform!: PIXI.Transform;\n\n    onReady(props: ComponentProp) {\n        super.onReady(props);\n        this._bWidth = this.width;\n        this._bHeight = this.height;\n    }\n\n    /**\n     * 말풍선 영역의 크기를 계산합니다.\n     *\n     * @param {String} text\n     * @returns {Number}\n     */\n    calcBalloonRect(text: string) {\n        // {\n        //     let temp: string,\n        //         baseWidth: number,\n        //         tempText: string[],\n        //         height: number,\n        //         min: number,\n        //         pad: number,\n        //         numOfLines: number;\n        //     // drawTextEx를 사용하기 전에 현재 상태를 저장한다.\n        //     this.save();\n\n        //     temp = text;\n\n        //     // 라인 갯수를 구하기 위해 텍스트를 줄바꿈 문자를 기준으로 나눈다.\n        //     const copyText = text.slice(0);\n        //     tempText = copyText.split(/[\\r\\n]+/);\n        //     numOfLines = tempText.length;\n\n        //     pad = this.standardPadding() * 2;\n\n        //     // 높이를 구한다.\n        //     height = 0;\n        //     tempText.forEach((i) => (height += this.calcBalloonRectHeight(i)));\n\n        //     if (height <= 0) {\n        //         // 높이를 구할 수 없었다면,\n        //         height = this.fittingHeight(numOfLines);\n        //     } else {\n        //         // 높이를 구했다면\n        //         height = height + pad;\n        //     }\n\n        //     const textPadding = this.textPadding();\n\n        //     // 폭을 계산한다.\n        //     let pw = 0;\n        //     for (var i = 0; i < numOfLines; i++) {\n        //         this._isUsedTextWidthEx = true;\n        //         const x = this.drawTextEx(tempText[i]);\n        //         this._isUsedTextWidthEx = false;\n        //         if (x >= pw) {\n        //             pw = x;\n        //         }\n        //     }\n\n        //     baseWidth = pw;\n        //     this._bWidth =\n        //         baseWidth + pad + textPadding || RS.MessageSystem.Params.WIDTH;\n\n        //     // 얼굴 이미지가 설정되어있다면 ?\n        //     if ($gameMessage.faceName() !== \"\") {\n        //         // 최소 높이를 설정한다.\n        //         min = this.fittingHeight(4);\n        //         // 기존 폭 값에 얼굴 이미지의 폭을 더한다.\n        //         this._bWidth += this.newLineX() + pad;\n        //         if (RS.MessageSystem.Params.faceDirection === 2) {\n        //             this._bWidth += ImageManager.faceWidth;\n        //         }\n        //         // 높이 값이 최소 높이보다 작으면, 최소 높이 값으로 설정한다.\n        //         if (height < min)\n        //             height = height.clamp(min, height + (min - height));\n        //     }\n\n        //     const type = RS.MessageSystem.Params.choiceWindowStyle;\n\n        //     // 선택지가 있고, XP 스타일로 설정했을 때\n        //     if (type === \"RMXP\" && $gameMessage.isChoice()) {\n        //         const maxLines = tempText.length;\n        //         const maxChoices = $gameMessage.choices().length;\n        //         const lineHeight = this.lineHeight();\n        //         // 선택지 갯수를 확장했을 수도 있지만, 4개로 가정한다.\n        //         height = height + maxChoices * lineHeight;\n        //         // 선택지 윈도우의 폭이 말풍선보다 크면 제한을 둔다.\n        //         if (this._choiceWindow.windowWidth() > this._bWidth) {\n        //             this._bWidth = this._choiceWindow.windowWidth();\n        //         }\n        //     }\n\n        //     this.restore();\n        // }\n        this.save();\n\n        {\n            // TODO: 얼굴 이미지 설정 체크\n            // TODO: 인라인 선택지 모드인지 체크\n\n            const rect = this.textSizeEx(text);\n            const padding = this.standardPadding();\n            this._bWidth = rect.width + padding * 2;\n            this._bHeight = Math.max(\n                rect.height + padding * 2,\n                this.fittingHeight(1)\n            );\n            // this.drawTextEx() 사용하기 이전 상태로 복구한다.\n        }\n        this.restore();\n    }\n\n    textSizeEx(text: string): TextSizeRect {\n        this.messageWindow._isUsedTextWidthEx = true;\n        const rect = this.messageWindow.textSizeEx(text);\n        this.messageWindow._isUsedTextWidthEx = false;\n\n        return rect;\n    }\n\n    /**\n     * @override\n     */\n    updatePlacement() {\n        this.messageWindow.updatePlacement();\n    }\n\n    isActiveInBalloon() {\n        const isInValidBalloon = $gameMessage.getBalloon() === -2;\n        if (isInValidBalloon) {\n            this.updatePlacement();\n            return false;\n        }\n        return true;\n    }\n\n    setBalloonRect(data: BalloonRectData) {\n        const faceName = $gameMessage.faceName();\n        const faceDirection = RS.MessageSystem.Params.faceDirection;\n\n        const ox = RS.MessageSystem.Params.windowOffset.x;\n        const oy = RS.MessageSystem.Params.windowOffset.y;\n        this.x = data.dx + ox;\n        this.y = data.dy + oy;\n        this.width = this._bWidth;\n        this.height = this._bHeight;\n\n        if (faceName && faceDirection === 2) {\n            this.drawMessageFace();\n        }\n    }\n\n    setBalloonPlacement(data: BalloonRectData): BalloonRectData | void {\n        const gw = Graphics.width;\n        const gh = Graphics.height;\n        const bw = Graphics.boxWidth;\n        const bh = Graphics.boxHeight;\n\n        console.log(\"setBalloonPlacement() + \" + JSON.stringify(data));\n        // 화면 좌측\n        if (!data) return;\n        if (data.mx - this._bWidth / 2 < 0) {\n            data.dx = 0;\n            data.tx = this.canvasToLocalX(data.mx);\n        }\n\n        // 화면 우측\n        if (data.mx - this._bWidth / 2 > bw - this._bWidth) {\n            data.dx = bw - this._bWidth;\n            data.tx = this.canvasToLocalX(data.mx);\n        }\n\n        // 화면 상단\n        if (data.my - this._bHeight - data.tileHeight / 2 < 0) {\n            data.dy = data.my + data.tileHeight / 2;\n            data.scaleY = -1;\n            data.ty = this._height * data.scaleY + this._height;\n            data.ny =\n                this.y + this._bHeight + RS.MessageSystem.Params.nameWindowY;\n        }\n\n        // 화면 하단\n        if (data.my - this._bHeight > bh - this._bHeight) {\n            data.dy = bh - this._bHeight;\n            data.ty = this._height;\n        }\n\n        return data;\n    }\n\n    /**\n     * Updates position of the pause sprite and the name window.\n     *\n     * @param data\n     */\n    updateSubBalloonElements(data: BalloonRectData) {\n        const _pauseSignSprite = this.messageWindow._pauseSignSprite;\n        if (_pauseSignSprite) {\n            _pauseSignSprite.move(data.tx, data.ty);\n            _pauseSignSprite.scale.y = data.scaleY;\n        }\n        this._nameWindow.y = data.ny;\n    }\n\n    getNameWindowY(): number {\n        const ny =\n            this.y -\n            this._nameWindow.height -\n            RS.MessageSystem.Params.nameWindowY;\n\n        return ny ? ny : 0;\n    }\n\n    // canvasToLocalX(x: number) {\n    //     let node: any = this.messageWindow;\n    //     while (node) {\n    //         x -= node.x;\n    //         node = <Sprite>node.parent;\n    //     }\n    //     return x;\n    // }\n\n    // canvasToLocalY(y: number) {\n    //     let node: any = this.messageWindow;\n    //     while (node) {\n    //         y -= node.y;\n    //         node = node.parent;\n    //     }\n    //     return y;\n    // }\n\n    updateBalloonPosition(): never | void {\n        console.log(\n            \"============ DEBUG updateBalloonPosition() ====================\"\n        );\n\n        let data = <BalloonRectData>{};\n\n        if (!this.isActiveInBalloon()) return;\n\n        // 말풍선 소유자의 화면 좌표\n        const owner = <Game_Character>$gameMap.getMsgOwner();\n\n        if (!owner) {\n            console.warn($gameMap.getMsgOwner());\n            throw new Error(\"말풍선 소유자가 없습니다.\");\n        }\n\n        data.mx = owner.screenX();\n        data.my = owner.screenY();\n\n        console.log(\"%d %d\", data.mx, data.my);\n\n        data.tx = this._bWidth / 2;\n        data.ty = this._bHeight;\n        data.scaleY = 1;\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\n        data.dx = data.mx - this._bWidth / 2;\n        data.dy = data.my - this._bHeight - data.tileHeight;\n        data.ny = this.getNameWindowY();\n\n        console.log(JSON.stringify(data));\n\n        data = <BalloonRectData>this.setBalloonPlacement(data);\n\n        if (\n            data.dx + RS.MessageSystem.Params.windowOffset.x !== this.x ||\n            data.dy + RS.MessageSystem.Params.windowOffset.y !== this.y ||\n            this._bWidth !== this.width ||\n            this._bHeight !== this.height\n        ) {\n            // 말풍선 위치 및 크기 설정\n            this.setBalloonRect(data);\n\n            // 멈춤 표시 스프라이트 위치 조정\n            this.updateSubBalloonElements(data);\n        }\n    }\n\n    updateBalloonPositionInBattle() {\n        if (!$gameParty.inBattle()) {\n            // 전투 씬인지 확인\n            console.warn(\"전투가 아닙니다\");\n            return;\n        }\n        if (!$gameSystem.isSideView()) {\n            // 사이드뷰 전투인지 확인\n            console.warn(\"사이드뷰 전투가 아닙니다.\");\n            return;\n        }\n\n        let data = <BalloonRectData>{};\n\n        // 타겟의 화면 좌표 설정\n        let owner = $gameMap.getMsgOwner();\n        if (!owner) {\n            console.warn(\"owner 변수가 없습니다\");\n            return;\n        }\n        if (!owner.hasOwnProperty(\"type\")) {\n            console.warn(\"type 속성이 없습니다 : \" + owner);\n            return;\n        }\n        if (!owner.hasOwnProperty(\"id\")) {\n            console.warn(\"id 속성이 없습니다 : \" + owner);\n            return;\n        }\n\n        // 현재 씬이 전투 씬이 아닌 경우를 확인한다.\n        let scene = SceneManager._scene;\n        if (!(scene instanceof Scene_Battle)) {\n            console.warn(\"전투 장면이 아닙니다\");\n            return false;\n        }\n\n        let parent;\n\n        // 액터인가?\n        if (owner.type === \"actor\") {\n            parent = scene._spriteset._actorSprites; // 액터 스프라이트 군을 반환\n        } else {\n            parent = scene._spriteset._enemySprites; // 적 스프라이트 군을 반환\n        }\n\n        // 타겟 스프라이트를 id 값으로 찾는다.\n        let tempBattlers = [];\n        tempBattlers = parent;\n        let target = tempBattlers[owner.id];\n        if (!target) {\n            console.warn(\"타겟이 없습니다\");\n            return;\n        }\n\n        // 이미 죽어있다면 메시지를 일반 메시지로 표시한다.\n        if (\n            (owner.type === \"actor\" &&\n                !(<Sprite_Actor>target)._actor.isAlive()) ||\n            (owner.type === \"enemy\" && !(<Sprite_Enemy>target)._enemy.isAlive())\n        ) {\n            return;\n        }\n\n        data.mx = target.x;\n        data.my = target.y;\n\n        data.padY =\n            owner.type === \"actor\"\n                ? (target as Sprite_Actor)._mainSprite.bitmap.height / 6\n                : target.bitmap.height;\n\n        data.tx = this._width / 2;\n        data.ty = this._height;\n\n        data.scaleY = 1;\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\n\n        data.dx = data.mx - this._bWidth / 2;\n        data.dy = data.my - this._bHeight - data.tileHeight - data.padY;\n\n        data.ny =\n            this.y -\n            this._nameWindow.height -\n            RS.MessageSystem.Params.nameWindowY;\n\n        data = <BalloonRectData>this.setBalloonPlacement(data);\n\n        // 말풍선 위치 및 크기 설정\n        this.setBalloonRect(data);\n\n        // 멈춤 표시 스프라이트 위치 조정\n        this.updateSubBalloonElements(data);\n\n        if (this.transform) this.updateTransform();\n    }\n\n    updateTransform(): void {\n        this.messageWindow.updateTransform();\n    }\n\n    calcBalloonRectHeight(text: string) {\n        // 상태 저장\n        this.save();\n\n        const messageWindow = this.messageWindow;\n        const tempFontSize = this.contents.fontSize;\n\n        const textState = messageWindow.createTextState(text, 0, 0, 0);\n        textState.text = messageWindow.convertEscapeCharacters(text);\n        textState.height = messageWindow.calcTextHeight(textState, false);\n\n        // 상태 복구\n        this.restore();\n\n        messageWindow.setTextSize(tempFontSize);\n        return textState.height;\n    }\n}\n","import { Component, ComponentProp } from \"../core/Component\";\n\n/**\n * @class BaseComponent\n * @description\n * 샌드박스 환경에서 MV 메소드를 호출하여 이전 버전에 대한 안전성을 제공합니다.\n */\nexport class BaseComponent extends Component {\n    private _messageWindow!: Window_Message;\n\n    constructor(props: ComponentProp) {\n        super(props);\n    }\n\n    onReady(props: ComponentProp) {\n        // if the message window is valid from passed props.\n        if (!(\"messageWindow\" in props)) {\n            console.error(\"messageWindow is not defined\");\n            return;\n        }\n\n        console.log(\"On Ready 이벤트가 실행되었습니다.\");\n\n        /**\n         * @type {Window_Message}\n         */\n        this._messageWindow = props.messageWindow;\n    }\n\n    // Getters\n    get messageWindow() {\n        return this._messageWindow;\n    }\n\n    get contents() {\n        return this._messageWindow.contents;\n    }\n\n    /**\n     * @returns {Window_NameBox}\n     */\n    get _nameWindow(): never | Window_NameBox {\n        const isNameWindowOK = this._messageWindow._nameBoxWindow;\n        if (!isNameWindowOK) {\n            throw new Error(\n                \"이름 윈도우가 아직 정의되지 않았습니다. DI를 제대로된 시점에 하시기 바랍니다.\"\n            );\n        }\n\n        return this._messageWindow._nameBoxWindow;\n    }\n\n    get _choiceWindow() {\n        return this._messageWindow._choiceListWindow\n            ? this._messageWindow._choiceListWindow\n            : {\n                  windowWidth: () => 0,\n                  windowHeight: () => 0,\n              };\n    }\n\n    save(): void {\n        this._messageWindow.save();\n    }\n\n    restore(): void {\n        this._messageWindow.restore();\n    }\n\n    standardPadding() {\n        // 패딩을 업데이트해야 합니다 (MZ에서 달라진 부분입니다)\n        // 꼭 체크할 필요는 없지만...\n        this._messageWindow.updatePadding();\n        const padding = this._messageWindow.padding || 12;\n\n        return padding;\n    }\n\n    textPadding() {\n        // textPadding()의 구현입니다.\n        return this._messageWindow.itemPadding() || 6;\n    }\n\n    newLineX() {\n        return this._messageWindow.newLineX();\n    }\n\n    fittingHeight(numLines: number) {\n        return this._messageWindow.fittingHeight(numLines);\n    }\n\n    drawTextEx(text: string) {\n        const box = this._messageWindow.textSizeEx(text);\n        return box.width;\n    }\n\n    lineHeight() {\n        return this._messageWindow.lineHeight();\n    }\n\n    /**\n     * TODO: 상속 시, 이 메소드를 오버라이드 하세요.\n     */\n    updatePlacement() {}\n\n    drawMessageFace() {\n        this._messageWindow.drawMessageFace();\n    }\n\n    set x(value: number) {\n        this._messageWindow.x = value;\n    }\n\n    set y(value: number) {\n        this._messageWindow.y = value;\n    }\n\n    set width(value: number) {\n        this._messageWindow.width = value;\n    }\n\n    set height(value: number) {\n        this._messageWindow.height = value;\n    }\n\n    get width() {\n        return this._messageWindow.width;\n    }\n\n    get _width() {\n        return this._messageWindow.width;\n    }\n\n    get height() {\n        return this._messageWindow.height;\n    }\n\n    get _height() {\n        return this._messageWindow.height;\n    }\n\n    canvasToLocalX(x: number) {\n        return x;\n    }\n\n    canvasToLocalY(y: number) {\n        return y;\n    }\n}\n","import { BaseComponent } from \"./BaseComponent\";\n\n/**\n * @class NamwWindowPositionComponent\n * @description\n * 이름 윈도우의 X좌표를 재설정합니다.\n */\nexport class NameWindowPositionComponent extends BaseComponent {\n    setOpacity(value: number) {\n        let opacity = value;\n        if (typeof opacity !== \"number\") {\n            opacity = Number(opacity);\n        }\n        if (isNaN(opacity)) {\n            opacity = 255;\n        }\n        this._nameWindow.opacity = value;\n    }\n\n    updatePositionX() {\n        // 이름 윈도우가 없다면\n        if (!this._nameWindow) {\n            return;\n        }\n\n        const mx = this.x;\n        const w = this.width;\n        const nw = this._nameWindow.width;\n\n        const position = <NameWindowPositon>(\n            RS.MessageSystem.Params.namePositionTypeAtX\n        );\n\n        const nx = RS.MessageSystem.Params.nameWindowX;\n\n        let newX = mx + nx;\n\n        switch (position) {\n            case \"right\":\n                newX = mx + w - nw - nx;\n                break;\n            case \"center\":\n                newX = mx + w / 2 - nw / 2 - nx;\n                break;\n            case \"left\":\n                newX = mx + nx;\n                break;\n            case \"opacity0\":\n                this.setOpacity(0);\n                break;\n            case \"defaultOpacity\":\n                this.setOpacity(RS.MessageSystem.Params.defaultOpacity);\n                break;\n            case \"auto\":\n                newX = this.x + this.newLineX() + nx;\n                break;\n        }\n\n        this._nameWindow.x = newX;\n    }\n\n    updatePositionY() {\n        const ox = RS.MessageSystem.Params.windowOffset.x;\n        const oy = RS.MessageSystem.Params.windowOffset.y;\n        const positionType = $gameMessage.positionType();\n        const ballonOwnerType = $gameMessage.getBalloon();\n\n        this.updatePositionX();\n\n        // 메시지 윈도우가 상단이고, 말풍선 모드가 아니라면\n        if (positionType === 0 && ballonOwnerType === -2) {\n            // 최상단의 위치\n            const topY = 0;\n\n            this._nameWindow.y = topY + oy;\n\n            // 이름 윈도우가 열렸는 지 여부에 따라 메시지 윈도우의 Y 좌표를 설정합니다.\n            this.y = this._nameWindow.isOpen()\n                ? topY +\n                  this._nameWindow.height +\n                  RS.MessageSystem.Params.nameWindowY +\n                  oy\n                : topY + oy;\n        } else {\n            this._nameWindow.y =\n                this.y -\n                this._nameWindow.height -\n                RS.MessageSystem.Params.nameWindowY;\n        }\n    }\n}\n","import { EventEmitter } from \"./EventEmitter\";\n\nexport type ComponentProp = {\n    messageWindow: Window_Message;\n    [key: string]: any;\n};\n\n/**\n * @class Component\n * @description\n * 컴포넌트를 구현하기 위한 클래스입니다.\n */\nexport class Component extends EventEmitter {\n    public name?: string;\n    private props?: ComponentProp;\n\n    constructor(props: ComponentProp) {\n        super();\n        this.init(props);\n    }\n\n    init(props: ComponentProp) {\n        this.props = props;\n\n        this.on(\"ready\", (props: ComponentProp) => this.onReady(props));\n        this.on(\"mounted\", (props: ComponentProp) => this.mounted(props));\n        this.on(\"destroy\", (props: ComponentProp) => this.onDestroy());\n    }\n\n    ready() {\n        this.emit(\"ready\", this.props);\n    }\n\n    destroy() {\n        this.emit(\"destroy\", this.props);\n    }\n\n    execute() {\n        this.emit(\"mounted\", this.props);\n    }\n\n    onReady(props: ComponentProp) {}\n    onDestroy() {}\n    mounted(props: ComponentProp) {}\n}\n","export type Executuor = () => void;\n\ninterface DataLinkSet {\n    callbackFunction: Executuor;\n    active: boolean;\n    isLazy?: boolean;\n}\n\n/**\n * @class ComponentExecutor\n * @author biud436\n * @description\n * ComponentExecutor는 컴포넌트를 샌드박스 환경에서 안전하게 실행합니다.\n * 샌드박스 환경이라는 것은 주요 메서드가 외부와 차단되어, 예외 처리를 통하여 각종 오류를 캐치할 수 있게 합니다.\n */\nexport default class ComponentExecutor {\n    public static INSTANCE: ComponentExecutor;\n    private _components: Record<string, DataLinkSet> = {};\n    private _order: string[] = [];\n\n    public static getInstance(): ComponentExecutor {\n        if (!ComponentExecutor.INSTANCE) {\n            ComponentExecutor.INSTANCE = new ComponentExecutor();\n        }\n        return ComponentExecutor.INSTANCE;\n    }\n\n    public constructor() {}\n\n    public add(name: string, func: Executuor): ComponentExecutor {\n        if (name === \"\") {\n            let startChar = 97; // a\n            let endChar = 122; // z\n            let len = 7; // length of random string\n\n            for (let i = 0; i < len; i++) {\n                name += String.fromCharCode(\n                    Math.floor(Math.random() * (endChar - startChar)) +\n                        startChar\n                );\n            }\n        }\n\n        this._components[name] = <DataLinkSet>{\n            callbackFunction: func,\n            active: false,\n            isLazy: false,\n        };\n\n        this._order.push(name);\n\n        return this;\n    }\n\n    public wrap(name: string, func: Executuor): ComponentExecutor {\n        return this.add(name, func);\n    }\n\n    public addCommand(name: string, func: Executuor): ComponentExecutor {\n        this.add(name, func);\n        this.active(name);\n\n        return this;\n    }\n\n    public lazy(name: string, func: Executuor): ComponentExecutor {\n        this.addCommand(name, func);\n\n        if (this._components[name]) {\n            this._components[name] = {\n                ...this._components[name],\n                isLazy: true,\n            };\n        }\n\n        return this;\n    }\n\n    public get(name: string): Executuor {\n        const prop = this._components[name];\n\n        return prop.callbackFunction;\n    }\n\n    public active(name: string): ComponentExecutor {\n        const prop = this._components[name];\n\n        prop.active = true;\n\n        return this;\n    }\n\n    public deactive(name: string): ComponentExecutor {\n        const prop = this._components[name];\n\n        prop.active = false;\n\n        return this;\n    }\n\n    public ready(name: string): ComponentExecutor {\n        return this.active(name);\n    }\n\n    public executeAll() {\n        try {\n            for (const key of this._order) {\n                const prop = this._components[key];\n\n                if (prop.active && !prop.isLazy) {\n                    const currentCallback = this.get(key);\n\n                    if (currentCallback instanceof Function) {\n                        currentCallback();\n                    }\n                }\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    /**\n     * 테스트 용 커맨드를 실행합니다.\n     */\n    public executeLazyCommandAll() {\n        try {\n            const components: Record<string, DataLinkSet> = {};\n\n            Object.entries(this._components)\n                .filter(([k, v]) => !!v.isLazy)\n                .forEach(([k, v]) => {\n                    components[k] = v;\n                });\n\n            for (const key of this._order) {\n                const prop = components[key];\n\n                if (prop && prop.active) {\n                    const currentCallback = this.get(key);\n\n                    if (currentCallback instanceof Function) {\n                        currentCallback();\n                    }\n                }\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n","import { Rectangle } from \"pixi.js\";\nimport { BalloonWindowTransformComponent } from \"../components/BalloonWindowTransformComponent\";\nimport { BaseComponent } from \"../components/BaseComponent\";\nimport { Component } from \"./Component\";\nimport { NameWindowPositionComponent } from \"../components/NameWindowPositionComponent\";\n\ntype BaseComponentName =\n    | \"NameWindowPositionComponent\"\n    | \"BalloonWindowTransformComponent\";\n\ninterface Class<T> {\n    new (...args: any[]): T;\n}\n\n/**\n *\n */\n// type InjectFunctionWithInfer = <\n//     R = InstanceType<new (rect: Rectangle) => Window_Message>\n// >(\n//     messageWindow: R\n// ) => InstanceType<new (messageWindow: R) => Component>;\ntype InjectFunctionWithInfer = <\n    R = InstanceType<new (rect: Rectangle) => Window_Message>\n>(\n    messageWindow: R\n) => BaseComponent;\n\n/**\n * @function getComponentValue\n * @param item\n * @param key\n * @returns\n */\nfunction getComponentValue<T, K extends keyof T>(item: T, key: K): T[K] {\n    return item[key];\n}\n\n/**\n * @static\n * @class DependencyInjector\n * @description\n * This class allows you to inject components that needs to execute a method that has a certain dependency in the RPG Maker MZ.\n * 또한 해당 컴포넌트를 안전한 샌드박스 환경에서 실행시키기 위해 사용됩니다.\n * 샌드박스 환경이라함은 MZ에서도 오류 없이 안전하게 동작한다는 것을 의미합니다.\n */\nexport class DependencyInjector {\n    public static COMPONENTS?: [\n        BalloonWindowTransformComponent,\n        NameWindowPositionComponent\n    ];\n\n    public static _components: { [key: string]: Component } = {};\n    private static _isDirty: Boolean = false;\n\n    private static _messageWindow?: Window_Message | undefined;\n\n    public static injectMessageWindow(messageWindow: Window_Message) {\n        // 주입할 메시지 윈도우 클래스의 인스턴스를 가져옵니다.\n        DependencyInjector._messageWindow = messageWindow;\n        DependencyInjector.inject(messageWindow);\n    }\n\n    public static ejectMessageWindow() {\n        if (DependencyInjector._isDirty) {\n            DependencyInjector._messageWindow = undefined;\n            DependencyInjector.COMPONENTS = undefined;\n            DependencyInjector._isDirty = false;\n        }\n    }\n\n    /**\n     * inject all components inside the sandbox environment.\n     *\n     * @param messageWindow Specify the message window.\n     * @returns void\n     */\n    private static inject(messageWindow: Window_Message): void {\n        if (DependencyInjector._isDirty) {\n            console.log(\"components are already injected\");\n            return;\n        }\n\n        // 컴포넌트에 메시지 윈도우를 주입합니다.\n        DependencyInjector.COMPONENTS = [\n            new BalloonWindowTransformComponent({ messageWindow }),\n            new NameWindowPositionComponent({ messageWindow }),\n        ];\n\n        DependencyInjector._isDirty = true;\n    }\n\n    /**\n     * get the component by name.\n     *\n     * @param name Specify the component name\n     * @returns Component\n     */\n    public static getComponent<R extends BaseComponentName>(\n        name: R\n    ):\n        | BalloonWindowTransformComponent\n        | NameWindowPositionComponent\n        | undefined {\n        const items = DependencyInjector.COMPONENTS!.filter((e) => {\n            return e instanceof DependencyInjector.getComponentClass(name);\n        });\n\n        return items.pop();\n    }\n\n    static getComponentClass(name: BaseComponentName): typeof BaseComponent {\n        switch (name) {\n            case \"BalloonWindowTransformComponent\":\n                return BalloonWindowTransformComponent;\n            case \"NameWindowPositionComponent\":\n                return NameWindowPositionComponent;\n            default:\n                return BaseComponent;\n        }\n    }\n\n    public static ready() {\n        if (DependencyInjector.COMPONENTS) {\n            DependencyInjector.COMPONENTS.forEach((component) => {\n                component.ready();\n            });\n        }\n    }\n}\n","// 함수 타입\ntype FunctionLike = Function;\n// 이벤트 키 타입\ntype EventKey = string;\n\n/**\n * 이벤트 리스터를 정의합니다.\n */\ntype VMEventListener = { [key: EventKey]: Function[] };\ntype EventNames = \"ready\" | \"mounted\" | \"destroy\";\n\n/**\n * @class EventEmitter\n * @description\n * 이벤트를 전달하기 위한 클래스입니다.\n */\nexport class EventEmitter {\n  constructor(private _listeners: VMEventListener = {}) {\n    this._listeners = {};\n  }\n\n  /**\n   * 호출할 이벤트를 등록합니다.\n   *\n   * @param eventName 호출할 이벤트 명\n   * @param func\n   * @returns\n   */\n  on(eventName: EventNames, func: FunctionLike) {\n    if (!this._listeners[eventName]) {\n      this._listeners[eventName] = [];\n    }\n\n    if (!func) {\n      return;\n    }\n\n    if (func instanceof Function) {\n      this._listeners[eventName].push(func);\n    }\n  }\n\n  /**\n   * 등록된 이벤트를 호출합니다.\n   *\n   * @param eventName 호출할 이벤트 명\n   * @param args\n   * @returns\n   */\n  emit(eventName: EventNames, ...args: any[]) {\n    if (!this._listeners[eventName]) {\n      return;\n    }\n\n    this._listeners[eventName].forEach((func) => {\n      if (!(func instanceof Function)) {\n        console.warn(\"호출된 이벤트 리스너가 함수가 아닙니다.\");\n        return;\n      }\n\n      func(...args);\n    });\n  }\n}\n","export class MessageDesc {\n    public fontFace: string;\n    public fontSize: number;\n    public fontBold: boolean;\n    public fontItalic: boolean;\n    public textColor: string;\n    public outlineColor: string;\n    public outlineWidth: number;\n    public fontGradient: boolean;\n    public highlightTextColor: string | null;\n    public textSpeed: number;\n\n    private _isSaved: boolean;\n\n    constructor() {\n        this.fontFace = \"Nanum Gothic\";\n        this.fontSize = 12;\n        this.fontBold = false;\n        this.fontItalic = false;\n        this.textColor = \"#000\";\n        this.outlineColor = \"#fff\";\n        this.outlineWidth = 1;\n        this.fontGradient = false;\n        this.highlightTextColor = null;\n        this.textSpeed = 1;\n\n        this._isSaved = false;\n    }\n\n    save<T extends Window_Base>(messageWindow: T) {\n        this.fontFace = messageWindow.contents.fontFace;\n        this.fontSize = +messageWindow.contents.fontSize;\n        this.fontBold = messageWindow.contents.fontBold;\n        this.fontItalic = messageWindow.contents.fontItalic;\n        this.textColor = messageWindow.contents.textColor;\n        this.outlineColor = messageWindow.contents.outlineColor;\n        this.outlineWidth = messageWindow.contents.outlineWidth;\n        this.fontGradient = messageWindow.contents.fontGradient;\n        this.highlightTextColor = messageWindow.contents.highlightTextColor;\n\n        if ($gameMessage) {\n            this.textSpeed = $gameMessage.getWaitTime();\n        }\n\n        this._isSaved = true;\n    }\n\n    restore<T extends Window_Base>(messageWindow: T) {\n        if (!this._isSaved) return;\n        if (!(messageWindow.contents instanceof Bitmap)) return;\n        messageWindow.contents.fontFace = this.fontFace;\n        messageWindow.contents.fontSize = this.fontSize;\n        messageWindow.contents.fontBold = this.fontBold;\n        messageWindow.contents.fontItalic = this.fontItalic;\n        messageWindow.contents.textColor = this.textColor;\n        messageWindow.contents.outlineColor = this.outlineColor;\n        messageWindow.contents.outlineWidth = this.outlineWidth;\n        messageWindow.contents.fontGradient = this.fontGradient;\n        messageWindow.contents.highlightTextColor = this.highlightTextColor;\n        if ($gameMessage) {\n            $gameMessage.setWaitTime(this.textSpeed);\n        }\n        this._isSaved = false;\n    }\n}\n","/***\n * 이것은 RPG Maker MV 호환성을 위해 존재하며 타입스크립트로 재작성되어야 합니다.\n */\nimport { Types } from \"../../types/parameters\";\n\ntype TextCodeKey =\n    | \"COLOR\"\n    | \"TEXT_SPEED\"\n    | \"OUTLINE_COLOR\"\n    | \"OUTLINE_WIDTH\"\n    | \"INDENT\"\n    | \"BOLD\"\n    | \"ITALIC\"\n    | \"NAME\"\n    | \"GRADIENT\"\n    | \"PARTY_MEMBER\"\n    | \"PLAYER\"\n    | \"VAR\"\n    | \"ICON\"\n    | \"INCREASE\"\n    | \"DECREASE\"\n    | \"GOLD\"\n    | \"BALLOON\"\n    | \"ALIGN\"\n    | \"NUM\"\n    | \"TEXT_SIZE\"\n    | \"TAB\"\n    | \"CARRIAGE_RETURN\"\n    | \"PLAY_SE\"\n    | \"SHOW_PICTURE\"\n    | \"HIDE_PICTURE\"\n    | \"ITEM\"\n    | \"WEAPON\"\n    | \"ARMOR\"\n    | \"CLASSES\"\n    | \"ENEMY\"\n    | \"STATE\"\n    | \"SKILL\"\n    | \"FACE\"\n    | \"FRIENDLY_TROOPS\"\n    | \"ENEMY_TROOPS\"\n    | \"WAIT_SEC_15\"\n    | \"WAIT_SEC_60\"\n    | \"START_PAUSE\"\n    | \"LINE_SHOW_FAST_LT\"\n    | \"LINE_SHOW_FAST_GT\"\n    | \"PAUSE_SKIP\"\n    | \"BOLD_START\"\n    | \"BOLD_END\"\n    | \"ITALIC_START\"\n    | \"ITALIC_END\"\n    | \"ALIGN_LEFT\"\n    | \"ALIGN_CENTER\"\n    | \"ALIGN_RIGHT\"\n    | \"BOLD_START_CV\"\n    | \"BOLD_END_CV\"\n    | \"ITALIC_START_CV\"\n    | \"ITALIC_END_CV\"\n    | \"ALIGN_CLEAR\"\n    | \"HIGHLIGHT_TEXT_COLOR\"\n    | \"FACE_DIRECTION\";\n\ninterface TextCodeEnum {\n    ENUM: Record<TextCodeKey, number>;\n}\n\ntype TextCode = Record<string, any> & TextCodeEnum;\n\nconst pluginParams = $plugins.filter((i) => {\n    return i.description.contains(\"<RS_MessageSystem>\");\n});\n\nconst pluginName = <Types.PluginName>(\n    (pluginParams.length > 0 && pluginParams[0].name)\n);\nconst parameters = <Types.PluginParameters>(\n    (pluginParams.length > 0 && pluginParams[0].parameters)\n);\n\nconst RS = <RS>{\n    MessageSystem: <IMessageSytem>{},\n};\n\nRS.MessageSystem.jsonParse = function (str: string) {\n    const retData = JSON.parse(str, (k, v) => {\n        try {\n            return RS.MessageSystem.jsonParse(v);\n        } catch (e) {\n            return v;\n        }\n    });\n\n    return retData;\n};\n\n/**\n * @method popParameter\n */\nRS.MessageSystem.popParameter = function (...args: any[]) {\n    const k = Object.keys(args);\n    let lastUsed = \"\";\n\n    while (k.length > 0) {\n        lastUsed = args[parseInt(<string>k.pop())];\n\n        // @ts-ignore\n        if (parameters[lastUsed]) return parameters[lastUsed];\n    }\n\n    return \"\";\n};\n\nRS.MessageSystem.Reg = {\n    Default: [],\n    Group: [],\n    Korean: [],\n    Chinese: [],\n    English: [],\n    Japanese: [],\n};\n\nenum MessageParams {\n    FACE_START_ORIGIN_X = 168,\n    NAME_WINDOW_WIDTH = 140,\n    NAME_WINDOW_ROWS = 1,\n    FONT_SIZE = 28,\n    STD_PADDING = 18,\n}\n\nRS.MessageSystem.Params = {\n    faceStartOriginX: MessageParams.FACE_START_ORIGIN_X,\n    nameWindowWidth: MessageParams.NAME_WINDOW_WIDTH,\n    nameWindowRows: MessageParams.NAME_WINDOW_ROWS,\n    FONT_SIZE: MessageParams.FONT_SIZE,\n    STD_PADDING: MessageParams.STD_PADDING,\n    isValidShakingChoice: false,\n    fontSize: Number(\n        RS.MessageSystem.popParameter(\"Font Size\", \"글꼴 크기\") || 28\n    ),\n    textSpeed: Number(\n        RS.MessageSystem.popParameter(\"Text Speed\", \"기본 텍스트 출력 속도\") ||\n            0\n    ),\n    minFontSize: Number(\n        RS.MessageSystem.popParameter(\"Text Min Size\", \"폰트 최소 크기\") || 24\n    ),\n    maxFontSize: Number(\n        RS.MessageSystem.popParameter(\"Text Max Size\", \"폰트 최대 크기\") || 96\n    ),\n    textStartX: Number(\n        RS.MessageSystem.popParameter(\"Text Start X\", \"텍스트 시작 X\")\n    ),\n    numVisibleRows: Number(\n        RS.MessageSystem.popParameter(\"numVisibleRows\", \"라인 갯수\") || 4\n    ),\n    gradientColor1: String(\n        RS.MessageSystem.popParameter(\n            \"gradientColor1\",\n            \"그레디언트 시작 색상\"\n        ) || \"#FFFFFF\"\n    ),\n    gradientColor2: String(\n        RS.MessageSystem.popParameter(\n            \"gradientColor2\",\n            \"그레디언트 중간 색상\"\n        ) || \"#F29661\"\n    ),\n    gradientColor3: String(\n        RS.MessageSystem.popParameter(\"gradientColor3\", \"그레디언트 끝 색상\") ||\n            \"#CC3D3D\"\n    ),\n    nameWindowX: Number(\n        RS.MessageSystem.popParameter(\"Name Window X\", \"이름 윈도우 X\") || 0\n    ),\n    nameWindowY: Number(\n        RS.MessageSystem.popParameter(\"Name Window Y\", \"이름 윈도우 Y\") || 0\n    ),\n    nameWindowStdPadding: Number(\n        RS.MessageSystem.popParameter(\n            \"Name Window Inner Padding\",\n            \"이름 윈도우 안쪽 여백\"\n        ) || 18\n    ),\n    namePositionTypeAtX:\n        RS.MessageSystem.popParameter(\n            \"Name Window Position\",\n            \"이름 윈도우 위치\"\n        ) || \"left\",\n    faceOX: Number(\n        RS.MessageSystem.popParameter(\"Big Face OX\", \"큰 페이스칩 OX\") || 0\n    ),\n    faceOY: Number(\n        RS.MessageSystem.popParameter(\"Big Face OY\", \"큰 페이스칩 OY\") || 0\n    ),\n    faceSide: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Show Big Face Back\",\n            \"대화창 뒤에 얼굴 표시\"\n        ) === \"true\" || false\n    ),\n    WIDTH: MessageParams.FONT_SIZE * 6 + MessageParams.STD_PADDING,\n    HEIGHT: MessageParams.FONT_SIZE + MessageParams.STD_PADDING / 2,\n    TabSize: Number(RS.MessageSystem.popParameter(\"Tab Size\", \"탭 크기\")),\n    backOpacity: Number(\n        RS.MessageSystem.popParameter(\"back Opacity\", \"배경 그림의 투명도\")\n    ),\n    translucentOpacity: Number(\n        RS.MessageSystem.popParameter(\"translucent Opacity\", \"반투명도\")\n    ),\n    defaultOpacity: Number(\n        RS.MessageSystem.popParameter(\"default Opacity\", \"기본 투명도\")\n    ),\n    contentsOpacity: Number(\n        RS.MessageSystem.popParameter(\"contents Opacity\", \"내용의 투명도\")\n    ),\n    defaultOutlineWidth: Number(\n        RS.MessageSystem.popParameter(\"default outline width\", \"테두리 크기\")\n    ),\n    defaultOutlineColor:\n        RS.MessageSystem.popParameter(\"default outline Color\", \"테두리 색상\") ||\n        \"white\",\n    fonts: {\n        default: \"rmmz-mainfont\",\n    },\n    isTempSpriteContainerVisibility: false,\n    lineHeight: 36,\n    windowOffset: new Point(-4, -4),\n    fontSmoothingEnabled: true,\n    customFont: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Using Custom Font\",\n            \"사용자 지정 폰트 사용 여부\"\n        ) === \"true\"\n    ),\n    customFontName: String(\n        RS.MessageSystem.popParameter(\n            \"Custom Font Name\",\n            \"사용자 지정 폰트명\"\n        ) || \"GameFont\"\n    ),\n    customFontSrc: String(\n        RS.MessageSystem.popParameter(\n            \"Custom Font Src\",\n            \"사용자 지정 폰트 경로\"\n        ) || \"fonts/mplus-1m-regular.ttf\"\n    ),\n    windowskin:\n        RS.MessageSystem.popParameter(\n            \"Default Windowskin\",\n            \"기본 윈도우스킨\"\n        ) || \"Window\",\n    windowskinForNameWindow:\n        RS.MessageSystem.popParameter(\"Name Windowskin\", \"이름 윈도우스킨\") ||\n        \"Window\",\n    choiceWindowStyle: String(\n        RS.MessageSystem.popParameter(\"Choice Style\", \"선택지 스타일\") ||\n            \"default\"\n    ),\n    defaultChoicePostion: parameters[\"Default Choice Position\"] || \"right\",\n    exTextColors: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\"Text Color\", \"텍스트 색상\")\n    ),\n    isPlayTextSound: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Text Sound ON/OFF\",\n            \"텍스트 효과음 재생 여부\"\n        ) === \"true\"\n    ),\n    pathTextSound: String(\n        RS.MessageSystem.popParameter(\"Text Sound\", \"텍스트 효과음\") ||\n            \"Cursor1.ogg\"\n    ),\n    textSoundEval1: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Execution Condition\",\n            \"텍스트 효과음 실행 조건\"\n        ) || \"Math.randomInt(100) < 45\"\n    ),\n    textSoundEval2: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Volume\",\n            \"텍스트 효과음 볼륨\"\n        ) || \"(0.4 + (RS.MessageSystem.randomNormal(0.8)[0])).clamp(0.0, 0.8)\"\n    ),\n    textSoundInterval: parseInt(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Interval\",\n            \"텍스트 사운드 재생 간격\"\n        )\n    ),\n    textSoundPoolSize: parseInt(\n        RS.MessageSystem.popParameter(\n            \"텍스트 사운드 풀 크기\",\n            \"Text Sound Pool Size\"\n        ) || 6\n    ),\n    langCode:\n        RS.MessageSystem.popParameter(\"언어 코드\", \"Language Code\") || \"ko\",\n    preloadWindowskins: JSON.parse(parameters[\"preload windowskin\"] || \"[]\"),\n    isParagraphMinifier: Boolean(parameters[\"Paragraph Minifier\"] === \"true\"),\n    gradientStyle: parameters[\"Gradient Style\"],\n    faceOpacity: parseInt(parameters[\"face Opacity\"] || 21),\n    faceDirection: parseInt(parameters[\"face Direction\"] || 0),\n    DEBUG: (() => {\n        return Utils.isNwjs() && Utils.isOptionValid(\"test\");\n    })(),\n};\n\n(() => {\n    const systemFonts: Types.SystemFonts = RS.MessageSystem.jsonParse(\n        parameters[\"systemFont\"]\n    );\n    if (!RS.MessageSystem.Params.fonts) return;\n\n    // ! 여기서부터 변환 시작해야함\n    systemFonts.settings.forEach((i) => {\n        const params = <{ [key: string]: any } | any>{};\n        params[i.languageCode] = i.fontName;\n        Object.assign(RS.MessageSystem.Params.fonts as {}, params);\n    });\n})();\n\n//============================================================================\n// Lazy Initialize Parameters (느린 초기화)\n//============================================================================\n\nvar alias_Game_Temp_initialize = Game_Temp.prototype.initialize;\nGame_Temp.prototype.initialize = function () {\n    alias_Game_Temp_initialize.call(this);\n    RS.MessageSystem.Params.windowWidth =\n        eval(parameters[\"Window Width\"]) || Graphics.boxWidth;\n};\n\n//============================================================================\n// Multiple Language supports\n//============================================================================\n\nRS.MessageSystem.Reg.KoreanEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z가-힣]+[!]*/i;\nRS.MessageSystem.Reg.ChineseEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z一-鼣]+[!]*/i;\nRS.MessageSystem.Reg.EnglishEscapeCode = /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z]+[!]*/i;\nRS.MessageSystem.Reg.JapaneseEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z\\u3040-\\u309F\\u30A0-\\u30FF\\u3300-\\u33FF\\u4E00-\\u9FFF\\uFF00-\\uFFEF]+[!]*/i;\nRS.MessageSystem.Reg.defaultEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z가-힣]+[!]*/i;\n\nRS.MessageSystem.TextCodes = (function () {\n    const rowData = RS.MessageSystem.popParameter(\"Text Code\", \"텍스트 코드\");\n    const data = JSON.parse(rowData);\n    const retData = <TextCode>{};\n\n    retData.Korean = [undefined].concat(JSON.parse(data.Korean));\n    retData.Chinese = [undefined].concat(JSON.parse(data.Chinese));\n    retData.English = [undefined].concat(JSON.parse(data.English));\n    retData.Japanese = [undefined].concat(JSON.parse(data.Japanese));\n\n    return retData;\n})();\n\nRS.MessageSystem.TextCodes.Main = [];\n\nRS.MessageSystem.TextCodes.ENUM = {\n    COLOR: 1,\n    TEXT_SPEED: 2,\n    OUTLINE_COLOR: 3,\n    OUTLINE_WIDTH: 4,\n    INDENT: 5,\n    BOLD: 6,\n    ITALIC: 7,\n    NAME: 8,\n    GRADIENT: 9,\n    PARTY_MEMBER: 10,\n    PLAYER: 11,\n    VAR: 12,\n    ICON: 13,\n    INCREASE: 14,\n    DECREASE: 15,\n    GOLD: 16,\n    BALLOON: 17,\n    ALIGN: 18,\n    NUM: 19,\n    TEXT_SIZE: 20,\n    TAB: 21,\n    CARRIAGE_RETURN: 22,\n    PLAY_SE: 23,\n    SHOW_PICTURE: 24,\n    HIDE_PICTURE: 25,\n    ITEM: 26,\n    WEAPON: 27,\n    ARMOR: 28,\n    CLASSES: 29,\n    ENEMY: 30,\n    STATE: 31,\n    SKILL: 32,\n    FACE: 33,\n    FRIENDLY_TROOPS: 34, // 여긴 2018.01.14에 추가됨\n    ENEMY_TROOPS: 35,\n    WAIT_SEC_15: 36, // .\n    WAIT_SEC_60: 37, // |\n    START_PAUSE: 38, // !\n    LINE_SHOW_FAST_LT: 39, // <\n    LINE_SHOW_FAST_GT: 40, // >\n    PAUSE_SKIP: 41, // ^\n    BOLD_START: 42, // <B>\n    BOLD_END: 43, // </B>\n    ITALIC_START: 44,\n    ITALIC_END: 45,\n    ALIGN_LEFT: 46,\n    ALIGN_CENTER: 47,\n    ALIGN_RIGHT: 48,\n    BOLD_START_CV: 49,\n    BOLD_END_CV: 50,\n    ITALIC_START_CV: 51,\n    ITALIC_END_CV: 52,\n    ALIGN_CLEAR: 53, // AEND\n    HIGHLIGHT_TEXT_COLOR: 54,\n    FACE_DIRECTION: 55,\n};\n\n/**\n * 주어진 ID 값으로 텍스트 코드를 현지화하여 반환합니다.\n * @param {Number} idx\n */\nRS.MessageSystem.getTextCode = function (idx: number) {\n    const langCode = RS.MessageSystem.Params.langCode;\n\n    if (langCode.match(/ko/)) {\n        return RS.MessageSystem.TextCodes[\"Korean\"][idx];\n    }\n    if (langCode.match(/zh/)) {\n        return RS.MessageSystem.TextCodes[\"Chinese\"][idx];\n    }\n    if (langCode.match(/en/)) {\n        return RS.MessageSystem.TextCodes[\"English\"][idx];\n    }\n    if (langCode.match(/ja/)) {\n        return RS.MessageSystem.TextCodes[\"Japanese\"][idx];\n    }\n    return RS.MessageSystem.TextCodes[\"English\"][idx];\n};\n\n/**\n * 노트 태그를 읽습니다.\n * @memberof RS.MessageSystem\n * @param {Number} eventId\n * @return {Object} meta\n */\nRS.MessageSystem.getEventComments = function (eventId: number, index: number) {\n    let data = <Record<any, any>>{\n        note: \"\",\n        meta: {},\n    };\n    try {\n        // 리스트를 가져옵니다.\n        let list = $gameMap.event(eventId).list();\n\n        // 바로 이전 인덱스에 노트 태그가 있었는 지 확인합니다.\n        if (index < 0) index = 0;\n\n        // 부모 이벤트 없이 호출되는 공통 이벤트가 있는 지 확인합니다.\n        if (eventId <= 0) {\n            var commonEvent = $gameTemp.reservedCommonEvent();\n            if (commonEvent) {\n                list = commonEvent.list;\n                // 공통 이벤트는 한 번 설치된 후 클리어되므로 목록을 두 번 읽을 순 없으므로 예외 처리\n                if (!list) {\n                    return data;\n                }\n            }\n        }\n\n        let param = list[index];\n\n        // 코멘트를 읽어옵니다.\n        while (param && [108, 408].contains(param.code)) {\n            data.note += param.parameters[0] + \"\\r\\n\";\n            index--;\n            param = list[index];\n        }\n\n        if (param && param.code === 108) {\n            data.note += param.parameters[0] + \"\\r\\n\";\n\n            index--;\n            param = list[index];\n\n            while (param.code === 408) {\n                data.note += param.parameters[0] + \"\\r\\n\";\n                index--;\n                param = list[index];\n            }\n\n            if (param.code === 108) {\n                data.note += param.parameters[0] + \"\\r\\n\";\n            }\n        }\n\n        // 노트 태그를 추출합니다 (DataManager.extractMetadata의 변형입니다)\n        const re = /<([^<>:]+)(:?)([^>]*)>/g;\n        data.meta = {};\n        for (;;) {\n            const match = re.exec(data.note);\n            if (match) {\n                if (match[2] === \":\") {\n                    data.meta[match[1].trim()] = match[3];\n                } else {\n                    data.meta[match[1].trim()] = true;\n                }\n            } else {\n                break;\n            }\n        }\n    } catch (e) {\n        // 리스트를 읽지 못할 경우 try-catch 문에 의해 예외 처리가 됩니다.\n        return {\n            note: \"\",\n            meta: {},\n        };\n    }\n    return data.meta;\n};\n\n(() => {\n    \"use strict\";\n    var regData = [\"Korean\", \"English\", \"Chinese\", \"Japanese\"];\n    regData.forEach(function (e, i, a) {\n        var tcGroup = RS.MessageSystem.TextCodes[e];\n        tcGroup = tcGroup.map((e: any, i: number, a: any[]) => {\n            if (e === undefined) return;\n            var data = [];\n            var ret = \"\";\n            for (var str of e) {\n                if (/[a-zA-Z]/i) {\n                    data.push(str);\n                    continue;\n                }\n                var text = str.charCodeAt().toString(16);\n                data.push(\"\\\\u\" + \"{\" + text + \"}\");\n            }\n            ret = data.join(\"\");\n            return ret;\n        });\n        RS.MessageSystem.Reg[e][0] = undefined;\n        RS.MessageSystem.Reg[e][1] = new RegExp(\n            `(?:\\x1bC|\\x1b${tcGroup[1]})\\\\[(.+?)\\\\]`,\n            \"gi\"\n        ); // 색\n        RS.MessageSystem.Reg[e][2] = new RegExp(\n            `\\x1b${tcGroup[2]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 속도\n        RS.MessageSystem.Reg[e][3] = new RegExp(\n            `\\x1b${tcGroup[3]}\\\\[(.+?)\\\\]`,\n            \"gi\"\n        ); // 테두리색\n        RS.MessageSystem.Reg[e][4] = new RegExp(\n            `\\x1b${tcGroup[4]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 테두리크기\n        RS.MessageSystem.Reg[e][5] = new RegExp(\n            `\\x1b${tcGroup[5]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 들여쓰기\n        RS.MessageSystem.Reg[e][6] = new RegExp(`\\x1b${tcGroup[6]}`, \"gi\"); // 굵게!\n        RS.MessageSystem.Reg[e][7] = new RegExp(`\\x1b${tcGroup[7]}`, \"gi\"); // 이탤릭!\n        RS.MessageSystem.Reg[e][8] = new RegExp(\n            `\\x1b${tcGroup[8]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 이름\n        RS.MessageSystem.Reg[e][9] = new RegExp(\n            `\\x1b${tcGroup[9]}\\\\<(.+)\\\\>`,\n            \"gi\"\n        ); // 그레디언트\n        RS.MessageSystem.Reg[e][10] = new RegExp(\n            `(?:\\x1bP|\\x1b${tcGroup[10]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 파티원\n        RS.MessageSystem.Reg[e][11] = new RegExp(\n            `(?:\\x1bN|\\x1b${tcGroup[11]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 주인공\n        RS.MessageSystem.Reg[e][12] = new RegExp(\n            `(?:\\x1bV|\\x1b${tcGroup[12]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 변수\n        RS.MessageSystem.Reg[e][13] = new RegExp(\n            `(?:\\x1bI|\\x1b${tcGroup[13]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 아이콘\n        RS.MessageSystem.Reg[e][14] = new RegExp(\n            `(?:\\x1b{|\\x1b${tcGroup[14]})`,\n            \"gi\"\n        ); // 확대!\n        RS.MessageSystem.Reg[e][15] = new RegExp(\n            `(?:\\x1b}|\\x1b${tcGroup[15]})`,\n            \"gi\"\n        ); // 축소!\n        RS.MessageSystem.Reg[e][16] = new RegExp(\n            `(?:\\x1bG|\\x1b${tcGroup[16]})`,\n            \"gi\"\n        ); // 골드\n        RS.MessageSystem.Reg[e][17] = new RegExp(\n            `\\x1b${tcGroup[17]}\\\\[(.*?)\\\\]`,\n            \"gi\"\n        ); // 말풍선\n        RS.MessageSystem.Reg[e][18] = new RegExp(\n            `\\x1b${tcGroup[18]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 정렬자\n        RS.MessageSystem.Reg[e][19] = new RegExp(\n            `\\x1b${tcGroup[19]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 숫자\n        RS.MessageSystem.Reg[e][20] = new RegExp(\n            `\\x1b${tcGroup[20]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 크기\n        RS.MessageSystem.Reg[e][21] = new RegExp(`\\x1b${tcGroup[21]}`, \"gi\"); // r\n        RS.MessageSystem.Reg[e][22] = new RegExp(`\\x1b${tcGroup[22]}`, \"gi\"); // t\n        RS.MessageSystem.Reg[e][23] = new RegExp(\n            `\\x1b${tcGroup[23]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 효과음\n        RS.MessageSystem.Reg[e][24] = new RegExp(\n            `\\x1b${tcGroup[24]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 그림 표시\n        RS.MessageSystem.Reg[e][25] = new RegExp(\n            `\\x1b${tcGroup[25]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 그림 제거\n        RS.MessageSystem.Reg[e][26] = new RegExp(\n            `(?:\\x1b${tcGroup[26]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 아이템\n        RS.MessageSystem.Reg[e][27] = new RegExp(\n            `(?:\\x1b${tcGroup[27]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 무기구\n        RS.MessageSystem.Reg[e][28] = new RegExp(\n            `(?:\\x1b${tcGroup[28]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 방어구\n        RS.MessageSystem.Reg[e][29] = new RegExp(\n            `(?:\\x1b${tcGroup[29]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 직업\n        RS.MessageSystem.Reg[e][30] = new RegExp(\n            `(?:\\x1b${tcGroup[30]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 적군\n        RS.MessageSystem.Reg[e][31] = new RegExp(\n            `(?:\\x1b${tcGroup[31]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 상태\n        RS.MessageSystem.Reg[e][32] = new RegExp(\n            `(?:\\x1b${tcGroup[32]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 스킬\n        RS.MessageSystem.Reg[e][33] = new RegExp(\n            `\\x1b${tcGroup[33]}\\\\<(.*)\\\\>`,\n            \"gi\"\n        ); // 얼굴\n        RS.MessageSystem.Reg[e][34] = new RegExp(\n            `(?:\\x1b${tcGroup[34]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 아군\n        RS.MessageSystem.Reg[e][35] = new RegExp(\n            `(?:\\x1b${tcGroup[35]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 적군\n\n        RS.MessageSystem.Reg[e][36] = new RegExp(`\\x1b${tcGroup[36]}`, \"gi\"); // [.]\n        RS.MessageSystem.Reg[e][37] = new RegExp(`\\x1b${tcGroup[37]}`, \"gi\"); // [|]\n        RS.MessageSystem.Reg[e][38] = new RegExp(`\\x1b${tcGroup[38]}`, \"gi\"); // [!]\n        RS.MessageSystem.Reg[e][39] = new RegExp(`\\x1b${tcGroup[39]}`, \"gi\"); // [<]\n        RS.MessageSystem.Reg[e][40] = new RegExp(`\\x1b${tcGroup[40]}`, \"gi\"); // [>]\n        RS.MessageSystem.Reg[e][41] = new RegExp(`\\x1b${tcGroup[41]}`, \"gi\"); // [\\^]\n\n        RS.MessageSystem.Reg[e][42] = new RegExp(`\\x1b${tcGroup[42]}`, \"gi\"); // AS굵게!\n        RS.MessageSystem.Reg[e][43] = new RegExp(`\\x1b${tcGroup[43]}`, \"gi\"); // AE굵게!\n        RS.MessageSystem.Reg[e][44] = new RegExp(`\\x1b${tcGroup[44]}`, \"gi\"); // AS이탤릭!\n        RS.MessageSystem.Reg[e][45] = new RegExp(`\\x1b${tcGroup[45]}`, \"gi\"); // AE이탤릭!\n\n        RS.MessageSystem.Reg[e][46] = new RegExp(`(?:<${tcGroup[46]}>)`, \"gi\"); // LEFT\n        RS.MessageSystem.Reg[e][47] = new RegExp(`(?:<${tcGroup[47]}>)`, \"gi\"); // CENTER\n        RS.MessageSystem.Reg[e][48] = new RegExp(`(?:<${tcGroup[48]}>)`, \"gi\"); // RIGHT\n\n        RS.MessageSystem.Reg[e][49] = new RegExp(\n            `(?:<[${tcGroup[49]}]>)`,\n            \"gi\"\n        ); // B\n        RS.MessageSystem.Reg[e][50] = new RegExp(\n            `(?:<\\/[${tcGroup[50]}]>)`,\n            \"gi\"\n        ); // B\n        RS.MessageSystem.Reg[e][51] = new RegExp(\n            `(?:<[${tcGroup[51]}]>)`,\n            \"gi\"\n        ); // I\n        RS.MessageSystem.Reg[e][52] = new RegExp(\n            `(?:<\\/[${tcGroup[52]}]>)`,\n            \"gi\"\n        ); // I\n        RS.MessageSystem.Reg[e][53] = new RegExp(`\\x1b${tcGroup[53]}`, \"gi\"); // AEND : ALIGN_CLEAR\n        RS.MessageSystem.Reg[e][54] = new RegExp(\n            `\\x1b${tcGroup[54]}\\\\[(.*)\\\\]`,\n            \"gi\"\n        ); // \\배경색[색상] \\HC[색상]\n        RS.MessageSystem.Reg[e][55] = new RegExp(\n            `\\x1b${tcGroup[55]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // \\FD\n    });\n})();\n\nRS.MessageSystem.initSystem = function () {\n    var type = RS.MessageSystem.Params.langCode;\n    var ret = false;\n    if (type.match(/ko/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Korean;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.KoreanEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Korean;\n        ret = true;\n    }\n    if (type.match(/zh/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Chinese;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.ChineseEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Chinese;\n        ret = true;\n    }\n    if (type.match(/en/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.EnglishEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\n        ret = true;\n    }\n    if (type.match(/ja/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Japanese;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.JapaneseEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Japanese;\n        ret = true;\n    }\n    if (ret === false) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.EnglishEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\n    }\n};\n\n//=============================================================================\n// Color\n//=============================================================================\n\ninterface IColor {\n    getColor(c: number): string;\n    baseColor: string;\n    getBaseColor(): string;\n    getUserCustomColor(str: string): string;\n    gmColor(str: string): string;\n}\n\nexport const Color = <IColor>{};\n\nColor.getColor = function (n: number) {\n    var r = n & 255;\n    var g = (n >> 8) & 255;\n    var b = (n >> 16) & 255;\n    var result = `rgba(${r},${g},${b},1)`;\n    return result;\n};\n\nColor.baseColor = Color.getColor(16777215);\n\nColor.getBaseColor = function () {\n    return Color.baseColor;\n};\n\nColor.getUserCustomColor = function (str) {\n    \"use strict\";\n\n    var obj: any[] = RS.MessageSystem.Params.exTextColors;\n    var ret = str;\n\n    if (!(typeof obj[0] === \"object\")) return ret;\n    if (!obj[0].hasOwnProperty(\"Color Name\")) return ret;\n\n    obj.forEach((e: any, i: number, arr: any[]) => {\n        if (e[\"Color Name\"] === str) {\n            var r = parseInt(e[\"Red\"]) || 0;\n            var g = parseInt(e[\"Green\"]) || 0;\n            var b = parseInt(e[\"Blue\"]) || 0;\n            var a = parseFloat(e[\"Alpha\"]) || 1.0;\n\n            ret = `rgba(${r},${g},${b},${a})`;\n        }\n    });\n\n    return ret;\n};\n\nconst KOREAN_COLORS: Record<string, string> = {\n    청록: \"rgba(0,255,255,1)\",\n    청록색: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    검은색: \"rgba(0,0,0,1)\",\n    검정: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    파란색: \"rgba(0,0,255,1)\",\n    파랑: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    짙은회색: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    자홍색: \"rgba(255,0,255,1)\",\n    자홍: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    회색: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    녹색: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    밝은녹색: \"rgba(0,255,0,1)\",\n    라임: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    밝은회색: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    밤색: \"rgba(128,0,0,1)\",\n    마룬: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    감청색: \"rgba(0,0,128,1)\",\n    네이비: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    황록색: \"rgba(128,128,0,1)\",\n    올리브: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    주황색: \"rgba(255,160,64,1)\",\n    주황: \"rgba(255,160,64,1)\",\n    오렌지: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    보라색: \"rgba(128,0,128,1)\",\n    보라: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    빨간색: \"rgba(255,0,0,1)\",\n    빨강: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    은색: \"rgba(192,192,192,1)\",\n    은: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    민트색: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    흰색: \"rgba(255,255,255,1)\",\n    흰: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    노란색: \"rgba(255,255,0,1)\",\n    노랑: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst CHINESE_COLOR: Record<string, string> = {\n    水色: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    黑色: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    蓝色: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    深灰色: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    紫红色: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    灰色: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    绿色: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    浅绿色: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    浅灰色: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    栗色: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    绀青色: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    黄绿色: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    橙黄色: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    紫色: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    红色: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    银白色: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    水鸭色: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    白色: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    黄色: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst ENGLISH_COLOR: Record<string, string> = {\n    AQUA: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    BLACK: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    BLUE: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    DKGRAY: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    FUCHSIA: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    GRAY: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    GREEN: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    LIME: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    LTGRAY: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    MAROON: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    NAVY: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    OLIVE: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    ORANGE: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    PURPLE: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    RED: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    SILVER: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    TEAL: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    WHITE: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    YELLOW: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst JAPANESE_COLOR: Record<string, string> = {\n    水色: \"rgba(0,255,255,1)\",\n    アクア色: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    黑色: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    靑色: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    ふか灰色: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    紫紅色: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    灰色: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    綠色: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    黃綠: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    鼠色: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    \"―色\": \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    群青色: \"rgba(0,0,128,1)\",\n    ネイビー: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    黃綠色: \"rgba(128,128,0,1)\",\n    オリーブ色: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    橙色: \"rgba(255,160,64,1)\",\n    オレンジ色: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    紫色: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    赤色: \"rgba(255,0,0,1)\",\n    レッド: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    銀色: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    ミント色: \"rgba(0,128,128,1)\",\n    薄荷色: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    白色: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    黃色: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nRS.MessageSystem.getKoreanColor = function (str: string) {\n    let color = KOREAN_COLORS[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"기본\", \"기본색\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getChineseColor = function (str: string) {\n    let color = CHINESE_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"通常\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getEnglishColor = function (str: string) {\n    let color = ENGLISH_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if (\"c_normal\" === str) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getJapaneseColor = function (str: string) {\n    let color = JAPANESE_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"基本色\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getBrowser = function () {\n    /* Refer to https://stackoverflow.com/a/16938481 */\n    var ua = navigator.userAgent,\n        tem,\n        M =\n            ua.match(\n                /(opera|chrome|edge|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i\n            ) || [];\n\n    if (/trident/i.test(M[1])) {\n        tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n\n        return {\n            name: \"IE\",\n            version: tem[1] || \"\",\n        };\n    }\n\n    if (M[1] === \"Chrome\") {\n        tem = ua.match(/\\bOPR\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: \"Opera\",\n                version: tem[1],\n            };\n        }\n\n        tem = ua.match(/\\bEdge\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: \"Edge\",\n                version: tem[1],\n            };\n        }\n    }\n\n    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \"-?\"];\n\n    if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {\n        M.splice(1, 1, tem[1]);\n    }\n\n    return {\n        name: M[0],\n        version: M[1],\n    };\n};\n\nColor.gmColor = function (str: string) {\n    const type = <string>RS.MessageSystem.Params.langCode;\n    if (type.match(/ko/)) {\n        return RS.MessageSystem.getKoreanColor(str);\n    }\n    if (type.match(/zh/)) {\n        return RS.MessageSystem.getChineseColor(str);\n    }\n    if (type.match(/en/)) {\n        return RS.MessageSystem.getEnglishColor(str);\n    }\n    if (type.match(/ja/)) {\n        return RS.MessageSystem.getJapaneseColor(str);\n    }\n    return RS.MessageSystem.getEnglishColor(str);\n};\n\nwindow.RS = RS;\n","/// <reference types=\"../types/my-types\" />\n/// <reference types=\"../types/lunalite-pixi-mz\" />\nimport ComponentExecutor from \"./core/ComponentExecutor\";\nimport { getBitmapCommand } from \"./commands/Bitmap.command\";\nimport { getMainCommand } from \"./commands/Main.command\";\nimport { getGameCommandCommand } from \"./commands/GameMessage.command\";\nimport { getSpriteBattlerCommand } from \"./commands/SpriteBattler.command\";\nimport { getWindowBaseCommand } from \"./commands/WindowBase.command\";\nimport { getWindowMessageCommand } from \"./commands/WindowMessage.command\";\nimport { getGameInterpreterCommand } from \"./commands/GameInterpreter.command\";\nimport { getWindowNameBoxCommand } from \"./commands/WindowNameBox.command\";\nimport { getGameTempCommand } from \"./commands/GameTemp.command\";\nimport { getGameMapCommand } from \"./commands/GameMap.command\";\nimport { getDefaultCommandTest } from \"./__test__/DefaultCommand.test\";\n\nconst executor = ComponentExecutor.getInstance();\n\nexecutor\n    // commands\n    .addCommand(\"bitmap\", getBitmapCommand())\n    .addCommand(\"Game_Message\", getGameCommandCommand())\n    .addCommand(\"Sprite_Battler\", getSpriteBattlerCommand())\n    .addCommand(\"Window_Base\", getWindowBaseCommand())\n    .addCommand(\"Window_Message\", getWindowMessageCommand())\n    .addCommand(\"Game_Interpreter\", getGameInterpreterCommand())\n    .addCommand(\"Window_NameBox\", getWindowNameBoxCommand())\n    .addCommand(\"Game_Temp\", getGameTempCommand())\n    .addCommand(\"Game_Map\", getGameMapCommand())\n    .addCommand(\"main\", getMainCommand())\n    .lazy(\"test\", getDefaultCommandTest())\n    // execute commands\n    .executeAll();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["$gameMessage","clear","add","alias_Bitmap_initialize","Bitmap","prototype","initialize","width","height","call","this","fontBold","fontGradient","highlightTextColor","setGradient","text","color1","color2","color3","tx","ty","context","_context","tWidth","measureTextWidth","save","gradient","createLinearGradient","addColorStop","restore","_baseTexture","update","setGradientStyle","RS","MessageSystem","Params","lineHeight","grd","style","gradientStyle","contains","ws","hs","createRadialGradient","_makeFontNameText","fontItalic","fontSize","fontFace","_drawTextBody","maxWidth","imageSmoothingEnabled","fontSmoothingEnabled","gradientColor1","gradientColor2","gradientColor3","fillStyle","textColor","fillText","Game_Interpreter","processMessageParams","eventId","index","meta","getEventComments","windowskin","trim","ImageManager","loadSystem","windowskinForNameWindow","parseInt","numVisibleRows","textStartX","faceOX","Number","faceOY","faceSide","Boolean","defaultOpacity","isPlayTextSound","textSpeed","isValidMultiLine","codes","prevCode","lineCount","i","currentCommand","_list","_index","code","push","getMaxLine","choiceWindowStyle","command101","params","isBusy","$gameMap","setMsgEvent","character","_eventId","setFaceImage","setBackground","setPositionType","setSpeakerName","isMultiLine","multiLineAddMessage","nextEventCode","parameters","setupChoices","setupNumInput","setupItemChoice","setWaitMode","initLineHeight","_texts","length","addLineHeight","_lineHeight","alias_Game_Map_initialize","Game_Map","_msgOwner","$gamePlayer","_msgEvent","getMsgOwner","setMsgOwner","o","setBalloonPatternHeight","tileHeight","getMsgEvent","ev","alias_Game_Message_clear","Game_Message","_waitTime","_gradientText","_balloon","_align","_balloonPatternHeight","_lastAlign","setWaitTime","time","setGradientText","getWaitTime","getGradientText","_maxLine","setMaxLine","maxLine","setBalloon","n","getBalloon","setAlign","getAlign","last","shift","undefined","clearAlignLast","value","getBalloonPatternHeight","Game_Temp","setMSHeightFunc","func","_callMSHeightFunc","alias_Scene_Message_associateWindows__enrtyPoint","Scene_Message","associateWindows","messageWindow","_messageWindow","DependencyInjector","injectMessageWindow","ready","messageWindowRect","ww","Graphics","wh","calcWindowHeight","wx","Rectangle","alias_Scene_Message_terminate","terminate","ejectMessageWindow","initSystem","alias_Scene_Map_start","Scene_Map","start","getInstance","executeLazyCommandAll","Sprite_Battler","screenX","x","screenY","y","Window_Base","obtainEscapeCode","textState","arr","Reg","defaultEscapeCode","exec","slice","toUpperCase","obtainNameColor","Color","gmColor","ColorManager","changeTextColor","color","c","contents","alias_Window_Base_processEscapeCharacter","processEscapeCharacter","tcGroup","TextCodes","ENUM","textCode","Main","obtainEscapeParam","COLOR","ICON","processDrawIcon","INCREASE","makeFontBigger","DECREASE","makeFontSmaller","alias_loadWindowskin","loadWindowskin","addLoadListener","baseColor","getFontFace","langCode","navigator","language","fonts","default","drawTextEx","resetFontSettings","createTextState","processAllText","outputWidth","minFontSize","outlineWidth","defaultOutlineWidth","outlineColor","defaultOutlineColor","resetTextColor","maxFontSize","_messageDesc","MessageDesc","console","log","alias_Window_Base_convertEscapeCharacters","convertEscapeCharacters","regGroup","Group","replace","VAR","args","$gameVariables","toString","bind","PLAYER","actorName","PARTY_MEMBER","partyMemberName","NUM","toComma","GOLD","TextManager","currencyUnit","CLASSES","$dataClasses","name","ITEM","$dataItems","WEAPON","$dataWeapons","ARMOR","$dataArmors","ENEMY","$dataEnemies","STATE","$dataStates","SKILL","$dataSkills","ALIGN_LEFT","ALIGN","ALIGN_CENTER","ALIGN_RIGHT","_isUsedTextWidthEx","ALIGN_CLEAR","source","textPadding","itemPadding","newLineX","processAlign","_textState","rtl","setAlignLeft","setAlignCenter","setAlignRight","alias_Window_Base_processNewLine_align","processNewLine","startX","padding","contentsWidth","Window_Message","obtainTextSpeed","obtainGradientText","String","obtainSoundName","alias_Window_Message_processEscapeCharacter","TEXT_SPEED","TEXT_SIZE","setTextSize","OUTLINE_COLOR","setStrokeColor","INDENT","setTextIndent","OUTLINE_WIDTH","setStrokeWidth","BOLD","setTextBold","BOLD_START","BOLD_END","ITALIC","setTextItalic","ITALIC_START","ITALIC_END","GRADIENT","setTextGradient","HIGHLIGHT_TEXT_COLOR","setHighlightTextColor","TAB","textWidth","TabSize","CARRIAGE_RETURN","startWait","PLAY_SE","playSe","SHOW_PICTURE","showPicture","HIDE_PICTURE","erasePicture","FACE","split","clamp","seName","data","pan","pitch","volume","ConfigManager","seVolume","AudioManager","param","raw","map","e","ret","forEach","a","$gameScreen","apply","picId","_pauseSignSprite","move","_width","_height","scale","resetGradient","alias_Window_Message_createTextState","px","py","Object","assign","processWordWrap","w","isValid","Math","floor","needsNewPage","startPause","alias_Window_Message_processNewLinePW","_backBuffer","isDirty","processCharacter","charCodeAt","flushTextState","processControlCharacter","buffer","alias_Window_Message_processCharacter","preLen","substr","processNormalCharacterProxy","isNormalMessageWindow","isRealDrawingMode","drawing","isParagraphMinifier","faceName","faceWidth","faceDirection","contentW","contentH","fillAll","alias_Window_Message_flushTextState","isDrawing","isSlowTextMode","_showFast","isEndOfText","isDrawingTextBackground","backBuffer","bitmap","min","innerWidth","innerHeight","flushTextBackgbround","updateBigFaceOpacity","_faceContents","faceOpacity","opacity","fadeInOutFaceContents","isOpening","isClosing","openness","alias_Window_Message_checkToNotClose","checkToNotClose","updateBalloonPosition","component","getComponent","getDefaultSizeOption","isMobileDevice","Utils","maxSW","window","outerWidth","screen","availWidth","maxSH","outerHeight","availHeight","maxHeight","maxY","maxX","updatePlacement","goldWindow","_goldWindow","isNormalWindowMode","isValidSceneIsMap","SceneManager","_scene","_positionType","positionType","desiredX","windowOffset","desiredY","minGoldY","updateDefaultOpacity","updateContentsOpacity","isBigFace","backIndex","setFaceZIndex","isAlreadyDrawnFace","zIndex","parent","isFaceSide","setChildIndex","clearFaceBitmap","alias_Window_Message_convertEscapeCharacters","BOLD_START_CV","BOLD_END_CV","ITALIC_START_CV","ITALIC_END_CV","NAME","retName","endsWith","namePositionTypeAtX","_nameBoxWindow","setName","BALLOON","arguments","$gameParty","inBattle","abs","FRIENDLY_TROOPS","ENEMY_TROOPS","FACE_DIRECTION","setHeight","fittingHeight","createContents","alias_Window_Message_initialize","rect","$gameTemp","createFaceContents","on","removeEventHandler","onLoadWindowskin","calcBalloonRect","alias_Window_Message_newPage","newPage","emit","openBalloon","updateBalloonPositionInBattle","sign","setupOwner","Scene_Battle","resizeMessageSystem","startMessage","allText","tempText","updateBackground","open","getDefaultWindowRect","windowWidth","windowHeight","isResetOwner","isBattleScene","ox","oy","windowRect","off","isReady","getPixel","_isDirtyWindowskin","setTimeout","_Window_Message_updateLoading","updateLoading","contentsHeight","Sprite","addChildAt","removeFaceContents","removeChild","faceIndex","faceStartX","faceStartOriginX","isValidBigFace","updateNameWindow","standardBackOpacity","backOpacity","translucentOpacity","contentsOpacity","getSpriteActors","members","max","type","id","getSpriteEnemies","$gameTroop","test","RegExp","$1","event","alias_Window_Message_shouldBreakHere","shouldBreakHere","isBreakCharacter","interval","textSoundInterval","_textSoundInterval","playStaticSe","popParameter","Window_NameBox","isRTL","BalloonWindowTransformComponent","BaseComponent","_bWidth","_bHeight","onReady","props","super","textSizeEx","standardPadding","isActiveInBalloon","setBalloonRect","dx","dy","drawMessageFace","setBalloonPlacement","bw","boxWidth","bh","boxHeight","JSON","stringify","mx","canvasToLocalX","my","scaleY","ny","nameWindowY","updateSubBalloonElements","_nameWindow","getNameWindowY","owner","warn","Error","$gameSystem","isSideView","hasOwnProperty","scene","_spriteset","_actorSprites","_enemySprites","tempBattlers","target","_actor","isAlive","_enemy","padY","_mainSprite","transform","updateTransform","calcBalloonRectHeight","tempFontSize","calcTextHeight","Component","constructor","error","_choiceWindow","_choiceListWindow","updatePadding","numLines","canvasToLocalY","NameWindowPositionComponent","setOpacity","isNaN","updatePositionX","nw","position","nx","nameWindowX","newX","updatePositionY","ballonOwnerType","topY","isOpen","EventEmitter","init","mounted","onDestroy","destroy","execute","ComponentExecutor","static","INSTANCE","_components","_order","startChar","endChar","len","fromCharCode","random","callbackFunction","active","isLazy","wrap","addCommand","lazy","get","deactive","executeAll","key","prop","currentCallback","Function","components","entries","filter","k","v","inject","_isDirty","COMPONENTS","getComponentClass","pop","_listeners","eventName","_isSaved","pluginParams","$plugins","description","pluginName","MessageParams","jsonParse","str","parse","keys","lastUsed","Default","Korean","Chinese","English","Japanese","FACE_START_ORIGIN_X","nameWindowWidth","NAME_WINDOW_WIDTH","nameWindowRows","NAME_WINDOW_ROWS","FONT_SIZE","STD_PADDING","isValidShakingChoice","nameWindowStdPadding","WIDTH","HEIGHT","isTempSpriteContainerVisibility","Point","customFont","customFontName","customFontSrc","defaultChoicePostion","exTextColors","pathTextSound","textSoundEval1","textSoundEval2","textSoundPoolSize","preloadWindowskins","DEBUG","isNwjs","isOptionValid","systemFonts","settings","languageCode","fontName","alias_Game_Temp_initialize","eval","KoreanEscapeCode","ChineseEscapeCode","EnglishEscapeCode","JapaneseEscapeCode","rowData","retData","concat","WAIT_SEC_15","WAIT_SEC_60","START_PAUSE","LINE_SHOW_FAST_LT","LINE_SHOW_FAST_GT","PAUSE_SKIP","getTextCode","idx","match","note","list","commonEvent","reservedCommonEvent","re","join","getColor","obj","r","g","b","parseFloat","KOREAN_COLORS","c_aqua","c_black","c_blue","c_dkgray","c_fuchsia","c_gray","c_green","c_lime","c_ltgray","c_maroon","c_navy","c_olive","c_orange","c_purple","c_red","c_silver","c_teal","c_white","c_yellow","CHINESE_COLOR","ENGLISH_COLOR","AQUA","BLACK","BLUE","DKGRAY","FUCHSIA","GRAY","GREEN","LIME","LTGRAY","MAROON","NAVY","OLIVE","ORANGE","PURPLE","RED","SILVER","TEAL","WHITE","YELLOW","JAPANESE_COLOR","getKoreanColor","getBaseColor","getUserCustomColor","getChineseColor","getEnglishColor","getJapaneseColor","getBrowser","tem","ua","userAgent","M","version","appName","appVersion","splice","getBitmapCommand","getGameCommandCommand","getSpriteBattlerCommand","getWindowBaseCommand","getWindowMessageCommand","getGameInterpreterCommand","getWindowNameBoxCommand","getGameTempCommand","getGameMapCommand","getMainCommand","getDefaultCommandTest","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","__webpack_exports__"],"sourceRoot":""}