{"version":3,"file":"RS_MessageSystem.js","mappings":"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","sources":["webpack://message-system-mz/./src/ComponentExecutor.ts","webpack://message-system-mz/./src/DependencyInjector.ts","webpack://message-system-mz/./src/EventEmitter.ts","webpack://message-system-mz/./src/RS.ts","webpack://message-system-mz/./src/components/BalloonWindowTransformComponent.ts","webpack://message-system-mz/./src/components/BaseComponent.ts","webpack://message-system-mz/./src/components/Component.ts","webpack://message-system-mz/./src/components/NameWindowPositionComponent.ts","webpack://message-system-mz/./src/handlers/Bitmap.handler.ts","webpack://message-system-mz/./src/handlers/Main.handler.ts","webpack://message-system-mz/./src/index.ts","webpack://message-system-mz/webpack/bootstrap","webpack://message-system-mz/webpack/startup"],"sourcesContent":["interface DataLinkSet {\n    callbackFunction: Function;\n    active: boolean;\n}\n\n/**\n * @class ComponentExecutor\n * @author biud436\n * @description\n * ComponentExecutor는 컴포넌트를 샌드박스 환경에서 안전하게 실행합니다.\n * 샌드박스 환경이라는 것은 주요 메서드가 외부와 차단되어, 예외 처리를 통하여 각종 오류를 캐치할 수 있게 합니다.\n */\nexport default class ComponentExecutor {\n    public static INSTANCE: ComponentExecutor;\n    private _components: Record<string, DataLinkSet> = {};\n\n    public static getInstance(): ComponentExecutor {\n        if (!ComponentExecutor.INSTANCE) {\n            ComponentExecutor.INSTANCE = new ComponentExecutor();\n        }\n        return ComponentExecutor.INSTANCE;\n    }\n\n    public constructor() {}\n\n    public add(name: string, func: Function): ComponentExecutor {\n        if (name === \"\") {\n            let startChar = 97; // a\n            let endChar = 122; // z\n            let len = 7; // length of random string\n\n            for (let i = 0; i < len; i++) {\n                name += String.fromCharCode(\n                    Math.floor(Math.random() * (endChar - startChar)) +\n                        startChar\n                );\n            }\n        }\n\n        this._components[name] = <DataLinkSet>{\n            callbackFunction: func,\n            active: false,\n        };\n\n        return this;\n    }\n\n    public wrap(name: string, func: Function): ComponentExecutor {\n        return this.add(name, func);\n    }\n\n    public get(name: string): Function {\n        const prop = this._components[name];\n\n        return prop.callbackFunction;\n    }\n\n    public active(name: string): ComponentExecutor {\n        const prop = this._components[name];\n\n        prop.active = true;\n\n        return this;\n    }\n\n    public deactive(name: string): ComponentExecutor {\n        const prop = this._components[name];\n\n        prop.active = false;\n\n        return this;\n    }\n\n    public ready(name: string): ComponentExecutor {\n        return this.active(name);\n    }\n\n    public executeAll() {\n        try {\n            for (const key in this._components) {\n                const prop = this._components[key];\n\n                if (prop.active) {\n                    const currentCallback = this.get(key);\n\n                    if (currentCallback instanceof Function) {\n                        currentCallback();\n                    }\n                }\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n","import { Rectangle } from \"pixi.js\";\nimport { BalloonWindowTransformComponent } from \"./components/BalloonWindowTransformComponent\";\nimport { BaseComponent } from \"./components/BaseComponent\";\nimport { Component } from \"./components/Component\";\nimport { NameWindowPositionComponent } from \"./components/NameWindowPositionComponent\";\n\ntype BaseComponentName =\n    | \"NameWindowPositionComponent\"\n    | \"BalloonWindowTransformComponent\";\n\ninterface Class<T> {\n    new (...args: any[]): T;\n}\n\n/**\n *\n */\n// type InjectFunctionWithInfer = <\n//     R = InstanceType<new (rect: Rectangle) => Window_Message>\n// >(\n//     messageWindow: R\n// ) => InstanceType<new (messageWindow: R) => Component>;\ntype InjectFunctionWithInfer = <\n    R = InstanceType<new (rect: Rectangle) => Window_Message>\n>(\n    messageWindow: R\n) => BaseComponent;\n\n/**\n * @function getComponentValue\n * @param item\n * @param key\n * @returns\n */\nfunction getComponentValue<T, K extends keyof T>(item: T, key: K): T[K] {\n    return item[key];\n}\n\n/**\n * @static\n * @class DependencyInjector\n * @description\n * This class allows you to inject components that needs to execute a method that has a certain dependency in the RPG Maker MZ.\n * 또한 해당 컴포넌트를 안전한 샌드박스 환경에서 실행시키기 위해 사용됩니다.\n * 샌드박스 환경이라함은 MZ에서도 오류 없이 안전하게 동작한다는 것을 의미합니다.\n */\nexport class DependencyInjector {\n    public static COMPONENTS?: [\n        BalloonWindowTransformComponent,\n        NameWindowPositionComponent\n    ];\n\n    public static _components: { [key: string]: Component } = {};\n    private static _isDirty: Boolean = false;\n\n    private static _messageWindow?: Window_Message | undefined;\n\n    public static injectMessageWindow(messageWindow: Window_Message) {\n        // 주입할 메시지 윈도우 클래스의 인스턴스를 가져옵니다.\n        DependencyInjector._messageWindow = messageWindow;\n        DependencyInjector.inject(messageWindow);\n    }\n\n    public static ejectMessageWindow() {\n        if (DependencyInjector._isDirty) {\n            DependencyInjector._messageWindow = undefined;\n            DependencyInjector.COMPONENTS = undefined;\n            DependencyInjector._isDirty = false;\n        }\n    }\n\n    /**\n     * inject all components inside the sandbox environment.\n     *\n     * @param messageWindow Specify the message window.\n     * @returns void\n     */\n    private static inject(messageWindow: Window_Message): void {\n        if (DependencyInjector._isDirty) {\n            console.log(\"components are already injected\");\n            return;\n        }\n\n        // 컴포넌트에 메시지 윈도우를 주입합니다.\n        DependencyInjector.COMPONENTS = [\n            new BalloonWindowTransformComponent({ messageWindow }),\n            new NameWindowPositionComponent({ messageWindow }),\n        ];\n\n        DependencyInjector._isDirty = true;\n    }\n\n    /**\n     * get the component by name.\n     *\n     * @param name Specify the component name\n     * @returns Component\n     */\n    public static getComponent<R extends BaseComponentName>(\n        name: R\n    ):\n        | BalloonWindowTransformComponent\n        | NameWindowPositionComponent\n        | undefined {\n        const items = DependencyInjector.COMPONENTS!.filter((e) => {\n            return e instanceof DependencyInjector.getComponentClass(name);\n        });\n\n        return items.pop();\n    }\n\n    static getComponentClass(name: BaseComponentName): typeof BaseComponent {\n        switch (name) {\n            case \"BalloonWindowTransformComponent\":\n                return BalloonWindowTransformComponent;\n            case \"NameWindowPositionComponent\":\n                return NameWindowPositionComponent;\n            default:\n                return BaseComponent;\n        }\n    }\n\n    public static ready() {\n        if (DependencyInjector.COMPONENTS) {\n            DependencyInjector.COMPONENTS.forEach((component) => {\n                component.ready();\n            });\n        }\n    }\n}\n","// 함수 타입\ntype FunctionLike = Function;\n// 이벤트 키 타입\ntype EventKey = string;\n\n/**\n * 이벤트 리스터를 정의합니다.\n */\ntype VMEventListener = { [key: EventKey]: Function[] };\ntype EventNames = \"ready\" | \"mounted\" | \"destroy\";\n\n/**\n * @class EventEmitter\n * @description\n * 이벤트를 전달하기 위한 클래스입니다.\n */\nexport class EventEmitter {\n  constructor(private _listeners: VMEventListener = {}) {\n    this._listeners = {};\n  }\n\n  /**\n   * 호출할 이벤트를 등록합니다.\n   *\n   * @param eventName 호출할 이벤트 명\n   * @param func\n   * @returns\n   */\n  on(eventName: EventNames, func: FunctionLike) {\n    if (!this._listeners[eventName]) {\n      this._listeners[eventName] = [];\n    }\n\n    if (!func) {\n      return;\n    }\n\n    if (func instanceof Function) {\n      this._listeners[eventName].push(func);\n    }\n  }\n\n  /**\n   * 등록된 이벤트를 호출합니다.\n   *\n   * @param eventName 호출할 이벤트 명\n   * @param args\n   * @returns\n   */\n  emit(eventName: EventNames, ...args: any[]) {\n    if (!this._listeners[eventName]) {\n      return;\n    }\n\n    this._listeners[eventName].forEach((func) => {\n      if (!(func instanceof Function)) {\n        console.warn(\"호출된 이벤트 리스너가 함수가 아닙니다.\");\n        return;\n      }\n\n      func(...args);\n    });\n  }\n}\n","/***\n * 이것은 RPG Maker MV 호환성을 위해 존재하며 타입스크립트로 재작성되어야 합니다.\n */\nimport { Types } from \"../types/parameters\";\n\ntype TextCodeKey =\n    | \"COLOR\"\n    | \"TEXT_SPEED\"\n    | \"OUTLINE_COLOR\"\n    | \"OUTLINE_WIDTH\"\n    | \"INDENT\"\n    | \"BOLD\"\n    | \"ITALIC\"\n    | \"NAME\"\n    | \"GRADIENT\"\n    | \"PARTY_MEMBER\"\n    | \"PLAYER\"\n    | \"VAR\"\n    | \"ICON\"\n    | \"INCREASE\"\n    | \"DECREASE\"\n    | \"GOLD\"\n    | \"BALLOON\"\n    | \"ALIGN\"\n    | \"NUM\"\n    | \"TEXT_SIZE\"\n    | \"TAB\"\n    | \"CARRIAGE_RETURN\"\n    | \"PLAY_SE\"\n    | \"SHOW_PICTURE\"\n    | \"HIDE_PICTURE\"\n    | \"ITEM\"\n    | \"WEAPON\"\n    | \"ARMOR\"\n    | \"CLASSES\"\n    | \"ENEMY\"\n    | \"STATE\"\n    | \"SKILL\"\n    | \"FACE\"\n    | \"FRIENDLY_TROOPS\"\n    | \"ENEMY_TROOPS\"\n    | \"WAIT_SEC_15\"\n    | \"WAIT_SEC_60\"\n    | \"START_PAUSE\"\n    | \"LINE_SHOW_FAST_LT\"\n    | \"LINE_SHOW_FAST_GT\"\n    | \"PAUSE_SKIP\"\n    | \"BOLD_START\"\n    | \"BOLD_END\"\n    | \"ITALIC_START\"\n    | \"ITALIC_END\"\n    | \"ALIGN_LEFT\"\n    | \"ALIGN_CENTER\"\n    | \"ALIGN_RIGHT\"\n    | \"BOLD_START_CV\"\n    | \"BOLD_END_CV\"\n    | \"ITALIC_START_CV\"\n    | \"ITALIC_END_CV\"\n    | \"ALIGN_CLEAR\"\n    | \"HIGHLIGHT_TEXT_COLOR\"\n    | \"FACE_DIRECTION\";\n\ninterface TextCodeEnum {\n    ENUM: Record<TextCodeKey, number>;\n}\n\ntype TextCode = Record<string, any> & TextCodeEnum;\n\nconst pluginParams = $plugins.filter((i) => {\n    return i.description.contains(\"<RS_MessageSystem>\");\n});\n\nconst pluginName = <Types.PluginName>(\n    (pluginParams.length > 0 && pluginParams[0].name)\n);\nconst parameters = <Types.PluginParameters>(\n    (pluginParams.length > 0 && pluginParams[0].parameters)\n);\n\nconst RS = <RS>{\n    MessageSystem: <IMessageSytem>{},\n};\n\nRS.MessageSystem.jsonParse = function (str: string) {\n    const retData = JSON.parse(str, (k, v) => {\n        try {\n            return RS.MessageSystem.jsonParse(v);\n        } catch (e) {\n            return v;\n        }\n    });\n\n    return retData;\n};\n\n/**\n * @method popParameter\n */\nRS.MessageSystem.popParameter = function (...args: any[]) {\n    const k = Object.keys(args);\n    let lastUsed = \"\";\n\n    while (k.length > 0) {\n        lastUsed = args[parseInt(<string>k.pop())];\n\n        // @ts-ignore\n        if (parameters[lastUsed]) return parameters[lastUsed];\n    }\n\n    return \"\";\n};\n\nRS.MessageSystem.Reg = {\n    Default: [],\n    Group: [],\n    Korean: [],\n    Chinese: [],\n    English: [],\n    Japanese: [],\n};\n\nenum MessageParams {\n    FACE_START_ORIGIN_X = 168,\n    NAME_WINDOW_WIDTH = 140,\n    NAME_WINDOW_ROWS = 1,\n    FONT_SIZE = 28,\n    STD_PADDING = 18,\n}\n\nRS.MessageSystem.Params = {\n    faceStartOriginX: MessageParams.FACE_START_ORIGIN_X,\n    nameWindowWidth: MessageParams.NAME_WINDOW_WIDTH,\n    nameWindowRows: MessageParams.NAME_WINDOW_ROWS,\n    FONT_SIZE: MessageParams.FONT_SIZE,\n    STD_PADDING: MessageParams.STD_PADDING,\n    isValidShakingChoice: false,\n    fontSize: Number(\n        RS.MessageSystem.popParameter(\"Font Size\", \"글꼴 크기\") || 28\n    ),\n    textSpeed: Number(\n        RS.MessageSystem.popParameter(\"Text Speed\", \"기본 텍스트 출력 속도\") ||\n            0\n    ),\n    minFontSize: Number(\n        RS.MessageSystem.popParameter(\"Text Min Size\", \"폰트 최소 크기\") || 24\n    ),\n    maxFontSize: Number(\n        RS.MessageSystem.popParameter(\"Text Max Size\", \"폰트 최대 크기\") || 96\n    ),\n    textStartX: Number(\n        RS.MessageSystem.popParameter(\"Text Start X\", \"텍스트 시작 X\")\n    ),\n    numVisibleRows: Number(\n        RS.MessageSystem.popParameter(\"numVisibleRows\", \"라인 갯수\") || 4\n    ),\n    gradientColor1: String(\n        RS.MessageSystem.popParameter(\n            \"gradientColor1\",\n            \"그레디언트 시작 색상\"\n        ) || \"#FFFFFF\"\n    ),\n    gradientColor2: String(\n        RS.MessageSystem.popParameter(\n            \"gradientColor2\",\n            \"그레디언트 중간 색상\"\n        ) || \"#F29661\"\n    ),\n    gradientColor3: String(\n        RS.MessageSystem.popParameter(\"gradientColor3\", \"그레디언트 끝 색상\") ||\n            \"#CC3D3D\"\n    ),\n    nameWindowX: Number(\n        RS.MessageSystem.popParameter(\"Name Window X\", \"이름 윈도우 X\") || 0\n    ),\n    nameWindowY: Number(\n        RS.MessageSystem.popParameter(\"Name Window Y\", \"이름 윈도우 Y\") || 0\n    ),\n    nameWindowStdPadding: Number(\n        RS.MessageSystem.popParameter(\n            \"Name Window Inner Padding\",\n            \"이름 윈도우 안쪽 여백\"\n        ) || 18\n    ),\n    namePositionTypeAtX:\n        RS.MessageSystem.popParameter(\n            \"Name Window Position\",\n            \"이름 윈도우 위치\"\n        ) || \"left\",\n    faceOX: Number(\n        RS.MessageSystem.popParameter(\"Big Face OX\", \"큰 페이스칩 OX\") || 0\n    ),\n    faceOY: Number(\n        RS.MessageSystem.popParameter(\"Big Face OY\", \"큰 페이스칩 OY\") || 0\n    ),\n    faceSide: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Show Big Face Back\",\n            \"대화창 뒤에 얼굴 표시\"\n        ) === \"true\" || false\n    ),\n    WIDTH: MessageParams.FONT_SIZE * 6 + MessageParams.STD_PADDING,\n    HEIGHT: MessageParams.FONT_SIZE + MessageParams.STD_PADDING / 2,\n    TabSize: Number(RS.MessageSystem.popParameter(\"Tab Size\", \"탭 크기\")),\n    backOpacity: Number(\n        RS.MessageSystem.popParameter(\"back Opacity\", \"배경 그림의 투명도\")\n    ),\n    translucentOpacity: Number(\n        RS.MessageSystem.popParameter(\"translucent Opacity\", \"반투명도\")\n    ),\n    defaultOpacity: Number(\n        RS.MessageSystem.popParameter(\"default Opacity\", \"기본 투명도\")\n    ),\n    contentsOpacity: Number(\n        RS.MessageSystem.popParameter(\"contents Opacity\", \"내용의 투명도\")\n    ),\n    defaultOutlineWidth: Number(\n        RS.MessageSystem.popParameter(\"default outline width\", \"테두리 크기\")\n    ),\n    defaultOutlineColor:\n        RS.MessageSystem.popParameter(\"default outline Color\", \"테두리 색상\") ||\n        \"white\",\n    fonts: {\n        default: \"rmmz-mainfont\",\n    },\n    isTempSpriteContainerVisibility: false,\n    lineHeight: 36,\n    windowOffset: new Point(-4, -4),\n    fontSmoothingEnabled: true,\n    customFont: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Using Custom Font\",\n            \"사용자 지정 폰트 사용 여부\"\n        ) === \"true\"\n    ),\n    customFontName: String(\n        RS.MessageSystem.popParameter(\n            \"Custom Font Name\",\n            \"사용자 지정 폰트명\"\n        ) || \"GameFont\"\n    ),\n    customFontSrc: String(\n        RS.MessageSystem.popParameter(\n            \"Custom Font Src\",\n            \"사용자 지정 폰트 경로\"\n        ) || \"fonts/mplus-1m-regular.ttf\"\n    ),\n    windowskin:\n        RS.MessageSystem.popParameter(\n            \"Default Windowskin\",\n            \"기본 윈도우스킨\"\n        ) || \"Window\",\n    windowskinForNameWindow:\n        RS.MessageSystem.popParameter(\"Name Windowskin\", \"이름 윈도우스킨\") ||\n        \"Window\",\n    choiceWindowStyle: String(\n        RS.MessageSystem.popParameter(\"Choice Style\", \"선택지 스타일\") ||\n            \"default\"\n    ),\n    defaultChoicePostion: parameters[\"Default Choice Position\"] || \"right\",\n    exTextColors: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\"Text Color\", \"텍스트 색상\")\n    ),\n    isPlayTextSound: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Text Sound ON/OFF\",\n            \"텍스트 효과음 재생 여부\"\n        ) === \"true\"\n    ),\n    pathTextSound: String(\n        RS.MessageSystem.popParameter(\"Text Sound\", \"텍스트 효과음\") ||\n            \"Cursor1.ogg\"\n    ),\n    textSoundEval1: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Execution Condition\",\n            \"텍스트 효과음 실행 조건\"\n        ) || \"Math.randomInt(100) < 45\"\n    ),\n    textSoundEval2: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Volume\",\n            \"텍스트 효과음 볼륨\"\n        ) || \"(0.4 + (RS.MessageSystem.randomNormal(0.8)[0])).clamp(0.0, 0.8)\"\n    ),\n    textSoundInterval: parseInt(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Interval\",\n            \"텍스트 사운드 재생 간격\"\n        )\n    ),\n    textSoundPoolSize: parseInt(\n        RS.MessageSystem.popParameter(\n            \"텍스트 사운드 풀 크기\",\n            \"Text Sound Pool Size\"\n        ) || 6\n    ),\n    langCode:\n        RS.MessageSystem.popParameter(\"언어 코드\", \"Language Code\") || \"ko\",\n    preloadWindowskins: JSON.parse(parameters[\"preload windowskin\"] || \"[]\"),\n    isParagraphMinifier: Boolean(parameters[\"Paragraph Minifier\"] === \"true\"),\n    gradientStyle: parameters[\"Gradient Style\"],\n    faceOpacity: parseInt(parameters[\"face Opacity\"] || 21),\n    faceDirection: parseInt(parameters[\"face Direction\"] || 0),\n    DEBUG: (() => {\n        return Utils.isNwjs() && Utils.isOptionValid(\"test\");\n    })(),\n};\n\n(() => {\n    const systemFonts: Types.SystemFonts = RS.MessageSystem.jsonParse(\n        parameters[\"systemFont\"]\n    );\n    if (!RS.MessageSystem.Params.fonts) return;\n\n    // ! 여기서부터 변환 시작해야함\n    systemFonts.settings.forEach((i) => {\n        const params = <{ [key: string]: any } | any>{};\n        params[i.languageCode] = i.fontName;\n        Object.assign(RS.MessageSystem.Params.fonts as {}, params);\n    });\n})();\n\n//============================================================================\n// Lazy Initialize Parameters (느린 초기화)\n//============================================================================\n\nvar alias_Game_Temp_initialize = Game_Temp.prototype.initialize;\nGame_Temp.prototype.initialize = function () {\n    alias_Game_Temp_initialize.call(this);\n    RS.MessageSystem.Params.windowWidth =\n        eval(parameters[\"Window Width\"]) || Graphics.boxWidth;\n};\n\n//============================================================================\n// Multiple Language supports\n//============================================================================\n\nRS.MessageSystem.Reg.KoreanEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z가-힣]+[!]*/i;\nRS.MessageSystem.Reg.ChineseEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z一-鼣]+[!]*/i;\nRS.MessageSystem.Reg.EnglishEscapeCode = /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z]+[!]*/i;\nRS.MessageSystem.Reg.JapaneseEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z\\u3040-\\u309F\\u30A0-\\u30FF\\u3300-\\u33FF\\u4E00-\\u9FFF\\uFF00-\\uFFEF]+[!]*/i;\nRS.MessageSystem.Reg.defaultEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z가-힣]+[!]*/i;\n\nRS.MessageSystem.TextCodes = (function () {\n    const rowData = RS.MessageSystem.popParameter(\"Text Code\", \"텍스트 코드\");\n    const data = JSON.parse(rowData);\n    const retData = <TextCode>{};\n\n    retData.Korean = [undefined].concat(JSON.parse(data.Korean));\n    retData.Chinese = [undefined].concat(JSON.parse(data.Chinese));\n    retData.English = [undefined].concat(JSON.parse(data.English));\n    retData.Japanese = [undefined].concat(JSON.parse(data.Japanese));\n\n    return retData;\n})();\n\nRS.MessageSystem.TextCodes.Main = [];\n\nRS.MessageSystem.TextCodes.ENUM = {\n    COLOR: 1,\n    TEXT_SPEED: 2,\n    OUTLINE_COLOR: 3,\n    OUTLINE_WIDTH: 4,\n    INDENT: 5,\n    BOLD: 6,\n    ITALIC: 7,\n    NAME: 8,\n    GRADIENT: 9,\n    PARTY_MEMBER: 10,\n    PLAYER: 11,\n    VAR: 12,\n    ICON: 13,\n    INCREASE: 14,\n    DECREASE: 15,\n    GOLD: 16,\n    BALLOON: 17,\n    ALIGN: 18,\n    NUM: 19,\n    TEXT_SIZE: 20,\n    TAB: 21,\n    CARRIAGE_RETURN: 22,\n    PLAY_SE: 23,\n    SHOW_PICTURE: 24,\n    HIDE_PICTURE: 25,\n    ITEM: 26,\n    WEAPON: 27,\n    ARMOR: 28,\n    CLASSES: 29,\n    ENEMY: 30,\n    STATE: 31,\n    SKILL: 32,\n    FACE: 33,\n    FRIENDLY_TROOPS: 34, // 여긴 2018.01.14에 추가됨\n    ENEMY_TROOPS: 35,\n    WAIT_SEC_15: 36, // .\n    WAIT_SEC_60: 37, // |\n    START_PAUSE: 38, // !\n    LINE_SHOW_FAST_LT: 39, // <\n    LINE_SHOW_FAST_GT: 40, // >\n    PAUSE_SKIP: 41, // ^\n    BOLD_START: 42, // <B>\n    BOLD_END: 43, // </B>\n    ITALIC_START: 44,\n    ITALIC_END: 45,\n    ALIGN_LEFT: 46,\n    ALIGN_CENTER: 47,\n    ALIGN_RIGHT: 48,\n    BOLD_START_CV: 49,\n    BOLD_END_CV: 50,\n    ITALIC_START_CV: 51,\n    ITALIC_END_CV: 52,\n    ALIGN_CLEAR: 53, // AEND\n    HIGHLIGHT_TEXT_COLOR: 54,\n    FACE_DIRECTION: 55,\n};\n\n/**\n * 주어진 ID 값으로 텍스트 코드를 현지화하여 반환합니다.\n * @param {Number} idx\n */\nRS.MessageSystem.getTextCode = function (idx: number) {\n    const langCode = RS.MessageSystem.Params.langCode;\n\n    if (langCode.match(/ko/)) {\n        return RS.MessageSystem.TextCodes[\"Korean\"][idx];\n    }\n    if (langCode.match(/zh/)) {\n        return RS.MessageSystem.TextCodes[\"Chinese\"][idx];\n    }\n    if (langCode.match(/en/)) {\n        return RS.MessageSystem.TextCodes[\"English\"][idx];\n    }\n    if (langCode.match(/ja/)) {\n        return RS.MessageSystem.TextCodes[\"Japanese\"][idx];\n    }\n    return RS.MessageSystem.TextCodes[\"English\"][idx];\n};\n\n/**\n * 노트 태그를 읽습니다.\n * @memberof RS.MessageSystem\n * @param {Number} eventId\n * @return {Object} meta\n */\nRS.MessageSystem.getEventComments = function (eventId: number, index: number) {\n    let data = <Record<any, any>>{\n        note: \"\",\n        meta: {},\n    };\n    try {\n        // 리스트를 가져옵니다.\n        let list = $gameMap.event(eventId).list();\n\n        // 바로 이전 인덱스에 노트 태그가 있었는 지 확인합니다.\n        if (index < 0) index = 0;\n\n        // 부모 이벤트 없이 호출되는 공통 이벤트가 있는 지 확인합니다.\n        if (eventId <= 0) {\n            var commonEvent = $gameTemp.reservedCommonEvent();\n            if (commonEvent) {\n                list = commonEvent.list;\n                // 공통 이벤트는 한 번 설치된 후 클리어되므로 목록을 두 번 읽을 순 없으므로 예외 처리\n                if (!list) {\n                    return data;\n                }\n            }\n        }\n\n        let param = list[index];\n\n        // 코멘트를 읽어옵니다.\n        while (param && [108, 408].contains(param.code)) {\n            data.note += param.parameters[0] + \"\\r\\n\";\n            index--;\n            param = list[index];\n        }\n\n        if (param && param.code === 108) {\n            data.note += param.parameters[0] + \"\\r\\n\";\n\n            index--;\n            param = list[index];\n\n            while (param.code === 408) {\n                data.note += param.parameters[0] + \"\\r\\n\";\n                index--;\n                param = list[index];\n            }\n\n            if (param.code === 108) {\n                data.note += param.parameters[0] + \"\\r\\n\";\n            }\n        }\n\n        // 노트 태그를 추출합니다 (DataManager.extractMetadata의 변형입니다)\n        const re = /<([^<>:]+)(:?)([^>]*)>/g;\n        data.meta = {};\n        for (;;) {\n            const match = re.exec(data.note);\n            if (match) {\n                if (match[2] === \":\") {\n                    data.meta[match[1].trim()] = match[3];\n                } else {\n                    data.meta[match[1].trim()] = true;\n                }\n            } else {\n                break;\n            }\n        }\n    } catch (e) {\n        // 리스트를 읽지 못할 경우 try-catch 문에 의해 예외 처리가 됩니다.\n        return {\n            note: \"\",\n            meta: {},\n        };\n    }\n    return data.meta;\n};\n\n(() => {\n    \"use strict\";\n    var regData = [\"Korean\", \"English\", \"Chinese\", \"Japanese\"];\n    regData.forEach(function (e, i, a) {\n        var tcGroup = RS.MessageSystem.TextCodes[e];\n        tcGroup = tcGroup.map((e: any, i: number, a: any[]) => {\n            if (e === undefined) return;\n            var data = [];\n            var ret = \"\";\n            for (var str of e) {\n                if (/[a-zA-Z]/i) {\n                    data.push(str);\n                    continue;\n                }\n                var text = str.charCodeAt().toString(16);\n                data.push(\"\\\\u\" + \"{\" + text + \"}\");\n            }\n            ret = data.join(\"\");\n            return ret;\n        });\n        RS.MessageSystem.Reg[e][0] = undefined;\n        RS.MessageSystem.Reg[e][1] = new RegExp(\n            `(?:\\x1bC|\\x1b${tcGroup[1]})\\\\[(.+?)\\\\]`,\n            \"gi\"\n        ); // 색\n        RS.MessageSystem.Reg[e][2] = new RegExp(\n            `\\x1b${tcGroup[2]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 속도\n        RS.MessageSystem.Reg[e][3] = new RegExp(\n            `\\x1b${tcGroup[3]}\\\\[(.+?)\\\\]`,\n            \"gi\"\n        ); // 테두리색\n        RS.MessageSystem.Reg[e][4] = new RegExp(\n            `\\x1b${tcGroup[4]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 테두리크기\n        RS.MessageSystem.Reg[e][5] = new RegExp(\n            `\\x1b${tcGroup[5]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 들여쓰기\n        RS.MessageSystem.Reg[e][6] = new RegExp(`\\x1b${tcGroup[6]}`, \"gi\"); // 굵게!\n        RS.MessageSystem.Reg[e][7] = new RegExp(`\\x1b${tcGroup[7]}`, \"gi\"); // 이탤릭!\n        RS.MessageSystem.Reg[e][8] = new RegExp(\n            `\\x1b${tcGroup[8]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 이름\n        RS.MessageSystem.Reg[e][9] = new RegExp(\n            `\\x1b${tcGroup[9]}\\\\<(.+)\\\\>`,\n            \"gi\"\n        ); // 그레디언트\n        RS.MessageSystem.Reg[e][10] = new RegExp(\n            `(?:\\x1bP|\\x1b${tcGroup[10]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 파티원\n        RS.MessageSystem.Reg[e][11] = new RegExp(\n            `(?:\\x1bN|\\x1b${tcGroup[11]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 주인공\n        RS.MessageSystem.Reg[e][12] = new RegExp(\n            `(?:\\x1bV|\\x1b${tcGroup[12]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 변수\n        RS.MessageSystem.Reg[e][13] = new RegExp(\n            `(?:\\x1bI|\\x1b${tcGroup[13]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 아이콘\n        RS.MessageSystem.Reg[e][14] = new RegExp(\n            `(?:\\x1b{|\\x1b${tcGroup[14]})`,\n            \"gi\"\n        ); // 확대!\n        RS.MessageSystem.Reg[e][15] = new RegExp(\n            `(?:\\x1b}|\\x1b${tcGroup[15]})`,\n            \"gi\"\n        ); // 축소!\n        RS.MessageSystem.Reg[e][16] = new RegExp(\n            `(?:\\x1bG|\\x1b${tcGroup[16]})`,\n            \"gi\"\n        ); // 골드\n        RS.MessageSystem.Reg[e][17] = new RegExp(\n            `\\x1b${tcGroup[17]}\\\\[(.*?)\\\\]`,\n            \"gi\"\n        ); // 말풍선\n        RS.MessageSystem.Reg[e][18] = new RegExp(\n            `\\x1b${tcGroup[18]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 정렬자\n        RS.MessageSystem.Reg[e][19] = new RegExp(\n            `\\x1b${tcGroup[19]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 숫자\n        RS.MessageSystem.Reg[e][20] = new RegExp(\n            `\\x1b${tcGroup[20]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 크기\n        RS.MessageSystem.Reg[e][21] = new RegExp(`\\x1b${tcGroup[21]}`, \"gi\"); // r\n        RS.MessageSystem.Reg[e][22] = new RegExp(`\\x1b${tcGroup[22]}`, \"gi\"); // t\n        RS.MessageSystem.Reg[e][23] = new RegExp(\n            `\\x1b${tcGroup[23]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 효과음\n        RS.MessageSystem.Reg[e][24] = new RegExp(\n            `\\x1b${tcGroup[24]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 그림 표시\n        RS.MessageSystem.Reg[e][25] = new RegExp(\n            `\\x1b${tcGroup[25]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 그림 제거\n        RS.MessageSystem.Reg[e][26] = new RegExp(\n            `(?:\\x1b${tcGroup[26]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 아이템\n        RS.MessageSystem.Reg[e][27] = new RegExp(\n            `(?:\\x1b${tcGroup[27]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 무기구\n        RS.MessageSystem.Reg[e][28] = new RegExp(\n            `(?:\\x1b${tcGroup[28]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 방어구\n        RS.MessageSystem.Reg[e][29] = new RegExp(\n            `(?:\\x1b${tcGroup[29]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 직업\n        RS.MessageSystem.Reg[e][30] = new RegExp(\n            `(?:\\x1b${tcGroup[30]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 적군\n        RS.MessageSystem.Reg[e][31] = new RegExp(\n            `(?:\\x1b${tcGroup[31]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 상태\n        RS.MessageSystem.Reg[e][32] = new RegExp(\n            `(?:\\x1b${tcGroup[32]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 스킬\n        RS.MessageSystem.Reg[e][33] = new RegExp(\n            `\\x1b${tcGroup[33]}\\\\<(.*)\\\\>`,\n            \"gi\"\n        ); // 얼굴\n        RS.MessageSystem.Reg[e][34] = new RegExp(\n            `(?:\\x1b${tcGroup[34]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 아군\n        RS.MessageSystem.Reg[e][35] = new RegExp(\n            `(?:\\x1b${tcGroup[35]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 적군\n\n        RS.MessageSystem.Reg[e][36] = new RegExp(`\\x1b${tcGroup[36]}`, \"gi\"); // [.]\n        RS.MessageSystem.Reg[e][37] = new RegExp(`\\x1b${tcGroup[37]}`, \"gi\"); // [|]\n        RS.MessageSystem.Reg[e][38] = new RegExp(`\\x1b${tcGroup[38]}`, \"gi\"); // [!]\n        RS.MessageSystem.Reg[e][39] = new RegExp(`\\x1b${tcGroup[39]}`, \"gi\"); // [<]\n        RS.MessageSystem.Reg[e][40] = new RegExp(`\\x1b${tcGroup[40]}`, \"gi\"); // [>]\n        RS.MessageSystem.Reg[e][41] = new RegExp(`\\x1b${tcGroup[41]}`, \"gi\"); // [\\^]\n\n        RS.MessageSystem.Reg[e][42] = new RegExp(`\\x1b${tcGroup[42]}`, \"gi\"); // AS굵게!\n        RS.MessageSystem.Reg[e][43] = new RegExp(`\\x1b${tcGroup[43]}`, \"gi\"); // AE굵게!\n        RS.MessageSystem.Reg[e][44] = new RegExp(`\\x1b${tcGroup[44]}`, \"gi\"); // AS이탤릭!\n        RS.MessageSystem.Reg[e][45] = new RegExp(`\\x1b${tcGroup[45]}`, \"gi\"); // AE이탤릭!\n\n        RS.MessageSystem.Reg[e][46] = new RegExp(`(?:<${tcGroup[46]}>)`, \"gi\"); // LEFT\n        RS.MessageSystem.Reg[e][47] = new RegExp(`(?:<${tcGroup[47]}>)`, \"gi\"); // CENTER\n        RS.MessageSystem.Reg[e][48] = new RegExp(`(?:<${tcGroup[48]}>)`, \"gi\"); // RIGHT\n\n        RS.MessageSystem.Reg[e][49] = new RegExp(\n            `(?:<[${tcGroup[49]}]>)`,\n            \"gi\"\n        ); // B\n        RS.MessageSystem.Reg[e][50] = new RegExp(\n            `(?:<\\/[${tcGroup[50]}]>)`,\n            \"gi\"\n        ); // B\n        RS.MessageSystem.Reg[e][51] = new RegExp(\n            `(?:<[${tcGroup[51]}]>)`,\n            \"gi\"\n        ); // I\n        RS.MessageSystem.Reg[e][52] = new RegExp(\n            `(?:<\\/[${tcGroup[52]}]>)`,\n            \"gi\"\n        ); // I\n        RS.MessageSystem.Reg[e][53] = new RegExp(`\\x1b${tcGroup[53]}`, \"gi\"); // AEND : ALIGN_CLEAR\n        RS.MessageSystem.Reg[e][54] = new RegExp(\n            `\\x1b${tcGroup[54]}\\\\[(.*)\\\\]`,\n            \"gi\"\n        ); // \\배경색[색상] \\HC[색상]\n        RS.MessageSystem.Reg[e][55] = new RegExp(\n            `\\x1b${tcGroup[55]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // \\FD\n    });\n})();\n\nRS.MessageSystem.initSystem = function () {\n    var type = RS.MessageSystem.Params.langCode;\n    var ret = false;\n    if (type.match(/ko/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Korean;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.KoreanEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Korean;\n        ret = true;\n    }\n    if (type.match(/zh/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Chinese;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.ChineseEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Chinese;\n        ret = true;\n    }\n    if (type.match(/en/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.EnglishEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\n        ret = true;\n    }\n    if (type.match(/ja/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Japanese;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.JapaneseEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Japanese;\n        ret = true;\n    }\n    if (ret === false) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.EnglishEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\n    }\n};\n\n//=============================================================================\n// Color\n//=============================================================================\n\ninterface IColor {\n    getColor(c: number): string;\n    baseColor: string;\n    getBaseColor(): string;\n    getUserCustomColor(str: string): string;\n    gmColor(str: string): string;\n}\n\nexport const Color = <IColor>{};\n\nColor.getColor = function (n: number) {\n    var r = n & 255;\n    var g = (n >> 8) & 255;\n    var b = (n >> 16) & 255;\n    var result = `rgba(${r},${g},${b},1)`;\n    return result;\n};\n\nColor.baseColor = Color.getColor(16777215);\n\nColor.getBaseColor = function () {\n    return Color.baseColor;\n};\n\nColor.getUserCustomColor = function (str) {\n    \"use strict\";\n\n    var obj: any[] = RS.MessageSystem.Params.exTextColors;\n    var ret = str;\n\n    if (!(typeof obj[0] === \"object\")) return ret;\n    if (!obj[0].hasOwnProperty(\"Color Name\")) return ret;\n\n    obj.forEach((e: any, i: number, arr: any[]) => {\n        if (e[\"Color Name\"] === str) {\n            var r = parseInt(e[\"Red\"]) || 0;\n            var g = parseInt(e[\"Green\"]) || 0;\n            var b = parseInt(e[\"Blue\"]) || 0;\n            var a = parseFloat(e[\"Alpha\"]) || 1.0;\n\n            ret = `rgba(${r},${g},${b},${a})`;\n        }\n    });\n\n    return ret;\n};\n\nconst KOREAN_COLORS: Record<string, string> = {\n    청록: \"rgba(0,255,255,1)\",\n    청록색: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    검은색: \"rgba(0,0,0,1)\",\n    검정: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    파란색: \"rgba(0,0,255,1)\",\n    파랑: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    짙은회색: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    자홍색: \"rgba(255,0,255,1)\",\n    자홍: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    회색: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    녹색: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    밝은녹색: \"rgba(0,255,0,1)\",\n    라임: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    밝은회색: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    밤색: \"rgba(128,0,0,1)\",\n    마룬: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    감청색: \"rgba(0,0,128,1)\",\n    네이비: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    황록색: \"rgba(128,128,0,1)\",\n    올리브: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    주황색: \"rgba(255,160,64,1)\",\n    주황: \"rgba(255,160,64,1)\",\n    오렌지: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    보라색: \"rgba(128,0,128,1)\",\n    보라: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    빨간색: \"rgba(255,0,0,1)\",\n    빨강: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    은색: \"rgba(192,192,192,1)\",\n    은: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    민트색: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    흰색: \"rgba(255,255,255,1)\",\n    흰: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    노란색: \"rgba(255,255,0,1)\",\n    노랑: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst CHINESE_COLOR: Record<string, string> = {\n    水色: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    黑色: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    蓝色: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    深灰色: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    紫红色: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    灰色: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    绿色: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    浅绿色: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    浅灰色: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    栗色: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    绀青色: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    黄绿色: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    橙黄色: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    紫色: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    红色: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    银白色: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    水鸭色: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    白色: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    黄色: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst ENGLISH_COLOR: Record<string, string> = {\n    AQUA: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    BLACK: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    BLUE: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    DKGRAY: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    FUCHSIA: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    GRAY: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    GREEN: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    LIME: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    LTGRAY: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    MAROON: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    NAVY: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    OLIVE: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    ORANGE: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    PURPLE: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    RED: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    SILVER: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    TEAL: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    WHITE: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    YELLOW: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst JAPANESE_COLOR: Record<string, string> = {\n    水色: \"rgba(0,255,255,1)\",\n    アクア色: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    黑色: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    靑色: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    ふか灰色: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    紫紅色: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    灰色: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    綠色: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    黃綠: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    鼠色: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    \"―色\": \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    群青色: \"rgba(0,0,128,1)\",\n    ネイビー: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    黃綠色: \"rgba(128,128,0,1)\",\n    オリーブ色: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    橙色: \"rgba(255,160,64,1)\",\n    オレンジ色: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    紫色: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    赤色: \"rgba(255,0,0,1)\",\n    レッド: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    銀色: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    ミント色: \"rgba(0,128,128,1)\",\n    薄荷色: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    白色: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    黃色: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nRS.MessageSystem.getKoreanColor = function (str: string) {\n    let color = KOREAN_COLORS[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"기본\", \"기본색\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getChineseColor = function (str: string) {\n    let color = CHINESE_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"通常\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getEnglishColor = function (str: string) {\n    let color = ENGLISH_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if (\"c_normal\" === str) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getJapaneseColor = function (str: string) {\n    let color = JAPANESE_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"基本色\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getBrowser = function () {\n    /* Refer to https://stackoverflow.com/a/16938481 */\n    var ua = navigator.userAgent,\n        tem,\n        M =\n            ua.match(\n                /(opera|chrome|edge|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i\n            ) || [];\n\n    if (/trident/i.test(M[1])) {\n        tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n\n        return {\n            name: \"IE\",\n            version: tem[1] || \"\",\n        };\n    }\n\n    if (M[1] === \"Chrome\") {\n        tem = ua.match(/\\bOPR\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: \"Opera\",\n                version: tem[1],\n            };\n        }\n\n        tem = ua.match(/\\bEdge\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: \"Edge\",\n                version: tem[1],\n            };\n        }\n    }\n\n    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \"-?\"];\n\n    if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {\n        M.splice(1, 1, tem[1]);\n    }\n\n    return {\n        name: M[0],\n        version: M[1],\n    };\n};\n\nColor.gmColor = function (str: string) {\n    const type = <string>RS.MessageSystem.Params.langCode;\n    if (type.match(/ko/)) {\n        return RS.MessageSystem.getKoreanColor(str);\n    }\n    if (type.match(/zh/)) {\n        return RS.MessageSystem.getChineseColor(str);\n    }\n    if (type.match(/en/)) {\n        return RS.MessageSystem.getEnglishColor(str);\n    }\n    if (type.match(/ja/)) {\n        return RS.MessageSystem.getJapaneseColor(str);\n    }\n    return RS.MessageSystem.getEnglishColor(str);\n};\n\nwindow.RS = RS;\n","import { BaseComponent } from \"./BaseComponent\";\nimport { ComponentProp } from \"./Component\";\n\nexport type BalloonRectData = {\n    /**\n     *\n     */\n    mx: number;\n    /**\n     *\n     */\n    my: number;\n    /**\n     *\n     */\n    tx: number;\n    /**\n     *\n     */\n    ty: number;\n    /**\n     *\n     */\n    tileHeight: number;\n    /**\n     * Sets or gets `dx` that means the destination x coordinate.\n     */\n    dx: number;\n    /**\n     * Sets or gets `dy` that means the destination y coordinate.\n     */\n    dy: number;\n    /**\n     * Gets or sets the value related for the name window.\n     */\n    ny: number;\n    /**\n     *\n     */\n    scaleY: number;\n    /**\n     * Gets or sets the padding value (like value named `padding-bottom`)\n     * `screenX`와 `screenY`는 `right-bottom`에 위치하므로 `height` 만큼 빼야 합니다.\n     */\n    padY: number;\n};\n\n/**\n * @class BalloonWindowTransformComponent\n * @description\n * 말풍선 윈도우의 위치를 조정하기 위한 컴포넌트입니다.\n */\nexport class BalloonWindowTransformComponent extends BaseComponent {\n    private _bWidth: number = 0;\n    private _bHeight: number = 0;\n    public transform!: PIXI.Transform;\n\n    onReady(props: ComponentProp) {\n        super.onReady(props);\n        this._bWidth = this.width;\n        this._bHeight = this.height;\n    }\n\n    /**\n     * 말풍선 영역의 크기를 계산합니다.\n     *\n     * @param {String} text\n     * @returns {Number}\n     */\n    calcBalloonRect(text: string) {\n        // {\n        //     let temp: string,\n        //         baseWidth: number,\n        //         tempText: string[],\n        //         height: number,\n        //         min: number,\n        //         pad: number,\n        //         numOfLines: number;\n        //     // drawTextEx를 사용하기 전에 현재 상태를 저장한다.\n        //     this.save();\n\n        //     temp = text;\n\n        //     // 라인 갯수를 구하기 위해 텍스트를 줄바꿈 문자를 기준으로 나눈다.\n        //     const copyText = text.slice(0);\n        //     tempText = copyText.split(/[\\r\\n]+/);\n        //     numOfLines = tempText.length;\n\n        //     pad = this.standardPadding() * 2;\n\n        //     // 높이를 구한다.\n        //     height = 0;\n        //     tempText.forEach((i) => (height += this.calcBalloonRectHeight(i)));\n\n        //     if (height <= 0) {\n        //         // 높이를 구할 수 없었다면,\n        //         height = this.fittingHeight(numOfLines);\n        //     } else {\n        //         // 높이를 구했다면\n        //         height = height + pad;\n        //     }\n\n        //     const textPadding = this.textPadding();\n\n        //     // 폭을 계산한다.\n        //     let pw = 0;\n        //     for (var i = 0; i < numOfLines; i++) {\n        //         this._isUsedTextWidthEx = true;\n        //         const x = this.drawTextEx(tempText[i]);\n        //         this._isUsedTextWidthEx = false;\n        //         if (x >= pw) {\n        //             pw = x;\n        //         }\n        //     }\n\n        //     baseWidth = pw;\n        //     this._bWidth =\n        //         baseWidth + pad + textPadding || RS.MessageSystem.Params.WIDTH;\n\n        //     // 얼굴 이미지가 설정되어있다면 ?\n        //     if ($gameMessage.faceName() !== \"\") {\n        //         // 최소 높이를 설정한다.\n        //         min = this.fittingHeight(4);\n        //         // 기존 폭 값에 얼굴 이미지의 폭을 더한다.\n        //         this._bWidth += this.newLineX() + pad;\n        //         if (RS.MessageSystem.Params.faceDirection === 2) {\n        //             this._bWidth += ImageManager.faceWidth;\n        //         }\n        //         // 높이 값이 최소 높이보다 작으면, 최소 높이 값으로 설정한다.\n        //         if (height < min)\n        //             height = height.clamp(min, height + (min - height));\n        //     }\n\n        //     const type = RS.MessageSystem.Params.choiceWindowStyle;\n\n        //     // 선택지가 있고, XP 스타일로 설정했을 때\n        //     if (type === \"RMXP\" && $gameMessage.isChoice()) {\n        //         const maxLines = tempText.length;\n        //         const maxChoices = $gameMessage.choices().length;\n        //         const lineHeight = this.lineHeight();\n        //         // 선택지 갯수를 확장했을 수도 있지만, 4개로 가정한다.\n        //         height = height + maxChoices * lineHeight;\n        //         // 선택지 윈도우의 폭이 말풍선보다 크면 제한을 둔다.\n        //         if (this._choiceWindow.windowWidth() > this._bWidth) {\n        //             this._bWidth = this._choiceWindow.windowWidth();\n        //         }\n        //     }\n\n        //     this.restore();\n        // }\n        this.save();\n\n        {\n            // TODO: 얼굴 이미지 설정 체크\n            // TODO: 인라인 선택지 모드인지 체크\n\n            const rect = this.textSizeEx(text);\n            const padding = this.standardPadding();\n            this._bWidth = rect.width + padding * 2;\n            this._bHeight = Math.max(\n                rect.height + padding * 2,\n                this.fittingHeight(1)\n            );\n            // this.drawTextEx() 사용하기 이전 상태로 복구한다.\n        }\n        this.restore();\n    }\n\n    textSizeEx(text: string): TextSizeRect {\n        this.messageWindow._isUsedTextWidthEx = true;\n        const rect = this.messageWindow.textSizeEx(text);\n        this.messageWindow._isUsedTextWidthEx = false;\n\n        return rect;\n    }\n\n    /**\n     * @override\n     */\n    updatePlacement() {\n        this.messageWindow.updatePlacement();\n    }\n\n    isActiveInBalloon() {\n        const isInValidBalloon = $gameMessage.getBalloon() === -2;\n        if (isInValidBalloon) {\n            this.updatePlacement();\n            return false;\n        }\n        return true;\n    }\n\n    setBalloonRect(data: BalloonRectData) {\n        const faceName = $gameMessage.faceName();\n        const faceDirection = RS.MessageSystem.Params.faceDirection;\n\n        const ox = RS.MessageSystem.Params.windowOffset.x;\n        const oy = RS.MessageSystem.Params.windowOffset.y;\n        this.x = data.dx + ox;\n        this.y = data.dy + oy;\n        this.width = this._bWidth;\n        this.height = this._bHeight;\n\n        if (faceName && faceDirection === 2) {\n            this.drawMessageFace();\n        }\n    }\n\n    setBalloonPlacement(data: BalloonRectData): BalloonRectData | void {\n        const gw = Graphics.width;\n        const gh = Graphics.height;\n        const bw = Graphics.boxWidth;\n        const bh = Graphics.boxHeight;\n\n        console.log(\"setBalloonPlacement() + \" + JSON.stringify(data));\n        // 화면 좌측\n        if (!data) return;\n        if (data.mx - this._bWidth / 2 < 0) {\n            data.dx = 0;\n            data.tx = this.canvasToLocalX(data.mx);\n        }\n\n        // 화면 우측\n        if (data.mx - this._bWidth / 2 > bw - this._bWidth) {\n            data.dx = bw - this._bWidth;\n            data.tx = this.canvasToLocalX(data.mx);\n        }\n\n        // 화면 상단\n        if (data.my - this._bHeight - data.tileHeight / 2 < 0) {\n            data.dy = data.my + data.tileHeight / 2;\n            data.scaleY = -1;\n            data.ty = this._height * data.scaleY + this._height;\n            data.ny =\n                this.y + this._bHeight + RS.MessageSystem.Params.nameWindowY;\n        }\n\n        // 화면 하단\n        if (data.my - this._bHeight > bh - this._bHeight) {\n            data.dy = bh - this._bHeight;\n            data.ty = this._height;\n        }\n\n        return data;\n    }\n\n    /**\n     * Updates position of the pause sprite and the name window.\n     *\n     * @param data\n     */\n    updateSubBalloonElements(data: BalloonRectData) {\n        const _pauseSignSprite = this.messageWindow._pauseSignSprite;\n        if (_pauseSignSprite) {\n            _pauseSignSprite.move(data.tx, data.ty);\n            _pauseSignSprite.scale.y = data.scaleY;\n        }\n        this._nameWindow.y = data.ny;\n    }\n\n    getNameWindowY(): number {\n        const ny =\n            this.y -\n            this._nameWindow.height -\n            RS.MessageSystem.Params.nameWindowY;\n\n        return ny ? ny : 0;\n    }\n\n    // canvasToLocalX(x: number) {\n    //     let node: any = this.messageWindow;\n    //     while (node) {\n    //         x -= node.x;\n    //         node = <Sprite>node.parent;\n    //     }\n    //     return x;\n    // }\n\n    // canvasToLocalY(y: number) {\n    //     let node: any = this.messageWindow;\n    //     while (node) {\n    //         y -= node.y;\n    //         node = node.parent;\n    //     }\n    //     return y;\n    // }\n\n    updateBalloonPosition(): never | void {\n        console.log(\n            \"============ DEBUG updateBalloonPosition() ====================\"\n        );\n\n        let data = <BalloonRectData>{};\n\n        if (!this.isActiveInBalloon()) return;\n\n        // 말풍선 소유자의 화면 좌표\n        const owner = <Game_Character>$gameMap.getMsgOwner();\n\n        if (!owner) {\n            console.warn($gameMap.getMsgOwner());\n            throw new Error(\"말풍선 소유자가 없습니다.\");\n        }\n\n        data.mx = owner.screenX();\n        data.my = owner.screenY();\n\n        console.log(\"%d %d\", data.mx, data.my);\n\n        data.tx = this._bWidth / 2;\n        data.ty = this._bHeight;\n        data.scaleY = 1;\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\n        data.dx = data.mx - this._bWidth / 2;\n        data.dy = data.my - this._bHeight - data.tileHeight;\n        data.ny = this.getNameWindowY();\n\n        console.log(JSON.stringify(data));\n\n        data = <BalloonRectData>this.setBalloonPlacement(data);\n\n        if (\n            data.dx + RS.MessageSystem.Params.windowOffset.x !== this.x ||\n            data.dy + RS.MessageSystem.Params.windowOffset.y !== this.y ||\n            this._bWidth !== this.width ||\n            this._bHeight !== this.height\n        ) {\n            // 말풍선 위치 및 크기 설정\n            this.setBalloonRect(data);\n\n            // 멈춤 표시 스프라이트 위치 조정\n            this.updateSubBalloonElements(data);\n        }\n    }\n\n    updateBalloonPositionInBattle() {\n        if (!$gameParty.inBattle()) {\n            // 전투 씬인지 확인\n            console.warn(\"전투가 아닙니다\");\n            return;\n        }\n        if (!$gameSystem.isSideView()) {\n            // 사이드뷰 전투인지 확인\n            console.warn(\"사이드뷰 전투가 아닙니다.\");\n            return;\n        }\n\n        let data = <BalloonRectData>{};\n\n        // 타겟의 화면 좌표 설정\n        let owner = $gameMap.getMsgOwner();\n        if (!owner) {\n            console.warn(\"owner 변수가 없습니다\");\n            return;\n        }\n        if (!owner.hasOwnProperty(\"type\")) {\n            console.warn(\"type 속성이 없습니다 : \" + owner);\n            return;\n        }\n        if (!owner.hasOwnProperty(\"id\")) {\n            console.warn(\"id 속성이 없습니다 : \" + owner);\n            return;\n        }\n\n        // 현재 씬이 전투 씬이 아닌 경우를 확인한다.\n        let scene = SceneManager._scene;\n        if (!(scene instanceof Scene_Battle)) {\n            console.warn(\"전투 장면이 아닙니다\");\n            return false;\n        }\n\n        let parent;\n\n        // 액터인가?\n        if (owner.type === \"actor\") {\n            parent = scene._spriteset._actorSprites; // 액터 스프라이트 군을 반환\n        } else {\n            parent = scene._spriteset._enemySprites; // 적 스프라이트 군을 반환\n        }\n\n        // 타겟 스프라이트를 id 값으로 찾는다.\n        let tempBattlers = [];\n        tempBattlers = parent;\n        let target = tempBattlers[owner.id];\n        if (!target) {\n            console.warn(\"타겟이 없습니다\");\n            return;\n        }\n\n        // 이미 죽어있다면 메시지를 일반 메시지로 표시한다.\n        if (\n            (owner.type === \"actor\" &&\n                !(<Sprite_Actor>target)._actor.isAlive()) ||\n            (owner.type === \"enemy\" && !(<Sprite_Enemy>target)._enemy.isAlive())\n        ) {\n            return;\n        }\n\n        data.mx = target.x;\n        data.my = target.y;\n\n        data.padY =\n            owner.type === \"actor\"\n                ? (target as Sprite_Actor)._mainSprite.bitmap.height / 6\n                : target.bitmap.height;\n\n        data.tx = this._width / 2;\n        data.ty = this._height;\n\n        data.scaleY = 1;\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\n\n        data.dx = data.mx - this._bWidth / 2;\n        data.dy = data.my - this._bHeight - data.tileHeight - data.padY;\n\n        data.ny =\n            this.y -\n            this._nameWindow.height -\n            RS.MessageSystem.Params.nameWindowY;\n\n        data = <BalloonRectData>this.setBalloonPlacement(data);\n\n        // 말풍선 위치 및 크기 설정\n        this.setBalloonRect(data);\n\n        // 멈춤 표시 스프라이트 위치 조정\n        this.updateSubBalloonElements(data);\n\n        if (this.transform) this.updateTransform();\n    }\n\n    updateTransform(): void {\n        this.messageWindow.updateTransform();\n    }\n\n    calcBalloonRectHeight(text: string) {\n        // 상태 저장\n        this.save();\n\n        const messageWindow = this.messageWindow;\n        const tempFontSize = this.contents.fontSize;\n\n        const textState = messageWindow.createTextState(text, 0, 0, 0);\n        textState.text = messageWindow.convertEscapeCharacters(text);\n        textState.height = messageWindow.calcTextHeight(textState, false);\n\n        // 상태 복구\n        this.restore();\n\n        messageWindow.setTextSize(tempFontSize);\n        return textState.height;\n    }\n}\n","import { Component, ComponentProp } from \"./Component\";\n\n/**\n * @class BaseComponent\n * @description\n * 샌드박스 환경에서 MV 메소드를 호출하여 이전 버전에 대한 안전성을 제공합니다.\n */\nexport class BaseComponent extends Component {\n    private _messageWindow!: Window_Message;\n\n    constructor(props: ComponentProp) {\n        super(props);\n    }\n\n    onReady(props: ComponentProp) {\n        // if the message window is valid from passed props.\n        if (!(\"messageWindow\" in props)) {\n            console.error(\"messageWindow is not defined\");\n            return;\n        }\n\n        console.log(\"On Ready 이벤트가 실행되었습니다.\");\n\n        /**\n         * @type {Window_Message}\n         */\n        this._messageWindow = props.messageWindow;\n    }\n\n    // Getters\n    get messageWindow() {\n        return this._messageWindow;\n    }\n\n    get contents() {\n        return this._messageWindow.contents;\n    }\n\n    /**\n     * @returns {Window_NameBox}\n     */\n    get _nameWindow(): never | Window_NameBox {\n        const isNameWindowOK = this._messageWindow._nameBoxWindow;\n        if (!isNameWindowOK) {\n            throw new Error(\n                \"이름 윈도우가 아직 정의되지 않았습니다. DI를 제대로된 시점에 하시기 바랍니다.\"\n            );\n        }\n\n        return this._messageWindow._nameBoxWindow;\n    }\n\n    get _choiceWindow() {\n        return this._messageWindow._choiceListWindow\n            ? this._messageWindow._choiceListWindow\n            : {\n                  windowWidth: () => 0,\n                  windowHeight: () => 0,\n              };\n    }\n\n    save(): void {\n        this._messageWindow.save();\n    }\n\n    restore(): void {\n        this._messageWindow.restore();\n    }\n\n    standardPadding() {\n        // 패딩을 업데이트해야 합니다 (MZ에서 달라진 부분입니다)\n        // 꼭 체크할 필요는 없지만...\n        this._messageWindow.updatePadding();\n        const padding = this._messageWindow.padding || 12;\n\n        return padding;\n    }\n\n    textPadding() {\n        // textPadding()의 구현입니다.\n        return this._messageWindow.itemPadding() || 6;\n    }\n\n    newLineX() {\n        return this._messageWindow.newLineX();\n    }\n\n    fittingHeight(numLines: number) {\n        return this._messageWindow.fittingHeight(numLines);\n    }\n\n    drawTextEx(text: string) {\n        const box = this._messageWindow.textSizeEx(text);\n        return box.width;\n    }\n\n    lineHeight() {\n        return this._messageWindow.lineHeight();\n    }\n\n    /**\n     * TODO: 상속 시, 이 메소드를 오버라이드 하세요.\n     */\n    updatePlacement() {}\n\n    drawMessageFace() {\n        this._messageWindow.drawMessageFace();\n    }\n\n    set x(value: number) {\n        this._messageWindow.x = value;\n    }\n\n    set y(value: number) {\n        this._messageWindow.y = value;\n    }\n\n    set width(value: number) {\n        this._messageWindow.width = value;\n    }\n\n    set height(value: number) {\n        this._messageWindow.height = value;\n    }\n\n    get width() {\n        return this._messageWindow.width;\n    }\n\n    get _width() {\n        return this._messageWindow.width;\n    }\n\n    get height() {\n        return this._messageWindow.height;\n    }\n\n    get _height() {\n        return this._messageWindow.height;\n    }\n\n    canvasToLocalX(x: number) {\n        return x;\n    }\n\n    canvasToLocalY(y: number) {\n        return y;\n    }\n}\n","import { EventEmitter } from \"../EventEmitter\";\n\nexport type ComponentProp = {\n    messageWindow: Window_Message;\n    [key: string]: any;\n};\n\n/**\n * @class Component\n * @description\n * 컴포넌트를 구현하기 위한 클래스입니다.\n */\nexport class Component extends EventEmitter {\n    public name?: string;\n    private props?: ComponentProp;\n\n    constructor(props: ComponentProp) {\n        super();\n        this.init(props);\n    }\n\n    init(props: ComponentProp) {\n        this.props = props;\n\n        this.on(\"ready\", (props: ComponentProp) => this.onReady(props));\n        this.on(\"mounted\", (props: ComponentProp) => this.mounted(props));\n        this.on(\"destroy\", (props: ComponentProp) => this.onDestroy());\n    }\n\n    ready() {\n        this.emit(\"ready\", this.props);\n    }\n\n    destroy() {\n        this.emit(\"destroy\", this.props);\n    }\n\n    execute() {\n        this.emit(\"mounted\", this.props);\n    }\n\n    onReady(props: ComponentProp) {}\n    onDestroy() {}\n    mounted(props: ComponentProp) {}\n}\n","import { BaseComponent } from \"./BaseComponent\";\n\n/**\n * @class NamwWindowPositionComponent\n * @description\n * 이름 윈도우의 X좌표를 재설정합니다.\n */\nexport class NameWindowPositionComponent extends BaseComponent {\n    setOpacity(value: number) {\n        let opacity = value;\n        if (typeof opacity !== \"number\") {\n            opacity = Number(opacity);\n        }\n        if (isNaN(opacity)) {\n            opacity = 255;\n        }\n        this._nameWindow.opacity = value;\n    }\n\n    updatePositionX() {\n        // 이름 윈도우가 없다면\n        if (!this._nameWindow) {\n            return;\n        }\n\n        const mx = this.x;\n        const w = this.width;\n        const nw = this._nameWindow.width;\n\n        const position = <NameWindowPositon>(\n            RS.MessageSystem.Params.namePositionTypeAtX\n        );\n\n        const nx = RS.MessageSystem.Params.nameWindowX;\n\n        let newX = mx + nx;\n\n        switch (position) {\n            case \"right\":\n                newX = mx + w - nw - nx;\n                break;\n            case \"center\":\n                newX = mx + w / 2 - nw / 2 - nx;\n                break;\n            case \"left\":\n                newX = mx + nx;\n                break;\n            case \"opacity0\":\n                this.setOpacity(0);\n                break;\n            case \"defaultOpacity\":\n                this.setOpacity(RS.MessageSystem.Params.defaultOpacity);\n                break;\n            case \"auto\":\n                newX = this.x + this.newLineX() + nx;\n                break;\n        }\n\n        this._nameWindow.x = newX;\n    }\n\n    updatePositionY() {\n        const ox = RS.MessageSystem.Params.windowOffset.x;\n        const oy = RS.MessageSystem.Params.windowOffset.y;\n        const positionType = $gameMessage.positionType();\n        const ballonOwnerType = $gameMessage.getBalloon();\n\n        this.updatePositionX();\n\n        // 메시지 윈도우가 상단이고, 말풍선 모드가 아니라면\n        if (positionType === 0 && ballonOwnerType === -2) {\n            // 최상단의 위치\n            const topY = 0;\n\n            this._nameWindow.y = topY + oy;\n\n            // 이름 윈도우가 열렸는 지 여부에 따라 메시지 윈도우의 Y 좌표를 설정합니다.\n            this.y = this._nameWindow.isOpen()\n                ? topY +\n                  this._nameWindow.height +\n                  RS.MessageSystem.Params.nameWindowY +\n                  oy\n                : topY + oy;\n        } else {\n            this._nameWindow.y =\n                this.y -\n                this._nameWindow.height -\n                RS.MessageSystem.Params.nameWindowY;\n        }\n    }\n}\n","export function processBitmap(): Function {\n    return () => {\n        const alias_Bitmap_initialize = Bitmap.prototype.initialize;\n        Bitmap.prototype.initialize = function (width: number, height: number) {\n            alias_Bitmap_initialize.call(this, width, height);\n            this.fontBold = false;\n            this.fontGradient = false;\n            this.highlightTextColor = null;\n        };\n\n        Bitmap.prototype.setGradient = function (\n            text,\n            color1,\n            color2,\n            color3,\n            tx,\n            ty\n        ) {\n            const context = this._context;\n            const tWidth = this.measureTextWidth(text);\n            context.save();\n            const gradient = context.createLinearGradient(\n                tx,\n                0,\n                tx + tWidth,\n                0\n            );\n            gradient.addColorStop(0, color1);\n            gradient.addColorStop(0.6, color2);\n            gradient.addColorStop(1, color3);\n            context.restore();\n\n            this._baseTexture.update();\n\n            return gradient;\n        };\n\n        Bitmap.prototype.setGradientStyle = function (\n            text,\n            color1,\n            color2,\n            color3,\n            tx,\n            ty\n        ) {\n            const context = this._context;\n            const width = this.measureTextWidth(text);\n            const height = RS.MessageSystem.Params.lineHeight;\n            let grd;\n\n            context.save();\n\n            const style = RS.MessageSystem.Params.gradientStyle;\n\n            if (style !== \"radial\") {\n                if (style.contains(\"horizontal\")) {\n                    grd = context.createLinearGradient(tx, 0, tx + width, 0);\n                } else {\n                    grd = context.createLinearGradient(tx, 0, 0, ty + height);\n                }\n            } else {\n                const ws = width * 0.5;\n                const hs = height * 0.5;\n                grd = context.createRadialGradient(ws, hs, 0.0, ws, hs, ws);\n            }\n\n            if (style === \"radial\") {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(1.0, color2);\n            } else if (style.contains(\"axial\")) {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(0.5, color2);\n                grd.addColorStop(1.0, color3);\n            } else {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(1.0, color2);\n            }\n\n            context.restore();\n\n            this._baseTexture.update();\n\n            return grd;\n        };\n\n        Bitmap.prototype._makeFontNameText = function () {\n            return (\n                (this.fontItalic ? \"Italic \" : \"\") +\n                (this.fontBold ? \"bold \" : \"\") +\n                this.fontSize +\n                \"px \" +\n                this.fontFace\n            );\n        };\n\n        Bitmap.prototype._drawTextBody = function (text, tx, ty, maxWidth) {\n            const context = this._context;\n            context.save(); // 드로잉 상태 저장\n            context.imageSmoothingEnabled =\n                RS.MessageSystem.Params.fontSmoothingEnabled;\n\n            if (this.fontGradient) {\n                var gradient = this.setGradientStyle(\n                    text,\n                    RS.MessageSystem.Params.gradientColor1,\n                    RS.MessageSystem.Params.gradientColor2,\n                    RS.MessageSystem.Params.gradientColor3,\n                    tx,\n                    ty\n                );\n                context.fillStyle = gradient;\n            } else {\n                context.fillStyle = this.textColor;\n            }\n            context.fillText(text, tx, ty, maxWidth);\n            context.fillStyle = this.textColor;\n            context.restore();\n        };\n    };\n}\n","import { Color } from \"../RS\";\nimport { DependencyInjector } from \"../DependencyInjector\";\nimport { BalloonWindowTransformComponent } from \"../components/BalloonWindowTransformComponent\";\n\nexport function processMain(): Function {\n    return () => {\n        //============================================================================\n        // Game_Message\n        //============================================================================\n        const alias_Game_Message_clear = Game_Message.prototype.clear;\n        Game_Message.prototype.clear = function () {\n            alias_Game_Message_clear.call(this);\n            this._waitTime = 0;\n            this._gradientText = \"\";\n            this._balloon = -2;\n            this._align = [];\n            this._balloonPatternHeight = 0;\n            this._lastAlign = -1;\n        };\n\n        Game_Message.prototype.setWaitTime = function (time) {\n            this._waitTime = time;\n        };\n\n        Game_Message.prototype.setGradientText = function (text) {\n            this._gradientText = text;\n        };\n\n        Game_Message.prototype.getWaitTime = function () {\n            return this._waitTime || 0;\n        };\n\n        Game_Message.prototype.getGradientText = function () {\n            return this._gradientText;\n        };\n\n        Game_Message.prototype.getMaxLine = function () {\n            return this._maxLine;\n        };\n\n        Game_Message.prototype.setMaxLine = function (maxLine) {\n            this._maxLine = maxLine;\n            RS.MessageSystem.Params.numVisibleRows = maxLine;\n        };\n\n        Game_Message.prototype.setBalloon = function (n) {\n            this._balloon = n;\n        };\n\n        Game_Message.prototype.getBalloon = function (n) {\n            return this._balloon;\n        };\n\n        Game_Message.prototype.setAlign = function (n) {\n            this._align = this._align || [];\n            this._lastAlign = n; // 마지막 정렬 위치 기억\n            this._align.push(n);\n        };\n\n        Game_Message.prototype.getAlign = function (n) {\n            const last = this._align.shift();\n            if (last === undefined) {\n                return this._lastAlign;\n            }\n            return last;\n        };\n\n        Game_Message.prototype.clearAlignLast = function (n) {\n            this._lastAlign = -1;\n        };\n\n        Game_Message.prototype.setBalloonPatternHeight = function (\n            value: number\n        ) {\n            this._balloonPatternHeight = value;\n        };\n\n        Game_Message.prototype.getBalloonPatternHeight = function () {\n            return this._balloonPatternHeight;\n        };\n\n        //============================================================================\n        // Sprite_Battler\n        //============================================================================\n        Sprite_Battler.prototype.screenX = function () {\n            return this.x || 0;\n        };\n\n        Sprite_Battler.prototype.screenY = function () {\n            return this.y || 0;\n        };\n\n        //============================================================================\n        // MessageDesc\n        //============================================================================\n        class MessageDesc {\n            public fontFace: string;\n            public fontSize: number;\n            public fontBold: boolean;\n            public fontItalic: boolean;\n            public textColor: string;\n            public outlineColor: string;\n            public outlineWidth: number;\n            public fontGradient: boolean;\n            public highlightTextColor: string | null;\n            public textSpeed: number;\n\n            private _isSaved: boolean;\n\n            constructor() {\n                this.fontFace = \"Nanum Gothic\";\n                this.fontSize = 12;\n                this.fontBold = false;\n                this.fontItalic = false;\n                this.textColor = \"#000\";\n                this.outlineColor = \"#fff\";\n                this.outlineWidth = 1;\n                this.fontGradient = false;\n                this.highlightTextColor = null;\n                this.textSpeed = 1;\n\n                this._isSaved = false;\n            }\n\n            save<T extends Window_Base>(messageWindow: T) {\n                this.fontFace = messageWindow.contents.fontFace;\n                this.fontSize = +messageWindow.contents.fontSize;\n                this.fontBold = messageWindow.contents.fontBold;\n                this.fontItalic = messageWindow.contents.fontItalic;\n                this.textColor = messageWindow.contents.textColor;\n                this.outlineColor = messageWindow.contents.outlineColor;\n                this.outlineWidth = messageWindow.contents.outlineWidth;\n                this.fontGradient = messageWindow.contents.fontGradient;\n                this.highlightTextColor =\n                    messageWindow.contents.highlightTextColor;\n\n                if ($gameMessage) {\n                    this.textSpeed = $gameMessage.getWaitTime();\n                }\n\n                this._isSaved = true;\n            }\n\n            restore<T extends Window_Base>(messageWindow: T) {\n                if (!this._isSaved) return;\n                if (!(messageWindow.contents instanceof Bitmap)) return;\n                messageWindow.contents.fontFace = this.fontFace;\n                messageWindow.contents.fontSize = this.fontSize;\n                messageWindow.contents.fontBold = this.fontBold;\n                messageWindow.contents.fontItalic = this.fontItalic;\n                messageWindow.contents.textColor = this.textColor;\n                messageWindow.contents.outlineColor = this.outlineColor;\n                messageWindow.contents.outlineWidth = this.outlineWidth;\n                messageWindow.contents.fontGradient = this.fontGradient;\n                messageWindow.contents.highlightTextColor =\n                    this.highlightTextColor;\n                if ($gameMessage) {\n                    $gameMessage.setWaitTime(this.textSpeed);\n                }\n                this._isSaved = false;\n            }\n        }\n\n        //============================================================================\n        // Window_Base\n        //============================================================================\n        Window_Base.prototype.obtainEscapeCode = function (textState) {\n            const regExp = RS.MessageSystem.Reg.defaultEscapeCode;\n            const arr = regExp.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return arr[0].toUpperCase();\n            } else {\n                return \"\";\n            }\n        };\n\n        /**\n         * 확장된 색상 변경 텍스트 코드 처리\n         * \\색[빨강]과 웹색상 처리를 위한 정규 표현식 처리\n         * @param {}} textState\n         */\n        Window_Base.prototype.obtainNameColor = function (textState) {\n            const arr = /\\[(.+?)\\]/gi.exec(\n                textState.text.slice(textState.index)\n            );\n            if (arr) {\n                textState.index += arr[0].length;\n                return Color.gmColor(arr[1]);\n            } else {\n                return ColorManager.textColor(0);\n            }\n        };\n\n        Window_Base.prototype.changeTextColor = function (color) {\n            const c = parseInt(color);\n            // 색상 코드가 숫자인 경우\n            if (c > 0 && c < 32) {\n                color = ColorManager.textColor(color);\n            }\n            // if (!this._isUsedTextWidthEx) {\n            this.contents.textColor = color;\n            // }\n        };\n\n        const alias_Window_Base_processEscapeCharacter =\n            Window_Base.prototype.processEscapeCharacter;\n        Window_Base.prototype.processEscapeCharacter = function (\n            code,\n            textState\n        ) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            switch (code) {\n                case \"C\":\n                    this.changeTextColor(\n                        this.textColor(\n                            <number>this.obtainEscapeParam(textState)\n                        )\n                    );\n                    break;\n                case textCode[tcGroup.COLOR]:\n                    this.changeTextColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case \"I\":\n                case textCode[tcGroup.ICON]:\n                    this.processDrawIcon(\n                        <number>this.obtainEscapeParam(textState),\n                        textState\n                    );\n                    break;\n                case \"{\":\n                case textCode[tcGroup.INCREASE]:\n                    this.makeFontBigger();\n                    break;\n                case \"}\":\n                case textCode[tcGroup.DECREASE]:\n                    this.makeFontSmaller();\n                    break;\n                case \"AEND\":\n                    $gameMessage.clearAlignLast();\n                    break;\n                default:\n                    alias_Window_Base_processEscapeCharacter.call(\n                        this,\n                        code,\n                        textState\n                    );\n                    break;\n            }\n        };\n\n        const alias_loadWindowskin = Window_Base.prototype.loadWindowskin;\n        Window_Base.prototype.loadWindowskin = function () {\n            alias_loadWindowskin.call(this);\n            this.windowskin.addLoadListener(() => {\n                Color.baseColor = ColorManager.textColor(0);\n            });\n        };\n\n        Window_Base.prototype.getFontFace = function () {\n            const langCode =\n                RS.MessageSystem.Params.langCode ||\n                navigator.language.slice(0, 2);\n            const fonts = RS.MessageSystem.Params.fonts[langCode];\n            if (fonts) {\n                return fonts;\n            } else {\n                return RS.MessageSystem.Params.fonts.default;\n            }\n        };\n\n        Window_Base.prototype.drawTextEx = function (text, x, y, width) {\n            this.save();\n            this.resetFontSettings();\n            const textState = this.createTextState(text, x, y, width);\n            this.processAllText(textState);\n            this.restore();\n            return textState.outputWidth;\n        };\n\n        // Window_Base.prototype.processAllText = function (textState) {\n        //     this._isUsedTextWidthEx = !textState.drawing;\n        //     while (textState.index < textState.text.length) {\n        //         this.processCharacter(textState);\n        //     }\n        //     this.flushTextState(textState);\n        // };\n        Window_Base.prototype.makeFontSmaller = function () {\n            if (this.contents.fontSize >= RS.MessageSystem.Params.minFontSize) {\n                this.contents.fontSize -= 12;\n            }\n        };\n\n        Window_Base.prototype.resetFontSettings = function () {\n            this.contents.fontFace = this.getFontFace();\n            this.contents.fontSize = RS.MessageSystem.Params.fontSize;\n            this.contents.fontBold = false;\n            this.contents.fontItalic = false;\n            this.contents.outlineWidth =\n                RS.MessageSystem.Params.defaultOutlineWidth;\n            this.contents.outlineColor =\n                RS.MessageSystem.Params.defaultOutlineColor;\n\n            this.contents.fontGradient = false;\n            this.contents.highlightTextColor = null;\n            this.resetTextColor();\n        };\n\n        Window_Base.prototype.makeFontBigger = function () {\n            if (this.contents.fontSize <= RS.MessageSystem.Params.maxFontSize) {\n                this.contents.fontSize += 12;\n            }\n        };\n\n        Window_Base.prototype.save = function () {\n            this._messageDesc = new MessageDesc();\n            this._messageDesc.save(this);\n            console.log(this._messageDesc);\n        };\n\n        Window_Base.prototype.restore = function () {\n            if (!this._messageDesc) return;\n            this._messageDesc.restore(this);\n            this._messageDesc = undefined;\n        };\n\n        const alias_Window_Base_convertEscapeCharacters =\n            Window_Base.prototype.convertEscapeCharacters;\n        Window_Base.prototype.convertEscapeCharacters = function (text) {\n            const regGroup = RS.MessageSystem.Reg.Group;\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n\n            text = alias_Window_Base_convertEscapeCharacters.call(this, text);\n            text = text.replace(\n                regGroup[tcGroup.VAR],\n                function (...args: any[]): string {\n                    return $gameVariables\n                        .value(parseInt(<string>args[1]))\n                        .toString();\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.VAR],\n                function (...args: any[]) {\n                    return $gameVariables.value(parseInt(args[1])).toString();\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.PLAYER], (...args: any[]) => {\n                return this.actorName(parseInt(args[1]));\n            });\n            text = text.replace(\n                regGroup[tcGroup.PARTY_MEMBER],\n                (...args: any[]) => {\n                    return this.partyMemberName(parseInt(args[1]));\n                }\n            );\n            text = text.replace(\n                regGroup[tcGroup.NUM],\n                function (...args: any[]) {\n                    return args[1].toComma();\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.GOLD],\n                TextManager.currencyUnit\n            );\n            text = text.replace(\n                regGroup[tcGroup.CLASSES],\n                function (...args: any[]) {\n                    return $dataClasses[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITEM],\n                function (...args: any[]) {\n                    return $dataItems[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.WEAPON],\n                function (...args: any[]) {\n                    return $dataWeapons[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ARMOR],\n                function (...args: any[]) {\n                    return $dataArmors[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ENEMY],\n                function (...args: any[]) {\n                    return $dataEnemies[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.STATE],\n                function (...args: any[]) {\n                    return $dataStates[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.SKILL],\n                function (...args: any[]) {\n                    return $dataSkills[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_LEFT],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[0]\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_CENTER],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[1]\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_RIGHT],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[2]\";\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.ALIGN], (...args: any[]) => {\n                if (!this._isUsedTextWidthEx) {\n                    $gameMessage.setAlign(Number(args[1] || 0));\n                }\n                return \"\";\n            });\n            text = text.replace(\n                /<\\/LEFT>|<\\/CENTER>|<\\/RIGHT>/gi,\n                function () {\n                    return regGroup[tcGroup.ALIGN_CLEAR].source;\n                }.bind(this)\n            );\n            return text;\n        };\n\n        /**\n         * @deprecated\n         */\n        Window_Base.prototype.textPadding = function () {\n            return this.itemPadding();\n        };\n\n        Window_Base.prototype.newLineX = function (textState) {\n            return this.textPadding();\n        };\n\n        Window_Base.prototype.processAlign = function (textState) {\n            textState = textState || this._textState;\n\n            const isArabic = textState.rtl;\n\n            if (isArabic) {\n                return;\n            }\n\n            switch ($gameMessage.getAlign()) {\n                case 0:\n                    this.setAlignLeft(textState);\n                    break;\n                case 1:\n                    this.setAlignCenter(textState);\n                    break;\n                case 2:\n                    this.setAlignRight(textState);\n                    break;\n            }\n        };\n\n        const alias_Window_Base_processNewLine_align =\n            Window_Base.prototype.processNewLine;\n        Window_Base.prototype.processNewLine = function (textState) {\n            alias_Window_Base_processNewLine_align.call(this, textState);\n            this.processAlign(<TextState>textState);\n        };\n\n        Window_Base.prototype.setAlignLeft = function (textState) {\n            textState.x = this.newLineX(textState);\n            textState.startX = textState.x;\n        };\n\n        Window_Base.prototype.setAlignCenter = function (textState) {\n            const padding = this.textPadding();\n            textState.x =\n                (this.newLineX(textState) + this.contentsWidth() + padding) /\n                    2 -\n                textState.outputWidth / 2;\n            textState.startX = textState.x;\n        };\n\n        Window_Base.prototype.setAlignRight = function (textState) {\n            const padding = this.textPadding();\n            textState.x =\n                this.contentsWidth() - padding - textState.outputWidth;\n            textState.startX = textState.x;\n        };\n\n        //============================================================================\n        // Window_Message\n        //============================================================================\n        Window_Message.prototype.obtainTextSpeed = function (textState) {\n            const arr = /\\[(\\d+)\\]/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return parseInt(arr[1]);\n            } else {\n                return 0;\n            }\n        };\n\n        Window_Message.prototype.obtainGradientText = function (textState) {\n            const arr = /^<(.+?)>/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return String(arr[1]);\n            } else {\n                return \"Empty Text\";\n            }\n        };\n\n        Window_Message.prototype.obtainSoundName = function (textState) {\n            const arr = /\\<(.+?)\\>/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return String(arr[1]);\n            } else {\n                return \"\";\n            }\n        };\n\n        const alias_Window_Message_processEscapeCharacter =\n            Window_Message.prototype.processEscapeCharacter;\n        Window_Message.prototype.processEscapeCharacter = function (\n            code,\n            textState: TextState | string\n        ) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            switch (code) {\n                case textCode[tcGroup.TEXT_SPEED]:\n                    $gameMessage.setWaitTime(\n                        <number>this.obtainEscapeParam(textState)\n                    );\n                    break;\n                case textCode[tcGroup.TEXT_SIZE]:\n                    this.setTextSize(<number>this.obtainEscapeParam(textState));\n                    break;\n                case textCode[tcGroup.OUTLINE_COLOR]:\n                    this.setStrokeColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.INDENT]:\n                    this.setTextIndent(<TextState>textState);\n                    break;\n                case textCode[tcGroup.OUTLINE_WIDTH]:\n                    this.setStrokeWidth(\n                        <number>this.obtainEscapeParam(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.BOLD]:\n                    this.setTextBold(!this.contents.fontBold);\n                    break;\n                case textCode[tcGroup.BOLD_START]:\n                    this.setTextBold(true);\n                    break;\n                case textCode[tcGroup.BOLD_END]:\n                    this.setTextBold(false);\n                    break;\n                case textCode[tcGroup.ITALIC]:\n                    this.setTextItalic(!this.contents.fontItalic);\n                    break;\n                case textCode[tcGroup.ITALIC_START]:\n                    this.setTextItalic(true);\n                    break;\n                case textCode[tcGroup.ITALIC_END]:\n                    this.setTextItalic(false);\n                    break;\n                case textCode[tcGroup.GRADIENT]:\n                    this.setTextGradient(<TextState>textState);\n                    break;\n                case textCode[tcGroup.HIGHLIGHT_TEXT_COLOR]:\n                    this.setHighlightTextColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.TAB]:\n                    (<TextState>textState).x += Number(\n                        this.textWidth(\"A\") * RS.MessageSystem.Params.TabSize\n                    );\n                    break;\n                case textCode[tcGroup.CARRIAGE_RETURN]:\n                    (<TextState>textState).x = Number(\n                        (textState as TextState).startX || 0\n                    );\n                    if (!this._isUsedTextWidthEx) this.startWait(1);\n                    break;\n                case textCode[tcGroup.PLAY_SE]:\n                    if (!this._isUsedTextWidthEx)\n                        this.playSe(this.obtainSoundName(<TextState>textState));\n                    break;\n                case textCode[tcGroup.SHOW_PICTURE]:\n                    if (this._isUsedTextWidthEx) break;\n                    this.showPicture(\n                        this.obtainSoundName(<TextState>textState)\n                    );\n                    this.startWait(15);\n                case textCode[tcGroup.HIDE_PICTURE]:\n                    if (this._isUsedTextWidthEx) break;\n                    this.erasePicture(\n                        <number>this.obtainEscapeParam(textState)\n                    );\n                    this.startWait(15);\n                case textCode[tcGroup.FACE]:\n                    if (this._isUsedTextWidthEx) break;\n                    var params = this.obtainSoundName(\n                        <TextState>textState\n                    ).split(\",\");\n                    // this.redrawFaceImage(textState, params[0], params[1], 0, 0);\n                    this.startWait(1);\n                    break;\n                default:\n                    alias_Window_Message_processEscapeCharacter.call(\n                        this,\n                        code,\n                        textState\n                    );\n                    break;\n            }\n        };\n\n        Window_Message.prototype.setTextItalic = function (...args) {\n            this.contents.fontItalic = args[0];\n        };\n\n        Window_Message.prototype.setTextBold = function (...args) {\n            this.contents.fontBold = args[0];\n        };\n\n        Window_Message.prototype.setTextSize = function (...args) {\n            this.contents.fontSize = args[0].clamp(\n                RS.MessageSystem.Params.minFontSize,\n                RS.MessageSystem.Params.maxFontSize\n            );\n        };\n\n        Window_Message.prototype.setStrokeWidth = function (...args) {\n            this.contents.outlineWidth = args[0];\n        };\n\n        Window_Message.prototype.setStrokeColor = function (...args) {\n            this.contents.outlineColor = args[0];\n        };\n\n        Window_Message.prototype.setTextIndent = function (textState) {\n            const value = parseInt(<string>this.obtainEscapeParam(textState));\n            textState.x += value;\n        };\n\n        Window_Message.prototype.setHighlightTextColor = function (\n            ...args: any[]\n        ) {\n            let color: any = args[0];\n            if (color === \"null\" || color === \"없음\") {\n                color = null;\n            }\n            this.contents.highlightTextColor = color;\n        };\n\n        Window_Message.prototype.setTextGradient = function (textState) {\n            // TODO: 여기에서는 텍스트를 그리지 않는다.\n            // TODO: 그레디언트 모드임을 명시하고 flush 단계에서 한 번에 그려야 한다 (배경색도 마찬가지이다)\n            this.contents.fontGradient = true;\n        };\n\n        Window_Message.prototype.playSe = function (seName) {\n            const realName = seName.trim();\n            const data = <rm.types.AudioParameters>{\n                name: realName,\n                pan: 0,\n                pitch: 100,\n                volume: (<any>ConfigManager).seVolume,\n            };\n            AudioManager.playSe(data);\n        };\n\n        Window_Message.prototype.showPicture = function (param: string) {\n            const raw = param.split(\",\").map((e) => {\n                return e.trim();\n            });\n\n            let params = [\n                Number(raw[0]),\n                raw[1],\n                Number(raw[2]),\n                Number(raw[3]),\n                Number(raw[4]),\n                100,\n                100,\n                255,\n                0,\n            ];\n            let ret = true;\n\n            // 모든 요소 검증\n            if (params) {\n                params.forEach((e, i, a) => {\n                    if (e === undefined || e === null) {\n                        ret = false;\n                    }\n                });\n            }\n            // 검증 결과가 참이라면 그림 표시\n            if (ret) {\n                $gameScreen.showPicture.apply($gameScreen, <any>params);\n                return true;\n            }\n            return false;\n        };\n\n        Window_Message.prototype.erasePicture = function (picId) {\n            if (typeof picId !== \"number\") return;\n            $gameScreen.erasePicture(picId);\n        };\n\n        // 구조가 변경된 메서드\n        Window_Message.prototype.resetFontSettings = function () {\n            Window_Base.prototype.resetFontSettings.call(this);\n\n            // pause 아이콘 표시 위치 초기화\n            if (this._pauseSignSprite) {\n                this._pauseSignSprite.move(this._width / 2, this._height);\n                this._pauseSignSprite.scale.y = 1;\n            }\n\n            $gameMessage.setWaitTime(RS.MessageSystem.Params.textSpeed);\n        };\n\n        // 새로 추가된 메서드\n        Window_Message.prototype.resetGradient = function (textState) {\n            this.contents.fontGradient = false;\n        };\n\n        // 폰트 사이즈 설정 메서드는 MZ에서 없다\n        Window_Message.prototype.numVisibleRows = function () {\n            return RS.MessageSystem.Params.numVisibleRows;\n        };\n\n        /**\n         * Create text state included px and py values for text word wrapping.\n         */\n        const alias_Window_Message_createTextState =\n            Window_Message.prototype.createTextState;\n        Window_Message.prototype.createTextState = function (\n            text,\n            x,\n            y,\n            width\n        ) {\n            let textState = alias_Window_Message_createTextState.call(\n                this,\n                text,\n                x,\n                y,\n                width\n            );\n\n            const px = textState.x;\n            const py = textState.y;\n\n            // mixin\n            Object.assign(textState, {\n                px,\n                py,\n            });\n\n            return textState;\n        };\n\n        Window_Message.prototype.processWordWrap = function (\n            textState,\n            w,\n            width,\n            isValid\n        ) {\n            const px = <Required<number>>textState.px;\n\n            if (Math.floor(px + w * 2) > width) {\n                if (isValid) {\n                    this.processNewLine(textState);\n                    if (this.needsNewPage(textState)) {\n                        this.startPause();\n                    }\n                }\n            }\n        };\n\n        const alias_Window_Message_processNewLinePW =\n            Window_Message.prototype.processNewLine;\n        Window_Message.prototype.processNewLine = function (textState) {\n            alias_Window_Message_processNewLinePW.call(this, textState);\n            // 내부 버퍼의 위치를 시작 지점으로 초기화한다.\n            (<TextState>textState).px =\n                textState.startX || (<TextState>textState).x;\n\n            // background buffer 초기화\n            if (this._backBuffer && this._backBuffer.isDirty) {\n                const backTextState = this._backBuffer.textState;\n            }\n        };\n\n        /**\n         * ! Override\n         * @param {Object} textState\n         */\n        Window_Message.prototype.processCharacter = function (textState) {\n            const c = textState.text[textState.index++];\n            if (c.charCodeAt(0) < 0x20) {\n                this.flushTextState(textState);\n                this.processControlCharacter(textState, c);\n            } else {\n                textState.buffer += c;\n\n                // 내부 버퍼의 위치를 누적 계산한다.\n                textState.px += this.textWidth(c);\n            }\n        };\n\n        const alias_Window_Message_processCharacter =\n            Window_Message.prototype.processCharacter;\n        Window_Message.prototype.processCharacter = function (textState) {\n            // 이전 텍스트의 길이를 계산한다.\n            let isDirty = false;\n            const preBuffer = textState.buffer || \"\";\n            let preLen = preBuffer.length;\n\n            alias_Window_Message_processCharacter.call(this, textState);\n\n            // 새로운 텍스트가 이후에 있는가?\n            // 그게 문자인지 제어 문자인지는 이 로직에선 알 수 없다.\n            const postBuffer = textState.buffer || \"\";\n            const postLen = postBuffer.length;\n            if (preLen !== postLen) {\n                isDirty = true;\n            }\n\n            if (isDirty) {\n                // 끝에 있는 글자를 가지고 온다.\n                // 하지만 제어 문자인지는 확인하지 않는다.\n                // 제어 문자 여부는 메인 로직에서 판단하게 둔다.\n                const c = textState.buffer.substr(\n                    textState.buffer.length - 1,\n                    1\n                );\n                this.processNormalCharacterProxy(textState, c);\n            }\n        };\n\n        /**\n         * MZ에서는 processNormalCharacter의 구현이 없다.\n         * 하지만, 자동 개행이나 사운드 재생 그리고 배경색 묘화를 위해 위치 계산이 필요하다.\n         * 이 때문에 추가한 메서드이며, 텍스트의 묘화를 하진 않는다.\n         * @param {*} textState\n         * @param {*} c\n         */\n        Window_Message.prototype.processNormalCharacterProxy = function (\n            textState,\n            c\n        ) {\n            // MZ에서는 텍스트 상태(textState)가 다음 제어 문자가 등장해야 flush 처리된다.\n            // 따라서 이곳에서는 텍스트가 그려질 수 없다.\n            const w = this.textWidth(c);\n            let width = this.contentsWidth();\n\n            // 일반 메시지 모드에서만 동작 한다.\n            const isNormalMessageWindow = $gameMessage.getBalloon() === -2;\n            const isRealDrawingMode = textState.drawing;\n            let isValid =\n                isNormalMessageWindow &&\n                isRealDrawingMode &&\n                RS.MessageSystem.Params.isParagraphMinifier;\n\n            // 소수점 자리를 버려야 정확히 계산된다.\n            this.processWordWrap(textState, w, width, isValid);\n\n            const contents = this.contents;\n            const faceName = $gameMessage.faceName();\n\n            // if the faceName is not empty and the face direction is to right?\n            if (faceName !== \"\") {\n                width = contents.width - ImageManager.faceWidth;\n                isValid = RS.MessageSystem.Params.faceDirection === 2;\n                this.processWordWrap(textState, w, width, isValid);\n            }\n\n            // 배경색의 위치를 계산하고 비트맵 인스턴스를 생성한다.\n            const isValidTextBackground = contents.highlightTextColor !== null;\n            if (isValidTextBackground) {\n                const contentW = Math.floor(w * 2) + 1.0;\n                const contentH = this.lineHeight();\n\n                // 내부 버퍼의 텍스트 위치를 받아옵니다 (글자 하나의 버퍼 위치)\n                const { px, py } = <TextState>textState;\n\n                // 배경 버퍼의 생성\n                this._backBuffer = {\n                    buffer: new Bitmap(contentW, contentH),\n                    textState: textState,\n                    isDirty: false,\n                    x: px,\n                    y: py,\n                };\n\n                // 배경 버퍼는 내부 버퍼의 초기 위치로부터 계산된다.\n                this._backBuffer.buffer.fillAll(\n                    <string>contents.highlightTextColor\n                );\n                // 이 플래그가 활성화되어있다면 flushTextState에서 그리기 처리를 해야 한다.\n                this._backBuffer.isDirty = true;\n                this._backBuffer.textState = textState;\n            }\n        };\n\n        const alias_Window_Message_flushTextState =\n            Window_Message.prototype.flushTextState;\n        Window_Message.prototype.flushTextState = function (\n            textState: TextState\n        ) {\n            const isDrawing = textState.drawing; // !this._isUsedTextWidthEx와 같은 효과\n            const isSlowTextMode =\n                !this._showFast && !this.isEndOfText(textState) && isDrawing;\n            const isDrawingTextBackground =\n                isDrawing && this._backBuffer && this._backBuffer.isDirty;\n\n            if (isSlowTextMode) {\n                this.startWait($gameMessage.getWaitTime() || 0);\n            }\n\n            // 텍스트 코드를 만나면, flush가 시작되는데 배경색의 시작 라인이 달라지면,\n            // 다음 라인까지 배경색이 제대로 그려지지 않게 됩니다.\n            // 이는 MZ에서는 버퍼 방식이기 때문에 한 글자씩 배경색이 그려지지 않기 때문입니다.\n            // 따라서 라인이 달라질 때, flushBackground를 해줘야 합니다.\n            if (isDrawingTextBackground && isDrawing) {\n                const backBuffer = this._backBuffer;\n                const bitmap = backBuffer.buffer;\n                const backTextState = backBuffer.textState!;\n\n                if (backTextState.py !== textState.y) {\n                    this._backBuffer.isDirty = false;\n                    alias_Window_Message_flushTextState.call(this, textState);\n                    return;\n                }\n                let tx = backBuffer.x;\n                let ty = backBuffer.y;\n                const x = textState.x;\n                const y = textState.y;\n                const w = Math.min(this.innerWidth, Math.floor(bitmap.width));\n                const h = Math.min(this.innerHeight, Math.floor(bitmap.height));\n\n                // this.contents.blt(\n                //     bitmap,\n                //     0,\n                //     0,\n                //     w,\n                //     h,\n                //     Math.min(tx, y),\n                //     Math.min(ty, y)\n                // );\n                this._backBuffer.isDirty = false;\n            }\n\n            alias_Window_Message_flushTextState.call(this, textState);\n        };\n\n        /**\n         * 새로운 라인이 시작되기 전에 이전 라인에 그려야 할 배경색을 마저 그리는 기능입니다.\n         */\n        Window_Message.prototype.flushTextBackgbround = function (\n            textState: TextState\n        ) {};\n\n        Window_Message.prototype.updateBigFaceOpacity = function () {\n            if (!this._faceContents) {\n                return;\n            }\n            let { faceOpacity } = RS.MessageSystem.Params;\n            if (!faceOpacity) faceOpacity = 255;\n            const value = faceOpacity.clamp(0, 255);\n            this._faceContents.opacity = value;\n        };\n\n        Window_Message.prototype.fadeInOutFaceContents = function () {\n            if (!this._faceContents) {\n                return;\n            }\n\n            const isValid = this.isOpening() || this.isClosing();\n            if (isValid) {\n                const openness = (this.openness || 0).clamp(0, 255);\n                this._faceContents.scale.y = openness / 255;\n                this._faceContents.y =\n                    (this._faceContents.height / 2) * (1 - this.openness / 255);\n            }\n        };\n\n        const alias_Window_Message_checkToNotClose =\n            Window_Message.prototype.checkToNotClose;\n        Window_Message.prototype.checkToNotClose = function () {\n            this.fadeInOutFaceContents();\n            alias_Window_Message_checkToNotClose.call(this);\n        };\n\n        Window_Message.prototype.updateBalloonPosition = function () {\n            // Get the component\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            if (component) {\n                component.updateBalloonPosition();\n            }\n        };\n\n        Window_Message.prototype.getDefaultSizeOption = function () {\n            const isMobileDevice = Utils.isMobileDevice();\n            const maxSW = isMobileDevice\n                ? window.outerWidth\n                : window.screen.availWidth;\n            const maxSH = isMobileDevice\n                ? window.outerHeight\n                : window.screen.availHeight;\n            const maxWidth = this.width;\n            const maxHeight = this.height;\n\n            return {\n                maxSW,\n                maxSH,\n                maxWidth,\n                maxHeight,\n                maxY: maxSH - maxHeight,\n                maxX: maxSW - maxWidth,\n            };\n        };\n\n        Window_Message.prototype.updatePlacement = function () {\n            const goldWindow = this._goldWindow;\n            const isNormalWindowMode = $gameMessage.getBalloon() === -2;\n            const isValidSceneIsMap = SceneManager._scene instanceof Scene_Map;\n            this._positionType = $gameMessage.positionType();\n\n            // 말풍선 모드가 아니라면 X좌표를 화면 중앙에 맞춘다.\n            if (isNormalWindowMode) {\n                const { maxWidth, maxHeight, maxX, maxY } =\n                    this.getDefaultSizeOption();\n\n                const desiredX =\n                    Graphics.width / 2 -\n                    maxWidth / 2 +\n                    RS.MessageSystem.Params.windowOffset.x;\n                const desiredY =\n                    (this._positionType * (Graphics.height - maxHeight)) / 2 +\n                    RS.MessageSystem.Params.windowOffset.y;\n\n                this.x = Math.min(desiredX, maxX);\n                this.y = Math.min(desiredY, maxY);\n            } else {\n                if (isValidSceneIsMap) {\n                    this.updateBalloonPosition();\n                }\n            }\n\n            // 골드 윈도우의 위치 설정\n            if (goldWindow) {\n                const minGoldY = goldWindow.height;\n                this._goldWindow.y =\n                    this.y > minGoldY ? 0 : Graphics.height - goldWindow.height;\n            }\n\n            // 투명도 업데이트\n            this.updateDefaultOpacity();\n            this.updateContentsOpacity();\n            this.updateBigFaceOpacity();\n\n            // 이름 윈도우 업데이트\n            // if (this._nameBoxWindow.isOpen() || this.areSettingsChanged()) {\n            //     this.updateNameWindow();\n            // }\n            // 얼굴 이미지의 Z-Index 업데이트\n            if ($gameMessage.faceName() !== \"\") {\n                const isBigFace = /^Big_/.exec($gameMessage.faceName());\n                const backIndex = 2;\n\n                if (RS.MessageSystem.Params.faceSide) {\n                    this.setFaceZIndex(isBigFace ? 0 : backIndex);\n                } else {\n                    this.setFaceZIndex(backIndex);\n                }\n            }\n        };\n\n        Window_Message.prototype.isAlreadyDrawnFace = function () {\n            return this._faceContents.bitmap || this.newLineX() > 0;\n        };\n\n        Window_Message.prototype.setFaceZIndex = function (zIndex = 0) {\n            const parent = this.parent;\n            const isFaceSide = RS.MessageSystem.Params.faceSide;\n\n            if (parent && isFaceSide) {\n                this.setChildIndex(this._faceContents, zIndex);\n            }\n        };\n\n        Window_Message.prototype.clearFaceBitmap = function () {\n            if (this._faceContents.bitmap) {\n                // @ts-ignore\n                this._faceContents.bitmap = null;\n            }\n        };\n\n        const alias_Window_Message_convertEscapeCharacters =\n            Window_Message.prototype.convertEscapeCharacters;\n        Window_Message.prototype.convertEscapeCharacters = function (text) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            const regGroup = RS.MessageSystem.Reg.Group;\n            text = alias_Window_Message_convertEscapeCharacters.call(\n                this,\n                text\n            );\n            text = text.replace(\n                regGroup[tcGroup.BOLD_START_CV],\n                function () {\n                    return regGroup[tcGroup.BOLD_START].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.BOLD_END_CV],\n                function () {\n                    return regGroup[tcGroup.BOLD_END].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITALIC_START_CV],\n                function () {\n                    return regGroup[tcGroup.ITALIC_START].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITALIC_END_CV],\n                function () {\n                    return regGroup[tcGroup.ITALIC_END].source;\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.NAME], (...args) => {\n                let retName = args[1];\n\n                if (retName.endsWith(\":left\")) {\n                    retName = retName.replace(\":left\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"left\";\n                }\n                if (retName.endsWith(\":auto\")) {\n                    retName = retName.replace(\":auto\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"auto\";\n                }\n                if (retName.endsWith(\":center\")) {\n                    retName = retName.replace(\":center\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"center\";\n                }\n                if (retName.endsWith(\":opacity0\")) {\n                    retName = retName.replace(\":opacity0\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"opacity0\";\n                }\n                if (retName.endsWith(\":defaultOpacity\")) {\n                    retName = retName.replace(\":defaultOpacity\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX =\n                        \"defaultOpacity\";\n                }\n                if (retName.endsWith(\":right\")) {\n                    retName = retName.replace(\":right\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"right\";\n                }\n                this._nameBoxWindow.setName(retName);\n                return \"\";\n            });\n            text = text.replace(\n                regGroup[tcGroup.BALLOON],\n                function () {\n                    const value = Number(arguments[1] || -2);\n                    if ($gameParty.inBattle()) {\n                        $gameMessage.setBalloon(\n                            // @ts-ignore\n                            value < 0\n                                ? \"ENEMIES : \" + Math.abs(value)\n                                : \"ACTORS : \" + value\n                        );\n                    } else {\n                        $gameMessage.setBalloon(value);\n                    }\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.FRIENDLY_TROOPS],\n                function () {\n                    const value = Number(arguments[1] || 0);\n                    $gameMessage.setBalloon(\n                        // @ts-ignore\n                        \"ACTORS : \" + value\n                    );\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ENEMY_TROOPS],\n                function () {\n                    const value = Number(arguments[1] || 0);\n                    $gameMessage.setBalloon(\n                        // @ts-ignore\n                        \"ENEMIES : \" + value\n                    );\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.FACE_DIRECTION], () => {\n                const value = Number(arguments[1] || 0);\n                if (!this._isUsedTextWidthEx) {\n                    RS.MessageSystem.Params.faceDirection = value;\n                }\n                return \"\";\n            });\n            return text;\n        };\n\n        // Window_Message.prototype.terminateMessage\n        Window_Message.prototype.setHeight = function (n) {\n            this.contents.clear();\n            $gameMessage.setMaxLine(n);\n            this.height = this.fittingHeight(n);\n            this.createContents();\n            this.updatePlacement();\n        };\n\n        const alias_Window_Message_initialize =\n            Window_Message.prototype.initialize;\n        Window_Message.prototype.initialize = function (rect) {\n            alias_Window_Message_initialize.call(this, rect);\n            $gameTemp.setMSHeightFunc(this.setHeight.bind(this));\n            this.setHeight(RS.MessageSystem.Params.numVisibleRows);\n            this.createFaceContents();\n            this.on(\"removed\", this.removeEventHandler, this);\n            this.on(\"onLoadWindowskin\", this.onLoadWindowskin, this);\n        };\n\n        Window_Message.prototype.calcBalloonRect = function (text: string) {\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            component.calcBalloonRect(text);\n        };\n\n        const alias_Window_Message_newPage = Window_Message.prototype.newPage;\n        Window_Message.prototype.newPage = function (textState) {\n            this.setFaceZIndex();\n            this.clearFaceBitmap();\n            this.loadWindowskin();\n            this.emit(\"onLoadWindowskin\");\n            this.openBalloon($gameMessage.getBalloon());\n            alias_Window_Message_newPage.call(this, textState);\n        };\n\n        Window_Message.prototype.updateBalloonPositionInBattle = function () {\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            if (component) {\n                component.updateBalloonPositionInBattle();\n            }\n        };\n\n        Window_Message.prototype.openBalloon = function (sign) {\n            // 말풍선 모드가 아니면 빠져나간다.\n            if (sign === -2) {\n                this.resizeMessageSystem();\n                return;\n            }\n\n            this.setupOwner(sign);\n\n            const isBattleScene = SceneManager._scene instanceof Scene_Battle;\n            // 전투 중일 경우\n            if (isBattleScene) {\n                this.updateBalloonPositionInBattle();\n            } else {\n                this.updateBalloonPosition();\n            }\n        };\n\n        /**\n         * 1. start\n         */\n        const alias_Window_Message_startMessage =\n            Window_Message.prototype.startMessage;\n        Window_Message.prototype.startMessage = function () {\n            const text = $gameMessage.allText();\n            const textState = this.createTextState(text, 0, 0, 0);\n            textState.x = this.newLineX(textState);\n            textState.startX = textState.x;\n            this._textState = textState;\n\n            // 말풍선 영역을 계산합니다.\n            let tempText = textState.text.slice(0);\n            if (\n                $gameMessage.getBalloon() === -2 &&\n                RS.MessageSystem.Params.isParagraphMinifier\n            ) {\n                tempText = tempText.replace(/[\\r\\n]+/gm, \" \");\n            }\n            // ! BUG의 원인\n            this.calcBalloonRect(tempText);\n\n            this.newPage(this._textState);\n\n            // width 와 height를 재설정한다.\n            this.resizeMessageSystem(\"no reset\");\n\n            this.updatePlacement();\n            this.updateBackground();\n            this.open();\n            this._nameBoxWindow.start();\n        };\n\n        Window_Message.prototype.getDefaultWindowRect = function () {\n            return Scene_Message.prototype.messageWindowRect();\n        };\n\n        Window_Message.prototype.windowWidth = function () {\n            const rect = this.getDefaultWindowRect();\n            return rect.width;\n        };\n\n        Window_Message.prototype.windowHeight = function () {\n            const rect = this.getDefaultWindowRect();\n            return rect.height;\n        };\n\n        Window_Message.prototype.resizeMessageSystem = function (\n            ...args: any[]\n        ) {\n            const isResetOwner: Boolean = !(args.length > 0);\n\n            const isBattleScene = SceneManager._scene instanceof Scene_Battle;\n            if (!isResetOwner && isBattleScene) {\n                return;\n            }\n\n            const n = $gameMessage.positionType();\n            const ox = RS.MessageSystem.Params.windowOffset.x;\n            const oy = RS.MessageSystem.Params.windowOffset.y;\n\n            const windowRect = {\n                width: this.windowWidth(),\n                height: this.windowHeight(),\n            };\n            const x = Graphics.width / 2 - windowRect.width / 2 + ox;\n            const y = (n * (Graphics.height - windowRect.height)) / 2 + oy;\n            const width = windowRect.width;\n            const height = windowRect.height;\n\n            if (x !== this.x) this.x = x;\n            if (y !== this.y) this.y = y;\n            if (width !== this.width || height !== this.height) {\n                this.width = width;\n                this.height = height;\n            }\n\n            if (isResetOwner) {\n                $gameMap.setMsgOwner($gamePlayer);\n            }\n        };\n\n        Window_Message.prototype.removeEventHandler = function () {\n            this.off(\"onLoadWindowskin\", this.onLoadWindowskin, this);\n        };\n\n        /**\n         * TODO: ColorManager.textColor의 대체 구현.\n         *\n         * @param {Number} n\n         * @returns\n         */\n        Window_Message.prototype.textColor = function (n) {\n            const windowskin = this.windowskin;\n            if (!windowskin.isReady()) {\n                // Set the default text color if the windowskin is not ready.\n                return Color.baseColor;\n            }\n            const px = 96 + (n % 8) * 12 + 6;\n            const py = 144 + Math.floor(n / 8) * 12 + 6;\n            return windowskin.getPixel(px, py);\n        };\n\n        Window_Message.prototype.onLoadWindowskin = function () {\n            Color.baseColor = this.textColor(0);\n            this.changeTextColor(Color.baseColor);\n        };\n\n        Window_Message.prototype.loadWindowskin = function () {\n            const bitmap = ImageManager.loadSystem(\n                RS.MessageSystem.Params.windowskin\n            );\n\n            // if the windowskin is changed?\n            if (bitmap !== this.windowskin) {\n                this.windowskin = bitmap;\n                this._isDirtyWindowskin = false;\n                this.windowskin.addLoadListener(() => {\n                    this._isDirtyWindowskin = true;\n                });\n                if (!this.contents) {\n                    this.createContents();\n                }\n                // Set the default text color if the windowskin didn't load yet.\n                this.changeTextColor(Color.baseColor);\n\n                if (!this.windowskin.isReady()) {\n                    return setTimeout(() => this.loadWindowskin(), 10);\n                }\n            }\n        };\n\n        const _Window_Message_updateLoading =\n            Window_Message.prototype.updateLoading;\n        Window_Message.prototype.updateLoading = function () {\n            let ret = true;\n\n            if (this._isDirtyWindowskin) {\n                Color.baseColor = ColorManager.textColor(0);\n                this.changeTextColor(Color.baseColor);\n                this._isDirtyWindowskin = false;\n                ret = true;\n            }\n            return _Window_Message_updateLoading.call(this) && ret;\n        };\n\n        Window_Message.prototype.needsNewPage = function (textState) {\n            return (\n                !this.isEndOfText(textState) &&\n                textState.y + textState.height > this.contentsHeight()\n            );\n        };\n\n        Window_Message.prototype.createFaceContents = function () {\n            this._faceContents = new Sprite();\n            this._faceContents.x = 0;\n            this._faceContents.y = 0;\n\n            this.addChildAt(this._faceContents, 2);\n            return this._faceContents;\n        };\n\n        Window_Message.prototype.removeFaceContents = function () {\n            if (this._faceContents) this.removeChild(this._faceContents);\n        };\n\n        /**\n         * 큰 얼굴 이미지가 설정되었을 때 텍스트 시작 위치\n         */\n        Window_Message.prototype.newLineX = function () {\n            const reg = /^Big_/i;\n            const faceName = $gameMessage.faceName();\n            const faceIndex = $gameMessage.faceIndex();\n            if (reg.exec(faceName)) {\n                var faceStartX = RS.MessageSystem.Params.faceSide\n                    ? 0\n                    : RS.MessageSystem.Params.textStartX;\n                return faceIndex > 0 ? 0 : faceStartX;\n            } else {\n                const isRightDirection =\n                    RS.MessageSystem.Params.faceDirection === 2;\n                if (isRightDirection) {\n                    return 0;\n                }\n                return faceName ? RS.MessageSystem.Params.faceStartOriginX : 0;\n            }\n        };\n\n        // TODO: 큰 얼굴 이미지 구현 필요\n        /**\n         * @param {String} faceName\n         */\n        Window_Message.prototype.isValidBigFace = function (faceName) {\n            const reg = /^Big_/i;\n            return reg.exec(faceName);\n        };\n\n        /**\n         * TODO: deprecated\n         */\n        Window_Message.prototype.updateNameWindow = function () {};\n\n        /**\n         * Window 구성 스프라이트 _windowBackSprite의 투명도를 조절합니다.\n         * TODO: deprecated\n         * @method standardBackOpacity\n         */\n        Window_Message.prototype.standardBackOpacity = function () {\n            return RS.MessageSystem.Params.backOpacity;\n        };\n\n        /**\n         * Bitmap의 context.globalAlpha 값을 변경합니다.\n         * @method translucentOpacity\n         */\n        Window_Message.prototype.translucentOpacity = function () {\n            return RS.MessageSystem.Params.translucentOpacity;\n        };\n\n        /**\n         * 윈도우를 구성하는 모든 객체의 투명도를 변경합니다.\n         * @method updateDefaultOpacity\n         */\n        Window_Message.prototype.updateDefaultOpacity = function () {\n            this.opacity = RS.MessageSystem.Params.defaultOpacity;\n        };\n\n        /**\n         * Window 구성 스프라이트 _windowContentsSprite의 투명도를 변경합니다.\n         * @method updateContentsOpacity\n         */\n        Window_Message.prototype.updateContentsOpacity = function () {\n            this.contentsOpacity = RS.MessageSystem.Params.contentsOpacity;\n        };\n\n        Window_Message.prototype.getSpriteActors = function (\n            sign: number\n        ): IBalloonSpriteTarget | null {\n            if (!$gameParty.members()) return null;\n            const max = $gameParty.members().length;\n            sign = sign.clamp(0, max);\n\n            return {\n                type: \"actor\",\n                id: sign - 1,\n            };\n        };\n\n        Window_Message.prototype.getSpriteEnemies = function (\n            sign: number\n        ): IBalloonSpriteTarget | null {\n            if (!$gameTroop.members()) return null;\n            const max = $gameTroop.members().length;\n            sign = sign.clamp(0, max);\n\n            return {\n                type: \"enemy\",\n                id: sign - 1,\n            };\n        };\n\n        Window_Message.prototype.setupOwner = function (sign) {\n            switch (sign) {\n                case -1: // 플레이어\n                    $gameMap.setMsgOwner($gamePlayer);\n                    break;\n                case 0: // 이 이벤트\n                    $gameMap.setMsgOwner(<Game_Event>$gameMap.getMsgEvent());\n                    break;\n                default:\n                    if (SceneManager._scene instanceof Scene_Battle) {\n                        // 전투 중인가?\n                        if (/(?:ENEMIES)[ ]*:(.*)/.test(sign.toString())) {\n                            // 적\n                            $gameMap.setMsgOwner(\n                                this.getSpriteEnemies(parseInt(RegExp.$1))\n                            );\n                        }\n                        if (/(?:ACTORS)[ ]*:(.*)/.test(sign.toString())) {\n                            // 아군\n                            $gameMap.setMsgOwner(\n                                this.getSpriteActors(parseInt(RegExp.$1))\n                            );\n                        }\n                    } else {\n                        // 맵 이벤트\n                        $gameMap.setMsgOwner($gameMap.event(sign));\n                    }\n                    break;\n            }\n        };\n\n        const alias_Window_Message_shouldBreakHere =\n            Window_Message.prototype.shouldBreakHere;\n        Window_Message.prototype.shouldBreakHere = function (text) {\n            const isBreakCharacter = alias_Window_Message_shouldBreakHere.call(\n                this,\n                text\n            );\n\n            if (isBreakCharacter) {\n                if (RS.MessageSystem.Params.isPlayTextSound) {\n                    const interval = RS.MessageSystem.Params.textSoundInterval;\n\n                    if (this._textSoundInterval-- <= 0) {\n                        AudioManager.playStaticSe(<rm.types.AudioParameters>{\n                            name: RS.MessageSystem.popParameter(\n                                \"Text Sound\",\n                                \"텍스트 효과음\"\n                            ),\n                            pan: 0,\n                            pitch: 100,\n                            volume: 90,\n                        });\n                        this._textSoundInterval = interval;\n                    }\n                }\n            }\n\n            return isBreakCharacter;\n        };\n\n        //============================================================================\n        // Game_Interpreter\n        //============================================================================\n        Game_Interpreter.prototype.processMessageParams = function (\n            eventId: number,\n            index: number\n        ) {\n            const meta = <EventCommand.CommentMeta>(\n                RS.MessageSystem.getEventComments(eventId, index - 1)\n            );\n            if (meta[\"윈도우 스킨\"]) {\n                RS.MessageSystem.Params.windowskin =\n                    meta[\"윈도우 스킨\"].trim() || \"Window\";\n                ImageManager.loadSystem(RS.MessageSystem.Params.windowskin);\n            }\n            if (meta[\"이름 윈도우 스킨\"]) {\n                RS.MessageSystem.Params.windowskinForNameWindow =\n                    meta[\"이름 윈도우 스킨\"].trim() || \"Window\";\n                ImageManager.loadSystem(\n                    RS.MessageSystem.Params.windowskinForNameWindow\n                );\n            }\n            if (meta[\"라인 높이\"]) {\n                RS.MessageSystem.Params.lineHeight = parseInt(\n                    meta[\"라인 높이\"]\n                );\n            }\n            if (meta[\"폰트 크기\"]) {\n                RS.MessageSystem.Params.fontSize = parseInt(meta[\"폰트 크기\"]);\n            }\n            if (meta[\"라인\"]) {\n                RS.MessageSystem.Params.numVisibleRows = parseInt(meta[\"라인\"]);\n            }\n            if (meta[\"텍스트 시작 X\"]) {\n                RS.MessageSystem.Params.textStartX = parseInt(\n                    meta[\"텍스트 시작 X\"]\n                );\n            }\n            if (meta[\"큰 페이스칩 OX\"]) {\n                RS.MessageSystem.Params.faceOX = Number(meta[\"큰 페이스칩 OX\"]);\n            }\n            if (meta[\"큰 페이스칩 OY\"]) {\n                RS.MessageSystem.Params.faceOY = Number(meta[\"큰 페이스칩 OY\"]);\n            }\n            if (meta[\"대화창 뒤에 얼굴 표시\"]) {\n                RS.MessageSystem.Params.faceSide = Boolean(\n                    meta[\"대화창 뒤에 얼굴 표시\"] === \"true\"\n                );\n            }\n            if (meta[\"대화창 투명도\"]) {\n                RS.MessageSystem.Params.defaultOpacity = parseInt(\n                    meta[\"대화창 투명도\"]\n                );\n            }\n            if (meta[\"텍스트 효과음 재생 여부\"]) {\n                RS.MessageSystem.Params.isPlayTextSound = Boolean(\n                    meta[\"텍스트 효과음 재생 여부\"] === \"true\"\n                );\n            }\n            if (meta[\"기본 텍스트 출력 속도\"]) {\n                RS.MessageSystem.Params.textSpeed = Number(\n                    meta[\"기본 텍스트 출력 속도\"]\n                );\n            }\n        };\n\n        Game_Interpreter.prototype.isValidMultiLine = function () {\n            const codes = [];\n            let prevCode = 401;\n            let lineCount = 0;\n            for (let i = 1; i < 8; i++) {\n                const currentCommand = this._list[this._index + i];\n                if (currentCommand) {\n                    const code = currentCommand.code;\n                    codes.push(code);\n                    prevCode = code;\n                    if ([101, 401].contains(code)) {\n                        lineCount++;\n                    }\n                }\n            }\n            if (codes.contains(102)) {\n                return false;\n            } else if (codes.contains(103)) {\n                return false;\n            } else if ($gameMessage.getMaxLine() <= 4) {\n                return false;\n            } else if (lineCount <= 4) {\n                return false;\n            } else if (RS.MessageSystem.Params.choiceWindowStyle == \"RMXP\") {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        Game_Interpreter.prototype.command101 = function (params) {\n            if ($gameMessage.isBusy()) {\n                return false;\n            }\n\n            $gameMap.setMsgEvent(this.character(this._eventId > 0 ? 0 : -1));\n            $gameMessage.setFaceImage(params[0], params[1]);\n            $gameMessage.setBackground(params[2]);\n            $gameMessage.setPositionType(params[3]);\n            $gameMessage.setSpeakerName(params[4]);\n\n            this.processMessageParams(this._eventId, this._index);\n\n            if (this.isMultiLine()) {\n                this.multiLineAddMessage();\n            } else {\n                while (this.nextEventCode() === 401) {\n                    // Text data\n                    this._index++;\n                    $gameMessage.add(this.currentCommand().parameters[0]);\n                }\n            }\n\n            switch (this.nextEventCode()) {\n                case 102: // Show Choices\n                    this._index++;\n                    this.setupChoices(this.currentCommand().parameters);\n                    break;\n                case 103: // Input Number\n                    this._index++;\n                    this.setupNumInput(this.currentCommand().parameters);\n                    break;\n                case 104: // Select Item\n                    this._index++;\n                    this.setupItemChoice(this.currentCommand().parameters);\n                    break;\n            }\n            this.setWaitMode(\"message\");\n            return true;\n        };\n\n        Game_Interpreter.prototype.multiLineAddMessage = function () {\n            this.initLineHeight();\n\n            while ($gameMessage._texts.length < $gameMessage.getMaxLine()) {\n                while (this.nextEventCode() === 401) {\n                    this._index++;\n                    $gameMessage.add(this.currentCommand().parameters[0]);\n                    this.addLineHeight();\n                    if (this._lineHeight >= $gameMessage.getMaxLine()) {\n                        break;\n                    }\n                }\n                if (this.nextEventCode() !== 101) {\n                    break;\n                }\n            }\n\n            // 커맨드 코드 401번이 아직 남아있는 상황이라면,\n            // 다음 인덱스로 넘겨야 선택지가 제대로 동작한다.\n            while (this.nextEventCode() === 401) {\n                this._index++;\n            }\n        };\n\n        Game_Interpreter.prototype.initLineHeight = function () {\n            this._lineHeight = 0;\n        };\n\n        Game_Interpreter.prototype.isMultiLine = function () {\n            return this.isValidMultiLine();\n        };\n\n        Game_Interpreter.prototype.addLineHeight = function () {\n            this._lineHeight++;\n            if (this.nextEventCode() === 101) {\n                this._index++;\n            }\n        };\n\n        //============================================================================\n        // Window_NameBox\n        //============================================================================\n        Window_NameBox.prototype.updatePlacement = function () {\n            this.width = this.windowWidth();\n            this.height = this.windowHeight();\n            const messageWindow = this._messageWindow;\n            if ($gameMessage.isRTL()) {\n                this.x = messageWindow.x + messageWindow.width - this.width;\n            } else {\n                this.x = messageWindow.x;\n            }\n            if (messageWindow.y > 0) {\n                this.y = messageWindow.y - this.height;\n            } else {\n                this.y = messageWindow.y + messageWindow.height;\n            }\n        };\n\n        //============================================================================\n        // Game_Temp\n        //============================================================================\n        Game_Temp.prototype.setMSHeightFunc = function (func) {\n            this._callMSHeightFunc = func;\n        };\n\n        Game_Temp.prototype.setMaxLine = function (n) {\n            if (this._callMSHeightFunc) this._callMSHeightFunc(n);\n        };\n\n        //============================================================================\n        // Game_Map\n        //============================================================================\n        const alias_Game_Map_initialize = Game_Map.prototype.initialize;\n        Game_Map.prototype.initialize = function () {\n            alias_Game_Map_initialize.call(this);\n            this._msgOwner = $gamePlayer;\n            this._msgEvent = 0;\n        };\n\n        Game_Map.prototype.getMsgOwner = function () {\n            return this._msgOwner;\n        };\n\n        /**\n         * @method setMsgOwner\n         * @param o {Game_Event | Game_Player}\n         */\n        Game_Map.prototype.setMsgOwner = function (o) {\n            this._msgOwner = o;\n            $gameMessage.setBalloonPatternHeight(this.tileHeight());\n        };\n\n        Game_Map.prototype.getMsgEvent = function () {\n            return this._msgEvent;\n        };\n\n        Game_Map.prototype.setMsgEvent = function (ev) {\n            this._msgEvent = ev;\n        };\n\n        /// ======================================================================\n        /// DI\n        /// ======================================================================\n        const alias_Scene_Message_associateWindows__enrtyPoint =\n            Scene_Message.prototype.associateWindows;\n        Scene_Message.prototype.associateWindows = function () {\n            alias_Scene_Message_associateWindows__enrtyPoint.call(this);\n            const messageWindow = this._messageWindow;\n            DependencyInjector.injectMessageWindow(messageWindow);\n            DependencyInjector.ready();\n        };\n\n        Scene_Message.prototype.messageWindowRect = function () {\n            const ww = Graphics.width;\n            const wh = this.calcWindowHeight(4, false) + 8;\n            const wx = (Graphics.height - ww) / 2;\n            const wy = 0;\n            return new Rectangle(wx, wy, ww, wh);\n        };\n\n        const alias_Scene_Message_terminate = Scene_Message.prototype.terminate;\n        Scene_Message.prototype.terminate = function () {\n            alias_Scene_Message_terminate.call(this);\n            DependencyInjector.ejectMessageWindow();\n        };\n\n        RS.MessageSystem.initSystem();\n\n        // ! [DEBUG]\n        if (RS.MessageSystem.Params.DEBUG) {\n            SceneManager.showDevTools();\n            const win = nw.Window.get();\n            win.moveTo(window.outerWidth / 3, 153);\n        }\n    };\n}\n","/// <reference types=\"../types/my-types\" />\n/// <reference types=\"../types/lunalite-pixi-mz\" />\nimport { NameWindowPositionComponent } from \"./components/NameWindowPositionComponent\";\nimport ComponentExecutor from \"./ComponentExecutor\";\nimport { processBitmap } from \"./handlers/Bitmap.handler\";\nimport { processMain } from \"./handlers/Main.handler\";\n\nconst executor = ComponentExecutor.getInstance();\n\nexecutor\n    /**\n     * ? Bitmap\n     * @description 텍스트에 그라데이션을 채우는 기능을 추가합니다.\n     */\n    .add(\"bitmap\", processBitmap())\n    /**\n     * ? Main\n     * @description\n     * 메인 엔트리 포인트입니다.\n     */\n    .add(\"main\", processMain())\n    .ready(\"bitmap\")\n    .ready(\"main\")\n    .executeAll();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["ComponentExecutor","static","INSTANCE","_components","add","name","func","startChar","endChar","len","i","String","fromCharCode","Math","floor","random","this","callbackFunction","active","wrap","get","deactive","ready","executeAll","key","currentCallback","Function","e","console","log","DependencyInjector","messageWindow","_messageWindow","inject","_isDirty","undefined","COMPONENTS","BalloonWindowTransformComponent","NameWindowPositionComponent","filter","getComponentClass","pop","BaseComponent","forEach","component","constructor","_listeners","on","eventName","push","emit","args","warn","pluginParams","$plugins","description","contains","pluginName","length","parameters","RS","MessageSystem","MessageParams","jsonParse","str","JSON","parse","k","v","popParameter","Object","keys","lastUsed","parseInt","Reg","Default","Group","Korean","Chinese","English","Japanese","Params","faceStartOriginX","FACE_START_ORIGIN_X","nameWindowWidth","NAME_WINDOW_WIDTH","nameWindowRows","NAME_WINDOW_ROWS","FONT_SIZE","STD_PADDING","isValidShakingChoice","fontSize","Number","textSpeed","minFontSize","maxFontSize","textStartX","numVisibleRows","gradientColor1","gradientColor2","gradientColor3","nameWindowX","nameWindowY","nameWindowStdPadding","namePositionTypeAtX","faceOX","faceOY","faceSide","Boolean","WIDTH","HEIGHT","TabSize","backOpacity","translucentOpacity","defaultOpacity","contentsOpacity","defaultOutlineWidth","defaultOutlineColor","fonts","default","isTempSpriteContainerVisibility","lineHeight","windowOffset","Point","fontSmoothingEnabled","customFont","customFontName","customFontSrc","windowskin","windowskinForNameWindow","choiceWindowStyle","defaultChoicePostion","exTextColors","isPlayTextSound","pathTextSound","textSoundEval1","textSoundEval2","textSoundInterval","textSoundPoolSize","langCode","preloadWindowskins","isParagraphMinifier","gradientStyle","faceOpacity","faceDirection","DEBUG","Utils","isNwjs","isOptionValid","systemFonts","settings","params","languageCode","fontName","assign","alias_Game_Temp_initialize","Game_Temp","prototype","initialize","call","windowWidth","eval","Graphics","boxWidth","KoreanEscapeCode","ChineseEscapeCode","EnglishEscapeCode","JapaneseEscapeCode","defaultEscapeCode","TextCodes","rowData","data","retData","concat","Main","ENUM","COLOR","TEXT_SPEED","OUTLINE_COLOR","OUTLINE_WIDTH","INDENT","BOLD","ITALIC","NAME","GRADIENT","PARTY_MEMBER","PLAYER","VAR","ICON","INCREASE","DECREASE","GOLD","BALLOON","ALIGN","NUM","TEXT_SIZE","TAB","CARRIAGE_RETURN","PLAY_SE","SHOW_PICTURE","HIDE_PICTURE","ITEM","WEAPON","ARMOR","CLASSES","ENEMY","STATE","SKILL","FACE","FRIENDLY_TROOPS","ENEMY_TROOPS","WAIT_SEC_15","WAIT_SEC_60","START_PAUSE","LINE_SHOW_FAST_LT","LINE_SHOW_FAST_GT","PAUSE_SKIP","BOLD_START","BOLD_END","ITALIC_START","ITALIC_END","ALIGN_LEFT","ALIGN_CENTER","ALIGN_RIGHT","BOLD_START_CV","BOLD_END_CV","ITALIC_START_CV","ITALIC_END_CV","ALIGN_CLEAR","HIGHLIGHT_TEXT_COLOR","FACE_DIRECTION","getTextCode","idx","match","getEventComments","eventId","index","note","meta","list","$gameMap","event","commonEvent","$gameTemp","reservedCommonEvent","param","code","re","exec","trim","a","tcGroup","map","join","RegExp","initSystem","type","ret","Color","n","getColor","baseColor","obj","hasOwnProperty","arr","r","g","b","parseFloat","KOREAN_COLORS","c_aqua","c_black","c_blue","c_dkgray","c_fuchsia","c_gray","c_green","c_lime","c_ltgray","c_maroon","c_navy","c_olive","c_orange","c_purple","c_red","c_silver","c_teal","c_white","c_yellow","CHINESE_COLOR","ENGLISH_COLOR","AQUA","BLACK","BLUE","DKGRAY","FUCHSIA","GRAY","GREEN","LIME","LTGRAY","MAROON","NAVY","OLIVE","ORANGE","PURPLE","RED","SILVER","TEAL","WHITE","YELLOW","JAPANESE_COLOR","getKoreanColor","getBaseColor","getUserCustomColor","getChineseColor","getEnglishColor","getJapaneseColor","getBrowser","tem","ua","navigator","userAgent","M","test","version","appName","appVersion","splice","window","_bWidth","_bHeight","onReady","props","super","width","height","calcBalloonRect","text","save","rect","textSizeEx","padding","standardPadding","max","fittingHeight","restore","_isUsedTextWidthEx","updatePlacement","isActiveInBalloon","$gameMessage","getBalloon","setBalloonRect","faceName","ox","x","oy","y","dx","dy","drawMessageFace","setBalloonPlacement","bw","bh","boxHeight","stringify","mx","tx","canvasToLocalX","my","tileHeight","scaleY","ty","_height","ny","updateSubBalloonElements","_pauseSignSprite","move","scale","_nameWindow","getNameWindowY","updateBalloonPosition","owner","getMsgOwner","Error","screenX","screenY","getBalloonPatternHeight","updateBalloonPositionInBattle","$gameParty","inBattle","$gameSystem","isSideView","parent","scene","SceneManager","_scene","Scene_Battle","_spriteset","_actorSprites","_enemySprites","tempBattlers","target","id","_actor","isAlive","_enemy","padY","_mainSprite","bitmap","_width","transform","updateTransform","calcBalloonRectHeight","tempFontSize","contents","textState","createTextState","convertEscapeCharacters","calcTextHeight","setTextSize","Component","error","_nameBoxWindow","_choiceWindow","_choiceListWindow","windowHeight","updatePadding","textPadding","itemPadding","newLineX","numLines","drawTextEx","value","canvasToLocalY","EventEmitter","init","mounted","onDestroy","destroy","execute","setOpacity","opacity","isNaN","updatePositionX","w","nw","position","nx","newX","updatePositionY","positionType","ballonOwnerType","topY","isOpen","alias_Bitmap_initialize","Bitmap","fontBold","fontGradient","highlightTextColor","setGradient","color1","color2","color3","context","_context","tWidth","measureTextWidth","gradient","createLinearGradient","addColorStop","_baseTexture","update","setGradientStyle","grd","style","ws","hs","createRadialGradient","_makeFontNameText","fontItalic","fontFace","_drawTextBody","maxWidth","imageSmoothingEnabled","fillStyle","textColor","fillText","alias_Game_Message_clear","Game_Message","clear","_waitTime","_gradientText","_balloon","_align","_balloonPatternHeight","_lastAlign","setWaitTime","time","setGradientText","getWaitTime","getGradientText","getMaxLine","_maxLine","setMaxLine","maxLine","setBalloon","setAlign","getAlign","last","shift","clearAlignLast","setBalloonPatternHeight","Sprite_Battler","MessageDesc","outlineColor","outlineWidth","_isSaved","Window_Base","obtainEscapeCode","slice","toUpperCase","obtainNameColor","gmColor","ColorManager","changeTextColor","color","c","alias_Window_Base_processEscapeCharacter","processEscapeCharacter","textCode","obtainEscapeParam","processDrawIcon","makeFontBigger","makeFontSmaller","alias_loadWindowskin","loadWindowskin","addLoadListener","getFontFace","language","resetFontSettings","processAllText","outputWidth","resetTextColor","_messageDesc","alias_Window_Base_convertEscapeCharacters","regGroup","replace","$gameVariables","toString","bind","actorName","partyMemberName","toComma","TextManager","currencyUnit","$dataClasses","$dataItems","$dataWeapons","$dataArmors","$dataEnemies","$dataStates","$dataSkills","source","processAlign","_textState","rtl","setAlignLeft","setAlignCenter","setAlignRight","alias_Window_Base_processNewLine_align","processNewLine","startX","contentsWidth","Window_Message","obtainTextSpeed","obtainGradientText","obtainSoundName","alias_Window_Message_processEscapeCharacter","setStrokeColor","setTextIndent","setStrokeWidth","setTextBold","setTextItalic","setTextGradient","setHighlightTextColor","textWidth","startWait","playSe","showPicture","erasePicture","split","clamp","seName","pan","pitch","volume","ConfigManager","seVolume","AudioManager","raw","$gameScreen","apply","picId","resetGradient","alias_Window_Message_createTextState","px","py","processWordWrap","isValid","needsNewPage","startPause","alias_Window_Message_processNewLinePW","_backBuffer","isDirty","processCharacter","charCodeAt","flushTextState","processControlCharacter","buffer","alias_Window_Message_processCharacter","preLen","substr","processNormalCharacterProxy","isNormalMessageWindow","isRealDrawingMode","drawing","ImageManager","faceWidth","contentW","contentH","fillAll","alias_Window_Message_flushTextState","isDrawing","isSlowTextMode","_showFast","isEndOfText","isDrawingTextBackground","backBuffer","min","innerWidth","innerHeight","flushTextBackgbround","updateBigFaceOpacity","_faceContents","fadeInOutFaceContents","isOpening","isClosing","openness","alias_Window_Message_checkToNotClose","checkToNotClose","getComponent","getDefaultSizeOption","isMobileDevice","maxSW","outerWidth","screen","availWidth","maxSH","outerHeight","availHeight","maxHeight","maxY","maxX","goldWindow","_goldWindow","isNormalWindowMode","isValidSceneIsMap","Scene_Map","_positionType","desiredX","desiredY","minGoldY","updateDefaultOpacity","updateContentsOpacity","isBigFace","backIndex","setFaceZIndex","isAlreadyDrawnFace","zIndex","isFaceSide","setChildIndex","clearFaceBitmap","alias_Window_Message_convertEscapeCharacters","retName","endsWith","setName","arguments","abs","setHeight","createContents","alias_Window_Message_initialize","setMSHeightFunc","createFaceContents","removeEventHandler","onLoadWindowskin","alias_Window_Message_newPage","newPage","openBalloon","sign","setupOwner","resizeMessageSystem","startMessage","allText","tempText","updateBackground","open","start","getDefaultWindowRect","Scene_Message","messageWindowRect","isResetOwner","isBattleScene","windowRect","setMsgOwner","$gamePlayer","off","isReady","getPixel","loadSystem","_isDirtyWindowskin","setTimeout","_Window_Message_updateLoading","updateLoading","contentsHeight","Sprite","addChildAt","removeFaceContents","removeChild","faceIndex","faceStartX","isValidBigFace","updateNameWindow","standardBackOpacity","getSpriteActors","members","getSpriteEnemies","$gameTroop","getMsgEvent","$1","alias_Window_Message_shouldBreakHere","shouldBreakHere","isBreakCharacter","interval","_textSoundInterval","playStaticSe","Game_Interpreter","processMessageParams","isValidMultiLine","codes","prevCode","lineCount","currentCommand","_list","_index","command101","isBusy","setMsgEvent","character","_eventId","setFaceImage","setBackground","setPositionType","setSpeakerName","isMultiLine","multiLineAddMessage","nextEventCode","setupChoices","setupNumInput","setupItemChoice","setWaitMode","initLineHeight","_texts","addLineHeight","_lineHeight","Window_NameBox","isRTL","_callMSHeightFunc","alias_Game_Map_initialize","Game_Map","_msgOwner","_msgEvent","o","ev","alias_Scene_Message_associateWindows__enrtyPoint","associateWindows","injectMessageWindow","ww","wh","calcWindowHeight","wx","Rectangle","alias_Scene_Message_terminate","terminate","ejectMessageWindow","showDevTools","Window","moveTo","getInstance","processBitmap","processMain","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","__webpack_exports__"],"sourceRoot":""}