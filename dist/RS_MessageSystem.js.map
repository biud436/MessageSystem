{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/BaseComponent.ts","webpack:///./src/index.ts","webpack:///./src/RS.ts","webpack:///./src/DependencyInjector.ts","webpack:///./src/BalloonWindowTransformComponent.ts","webpack:///./src/Component.ts","webpack:///./src/EventEmitter.ts","webpack:///./src/NameWindowPositionComponent.ts","webpack:///./src/ComponentExecutor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BaseComponent","Component","props","super","console","log","this","_messageWindow","messageWindow","error","contents","_nameBoxWindow","Error","_choiceListWindow","windowWidth","windowHeight","save","restore","updatePadding","padding","itemPadding","newLineX","numLines","fittingHeight","text","textSizeEx","width","lineHeight","drawMessageFace","x","y","height","getInstance","add","alias_Bitmap_initialize","Bitmap","initialize","fontBold","fontGradient","highlightTextColor","setGradient","color1","color2","color3","tx","ty","context","_context","tWidth","measureTextWidth","gradient","createLinearGradient","addColorStop","_baseTexture","update","setGradientStyle","RS","MessageSystem","Params","grd","style","gradientStyle","contains","ws","hs","createRadialGradient","_makeFontNameText","fontItalic","fontSize","fontFace","_drawTextBody","maxWidth","imageSmoothingEnabled","fontSmoothingEnabled","gradientColor1","gradientColor2","gradientColor3","fillStyle","textColor","fillText","alias_Game_Message_clear","Game_Message","clear","_waitTime","_gradientText","_balloon","_align","_balloonPatternHeight","_lastAlign","setWaitTime","time","setGradientText","getWaitTime","getGradientText","getMaxLine","_maxLine","setMaxLine","maxLine","numVisibleRows","setBalloon","getBalloon","setAlign","push","getAlign","last","shift","undefined","clearAlignLast","setBalloonPatternHeight","getBalloonPatternHeight","Sprite_Battler","screenX","screenY","MessageDesc","outlineColor","outlineWidth","textSpeed","_isSaved","$gameMessage","Window_Base","obtainEscapeCode","textState","arr","Reg","defaultEscapeCode","exec","slice","index","length","toUpperCase","obtainNameColor","Color","gmColor","ColorManager","changeTextColor","color","parseInt","alias_Window_Base_processEscapeCharacter","processEscapeCharacter","code","tcGroup","TextCodes","ENUM","textCode","Main","obtainEscapeParam","COLOR","ICON","processDrawIcon","INCREASE","makeFontBigger","DECREASE","makeFontSmaller","alias_loadWindowskin","loadWindowskin","windowskin","addLoadListener","baseColor","getFontFace","langCode","navigator","language","fonts","default","drawTextEx","resetFontSettings","createTextState","processAllText","outputWidth","minFontSize","defaultOutlineWidth","defaultOutlineColor","resetTextColor","maxFontSize","_messageDesc","alias_Window_Base_convertEscapeCharacters","convertEscapeCharacters","regGroup","Group","replace","VAR","args","$gameVariables","toString","PLAYER","actorName","PARTY_MEMBER","partyMemberName","NUM","toComma","GOLD","TextManager","currencyUnit","CLASSES","$dataClasses","ITEM","$dataItems","WEAPON","$dataWeapons","ARMOR","$dataArmors","ENEMY","$dataEnemies","STATE","$dataStates","SKILL","$dataSkills","ALIGN_LEFT","ALIGN","ALIGN_CENTER","ALIGN_RIGHT","_isUsedTextWidthEx","Number","ALIGN_CLEAR","source","textPadding","processAlign","_textState","rtl","setAlignLeft","setAlignCenter","setAlignRight","alias_Window_Base_processNewLine_align","processNewLine","startX","contentsWidth","Window_Message","obtainTextSpeed","obtainGradientText","String","obtainSoundName","alias_Window_Message_processEscapeCharacter","TEXT_SPEED","TEXT_SIZE","setTextSize","OUTLINE_COLOR","setStrokeColor","INDENT","setTextIndent","OUTLINE_WIDTH","setStrokeWidth","BOLD","setTextBold","BOLD_START","BOLD_END","ITALIC","setTextItalic","ITALIC_START","ITALIC_END","GRADIENT","setTextGradient","HIGHLIGHT_TEXT_COLOR","setHighlightTextColor","TAB","textWidth","TabSize","CARRIAGE_RETURN","startWait","PLAY_SE","playSe","SHOW_PICTURE","showPicture","HIDE_PICTURE","erasePicture","FACE","split","clamp","seName","data","trim","pan","pitch","volume","ConfigManager","seVolume","AudioManager","param","raw","map","e","params","ret","forEach","a","$gameScreen","apply","picId","_pauseSignSprite","move","_width","_height","scale","resetGradient","alias_Window_Message_createTextState","px","py","assign","processWordWrap","w","isValid","Math","floor","needsNewPage","startPause","alias_Window_Message_processNewLinePW","_backBuffer","isDirty","processCharacter","charCodeAt","flushTextState","processControlCharacter","buffer","alias_Window_Message_processCharacter","preLen","substr","processNormalCharacterProxy","isNormalMessageWindow","isRealDrawingMode","drawing","isParagraphMinifier","faceName","ImageManager","faceWidth","faceDirection","contentW","contentH","fillAll","alias_Window_Message_flushTextState","isDrawing","isSlowTextMode","_showFast","isEndOfText","isDrawingTextBackground","backBuffer","bitmap","min","innerWidth","innerHeight","flushTextBackgbround","updateBigFaceOpacity","_faceContents","faceOpacity","opacity","fadeInOutFaceContents","isOpening","isClosing","openness","alias_Window_Message_checkToNotClose","checkToNotClose","updateBalloonPosition","component","DependencyInjector","getComponent","getDefaultSizeOption","isMobileDevice","Utils","maxSW","window","outerWidth","screen","availWidth","maxSH","outerHeight","availHeight","maxHeight","maxY","maxX","updatePlacement","goldWindow","_goldWindow","isNormalWindowMode","isValidSceneIsMap","SceneManager","_scene","Scene_Map","_positionType","positionType","desiredX","Graphics","windowOffset","desiredY","minGoldY","updateDefaultOpacity","updateContentsOpacity","isBigFace","backIndex","faceSide","setFaceZIndex","isAlreadyDrawnFace","zIndex","parent","isFaceSide","setChildIndex","clearFaceBitmap","alias_Window_Message_convertEscapeCharacters","BOLD_START_CV","BOLD_END_CV","ITALIC_START_CV","ITALIC_END_CV","NAME","retName","endsWith","namePositionTypeAtX","setName","BALLOON","arguments","$gameParty","inBattle","abs","FRIENDLY_TROOPS","ENEMY_TROOPS","FACE_DIRECTION","setHeight","createContents","alias_Window_Message_initialize","rect","$gameTemp","setMSHeightFunc","createFaceContents","on","removeEventHandler","onLoadWindowskin","calcBalloonRect","alias_Window_Message_newPage","newPage","emit","openBalloon","updateBalloonPositionInBattle","sign","resizeMessageSystem","setupOwner","Scene_Battle","startMessage","allText","tempText","updateBackground","open","start","getDefaultWindowRect","Scene_Message","messageWindowRect","isResetOwner","isBattleScene","ox","oy","windowRect","$gameMap","setMsgOwner","$gamePlayer","off","isReady","getPixel","loadSystem","_isDirtyWindowskin","setTimeout","_Window_Message_updateLoading","updateLoading","contentsHeight","Sprite","addChildAt","removeFaceContents","removeChild","faceIndex","faceStartX","textStartX","faceStartOriginX","isValidBigFace","updateNameWindow","standardBackOpacity","backOpacity","translucentOpacity","defaultOpacity","contentsOpacity","getSpriteActors","members","max","type","id","getSpriteEnemies","$gameTroop","getMsgEvent","test","RegExp","$1","event","alias_Window_Message_shouldBreakHere","shouldBreakHere","isBreakCharacter","isPlayTextSound","interval","textSoundInterval","_textSoundInterval","playStaticSe","popParameter","Game_Interpreter","processMessageParams","eventId","meta","getEventComments","windowskinForNameWindow","faceOX","faceOY","Boolean","isValidMultiLine","codes","prevCode","lineCount","currentCommand","_list","_index","choiceWindowStyle","command101","isBusy","setMsgEvent","character","_eventId","setFaceImage","setBackground","setPositionType","setSpeakerName","isMultiLine","multiLineAddMessage","nextEventCode","parameters","setupChoices","setupNumInput","setupItemChoice","setWaitMode","initLineHeight","_texts","addLineHeight","_lineHeight","Window_NameBox","isRTL","Game_Temp","func","_callMSHeightFunc","alias_Game_Map_initialize","Game_Map","_msgOwner","_msgEvent","getMsgOwner","tileHeight","ev","alias_Scene_Message_associateWindows__enrtyPoint","associateWindows","injectMessageWindow","ready","ww","wh","calcWindowHeight","wx","Rectangle","alias_Scene_Message_terminate","terminate","ejectMessageWindow","initSystem","DEBUG","showDevTools","nw","Window","moveTo","executeAll","pluginParams","$plugins","filter","description","pluginName","MessageParams","jsonParse","str","JSON","parse","k","v","keys","lastUsed","pop","Default","Korean","Chinese","English","Japanese","FACE_START_ORIGIN_X","nameWindowWidth","NAME_WINDOW_WIDTH","nameWindowRows","NAME_WINDOW_ROWS","FONT_SIZE","STD_PADDING","isValidShakingChoice","nameWindowX","nameWindowY","nameWindowStdPadding","WIDTH","HEIGHT","isTempSpriteContainerVisibility","Point","customFont","customFontName","customFontSrc","defaultChoicePostion","exTextColors","pathTextSound","textSoundEval1","textSoundEval2","textSoundPoolSize","preloadWindowskins","isNwjs","isOptionValid","systemFonts","settings","languageCode","fontName","alias_Game_Temp_initialize","eval","boxWidth","KoreanEscapeCode","ChineseEscapeCode","EnglishEscapeCode","JapaneseEscapeCode","rowData","retData","concat","WAIT_SEC_15","WAIT_SEC_60","START_PAUSE","LINE_SHOW_FAST_LT","LINE_SHOW_FAST_GT","PAUSE_SKIP","getTextCode","idx","match","note","list","commonEvent","reservedCommonEvent","re","join","getColor","getBaseColor","getUserCustomColor","obj","g","b","parseFloat","KOREAN_COLORS","청록","청록색","c_aqua","검은색","검정","c_black","파란색","파랑","c_blue","짙은회색","c_dkgray","자홍색","자홍","c_fuchsia","회색","c_gray","녹색","c_green","밝은녹색","라임","c_lime","밝은회색","c_ltgray","밤색","마룬","c_maroon","감청색","네이비","c_navy","황록색","올리브","c_olive","주황색","주황","오렌지","c_orange","보라색","보라","c_purple","빨간색","빨강","c_red","은색","은","c_silver","민트색","c_teal","흰색","흰","c_white","노란색","노랑","c_yellow","CHINESE_COLOR","水色","黑色","蓝色","深灰色","紫红色","灰色","绿色","浅绿色","浅灰色","栗色","绀青色","黄绿色","橙黄色","紫色","红色","银白色","水鸭色","白色","黄色","ENGLISH_COLOR","AQUA","BLACK","BLUE","DKGRAY","FUCHSIA","GRAY","GREEN","LIME","LTGRAY","MAROON","NAVY","OLIVE","ORANGE","PURPLE","RED","SILVER","TEAL","WHITE","YELLOW","JAPANESE_COLOR","アクア色","靑色","ふか灰色","紫紅色","綠色","黃綠","鼠色","群青色","ネイビー","黃綠色","オリーブ色","橙色","オレンジ色","赤色","レッド","銀色","ミント色","薄荷色","黃色","getKoreanColor","getChineseColor","getEnglishColor","getJapaneseColor","getBrowser","tem","ua","userAgent","M","version","appName","appVersion","splice","inject","_isDirty","COMPONENTS","BalloonWindowTransformComponent","NameWindowPositionComponent","getComponentClass","_components","_bWidth","_bHeight","onReady","standardPadding","dx","dy","bw","bh","boxHeight","stringify","mx","canvasToLocalX","my","scaleY","ny","_nameWindow","isActiveInBalloon","owner","warn","getNameWindowY","setBalloonPlacement","setBalloonRect","updateSubBalloonElements","$gameSystem","isSideView","scene","_spriteset","_actorSprites","_enemySprites","tempBattlers","target","_actor","isAlive","_enemy","padY","_mainSprite","transform","updateTransform","tempFontSize","calcTextHeight","EventEmitter","init","mounted","onDestroy","_listeners","eventName","Function","isNaN","position","nx","newX","setOpacity","ballonOwnerType","updatePositionX","topY","isOpen","ComponentExecutor","INSTANCE","startChar","endChar","len","fromCharCode","random","callbackFunction","active","currentCallback"],"mappings":"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","file":"RS_MessageSystem.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { Component, ComponentProp } from \"./Component\";\r\n\r\n/**\r\n * @class BaseComponent\r\n * @description\r\n * 샌드박스 환경에서 MV 메소드를 호출하여 이전 버전에 대한 안전성을 제공합니다.\r\n */\r\nexport class BaseComponent extends Component {\r\n    private _messageWindow!: Window_Message;\r\n\r\n    constructor(props: ComponentProp) {\r\n        super(props);\r\n    }\r\n\r\n    onReady(props: ComponentProp) {\r\n        // if the message window is valid from passed props.\r\n        if (!(\"messageWindow\" in props)) {\r\n            console.error(\"messageWindow is not defined\");\r\n            return;\r\n        }\r\n\r\n        console.log(\"On Ready 이벤트가 실행되었습니다.\");\r\n\r\n        /**\r\n         * @type {Window_Message}\r\n         */\r\n        this._messageWindow = props.messageWindow;\r\n    }\r\n\r\n    // Getters\r\n    get messageWindow() {\r\n        return this._messageWindow;\r\n    }\r\n\r\n    get contents() {\r\n        return this._messageWindow.contents;\r\n    }\r\n\r\n    /**\r\n     * @returns {Window_NameBox}\r\n     */\r\n    get _nameWindow(): never | Window_NameBox {\r\n        const isNameWindowOK = this._messageWindow._nameBoxWindow;\r\n        if (!isNameWindowOK) {\r\n            throw new Error(\r\n                \"이름 윈도우가 아직 정의되지 않았습니다. DI를 제대로된 시점에 하시기 바랍니다.\"\r\n            );\r\n        }\r\n\r\n        return this._messageWindow._nameBoxWindow;\r\n    }\r\n\r\n    get _choiceWindow() {\r\n        return this._messageWindow._choiceListWindow\r\n            ? this._messageWindow._choiceListWindow\r\n            : {\r\n                  windowWidth: () => 0,\r\n                  windowHeight: () => 0,\r\n              };\r\n    }\r\n\r\n    save(): void {\r\n        this._messageWindow.save();\r\n    }\r\n\r\n    restore(): void {\r\n        this._messageWindow.restore();\r\n    }\r\n\r\n    standardPadding() {\r\n        // 패딩을 업데이트해야 합니다 (MZ에서 달라진 부분입니다)\r\n        // 꼭 체크할 필요는 없지만...\r\n        this._messageWindow.updatePadding();\r\n        const padding = this._messageWindow.padding || 12;\r\n\r\n        return padding;\r\n    }\r\n\r\n    textPadding() {\r\n        // textPadding()의 구현입니다.\r\n        return this._messageWindow.itemPadding() || 6;\r\n    }\r\n\r\n    newLineX() {\r\n        return this._messageWindow.newLineX();\r\n    }\r\n\r\n    fittingHeight(numLines: number) {\r\n        return this._messageWindow.fittingHeight(numLines);\r\n    }\r\n\r\n    drawTextEx(text: string) {\r\n        const box = this._messageWindow.textSizeEx(text);\r\n        return box.width;\r\n    }\r\n\r\n    lineHeight() {\r\n        return this._messageWindow.lineHeight();\r\n    }\r\n\r\n    /**\r\n     * TODO: 상속 시, 이 메소드를 오버라이드 하세요.\r\n     */\r\n    updatePlacement() {}\r\n\r\n    drawMessageFace() {\r\n        this._messageWindow.drawMessageFace();\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._messageWindow.x = value;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._messageWindow.y = value;\r\n    }\r\n\r\n    set width(value: number) {\r\n        this._messageWindow.width = value;\r\n    }\r\n\r\n    set height(value: number) {\r\n        this._messageWindow.height = value;\r\n    }\r\n\r\n    get width() {\r\n        return this._messageWindow.width;\r\n    }\r\n\r\n    get _width() {\r\n        return this._messageWindow.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._messageWindow.height;\r\n    }\r\n\r\n    get _height() {\r\n        return this._messageWindow.height;\r\n    }\r\n\r\n    canvasToLocalX(x: number) {\r\n        return x;\r\n    }\r\n\r\n    canvasToLocalY(y: number) {\r\n        return y;\r\n    }\r\n}\r\n","/// <reference types=\"../types/my-types\" />\r\n/// <reference types=\"../types/lunalite-pixi-mz\" />\r\nimport { Color } from \"./RS\";\r\nimport { DependencyInjector } from \"./DependencyInjector\";\r\nimport { BalloonWindowTransformComponent } from \"./BalloonWindowTransformComponent\";\r\nimport { NameWindowPositionComponent } from \"./NameWindowPositionComponent\";\r\nimport ComponentExecutor from \"./ComponentExecutor\";\r\n\r\nconst executor = ComponentExecutor.getInstance();\r\n\r\nexecutor\r\n    /**\r\n     * ? Bitmap\r\n     * @description 텍스트에 그라데이션을 채우는 기능을 추가합니다.\r\n     */\r\n    .add(\"bitmap\", () => {\r\n        const alias_Bitmap_initialize = Bitmap.prototype.initialize;\r\n        Bitmap.prototype.initialize = function (width: number, height: number) {\r\n            alias_Bitmap_initialize.call(this, width, height);\r\n            this.fontBold = false;\r\n            this.fontGradient = false;\r\n            this.highlightTextColor = null;\r\n        };\r\n\r\n        Bitmap.prototype.setGradient = function (\r\n            text,\r\n            color1,\r\n            color2,\r\n            color3,\r\n            tx,\r\n            ty\r\n        ) {\r\n            const context = this._context;\r\n            const tWidth = this.measureTextWidth(text);\r\n            context.save();\r\n            const gradient = context.createLinearGradient(\r\n                tx,\r\n                0,\r\n                tx + tWidth,\r\n                0\r\n            );\r\n            gradient.addColorStop(0, color1);\r\n            gradient.addColorStop(0.6, color2);\r\n            gradient.addColorStop(1, color3);\r\n            context.restore();\r\n\r\n            this._baseTexture.update();\r\n\r\n            return gradient;\r\n        };\r\n\r\n        Bitmap.prototype.setGradientStyle = function (\r\n            text,\r\n            color1,\r\n            color2,\r\n            color3,\r\n            tx,\r\n            ty\r\n        ) {\r\n            const context = this._context;\r\n            const width = this.measureTextWidth(text);\r\n            const height = RS.MessageSystem.Params.lineHeight;\r\n            let grd;\r\n\r\n            context.save();\r\n\r\n            const style = RS.MessageSystem.Params.gradientStyle;\r\n\r\n            if (style !== \"radial\") {\r\n                if (style.contains(\"horizontal\")) {\r\n                    grd = context.createLinearGradient(tx, 0, tx + width, 0);\r\n                } else {\r\n                    grd = context.createLinearGradient(tx, 0, 0, ty + height);\r\n                }\r\n            } else {\r\n                const ws = width * 0.5;\r\n                const hs = height * 0.5;\r\n                grd = context.createRadialGradient(ws, hs, 0.0, ws, hs, ws);\r\n            }\r\n\r\n            if (style === \"radial\") {\r\n                grd.addColorStop(0.0, color1);\r\n                grd.addColorStop(1.0, color2);\r\n            } else if (style.contains(\"axial\")) {\r\n                grd.addColorStop(0.0, color1);\r\n                grd.addColorStop(0.5, color2);\r\n                grd.addColorStop(1.0, color3);\r\n            } else {\r\n                grd.addColorStop(0.0, color1);\r\n                grd.addColorStop(1.0, color2);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            this._baseTexture.update();\r\n\r\n            return grd;\r\n        };\r\n\r\n        Bitmap.prototype._makeFontNameText = function () {\r\n            return (\r\n                (this.fontItalic ? \"Italic \" : \"\") +\r\n                (this.fontBold ? \"bold \" : \"\") +\r\n                this.fontSize +\r\n                \"px \" +\r\n                this.fontFace\r\n            );\r\n        };\r\n\r\n        Bitmap.prototype._drawTextBody = function (text, tx, ty, maxWidth) {\r\n            const context = this._context;\r\n            context.save(); // 드로잉 상태 저장\r\n            context.imageSmoothingEnabled =\r\n                RS.MessageSystem.Params.fontSmoothingEnabled;\r\n\r\n            if (this.fontGradient) {\r\n                var gradient = this.setGradientStyle(\r\n                    text,\r\n                    RS.MessageSystem.Params.gradientColor1,\r\n                    RS.MessageSystem.Params.gradientColor2,\r\n                    RS.MessageSystem.Params.gradientColor3,\r\n                    tx,\r\n                    ty\r\n                );\r\n                context.fillStyle = gradient;\r\n            } else {\r\n                context.fillStyle = this.textColor;\r\n            }\r\n            context.fillText(text, tx, ty, maxWidth);\r\n            context.fillStyle = this.textColor;\r\n            context.restore();\r\n        };\r\n    })\r\n    /**\r\n     * ? Main\r\n     * @description\r\n     * 메인 엔트리 포인트입니다.\r\n     */\r\n    .add(\"main\", () => {\r\n        //============================================================================\r\n        // Game_Message\r\n        //============================================================================\r\n        const alias_Game_Message_clear = Game_Message.prototype.clear;\r\n        Game_Message.prototype.clear = function () {\r\n            alias_Game_Message_clear.call(this);\r\n            this._waitTime = 0;\r\n            this._gradientText = \"\";\r\n            this._balloon = -2;\r\n            this._align = [];\r\n            this._balloonPatternHeight = 0;\r\n            this._lastAlign = -1;\r\n        };\r\n\r\n        Game_Message.prototype.setWaitTime = function (time) {\r\n            this._waitTime = time;\r\n        };\r\n\r\n        Game_Message.prototype.setGradientText = function (text) {\r\n            this._gradientText = text;\r\n        };\r\n\r\n        Game_Message.prototype.getWaitTime = function () {\r\n            return this._waitTime || 0;\r\n        };\r\n\r\n        Game_Message.prototype.getGradientText = function () {\r\n            return this._gradientText;\r\n        };\r\n\r\n        Game_Message.prototype.getMaxLine = function () {\r\n            return this._maxLine;\r\n        };\r\n\r\n        Game_Message.prototype.setMaxLine = function (maxLine) {\r\n            this._maxLine = maxLine;\r\n            RS.MessageSystem.Params.numVisibleRows = maxLine;\r\n        };\r\n\r\n        Game_Message.prototype.setBalloon = function (n) {\r\n            this._balloon = n;\r\n        };\r\n\r\n        Game_Message.prototype.getBalloon = function (n) {\r\n            return this._balloon;\r\n        };\r\n\r\n        Game_Message.prototype.setAlign = function (n) {\r\n            this._align = this._align || [];\r\n            this._lastAlign = n; // 마지막 정렬 위치 기억\r\n            this._align.push(n);\r\n        };\r\n\r\n        Game_Message.prototype.getAlign = function (n) {\r\n            const last = this._align.shift();\r\n            if (last === undefined) {\r\n                return this._lastAlign;\r\n            }\r\n            return last;\r\n        };\r\n\r\n        Game_Message.prototype.clearAlignLast = function (n) {\r\n            this._lastAlign = -1;\r\n        };\r\n\r\n        Game_Message.prototype.setBalloonPatternHeight = function (\r\n            value: number\r\n        ) {\r\n            this._balloonPatternHeight = value;\r\n        };\r\n\r\n        Game_Message.prototype.getBalloonPatternHeight = function () {\r\n            return this._balloonPatternHeight;\r\n        };\r\n\r\n        //============================================================================\r\n        // Sprite_Battler\r\n        //============================================================================\r\n\r\n        Sprite_Battler.prototype.screenX = function () {\r\n            return this.x || 0;\r\n        };\r\n\r\n        Sprite_Battler.prototype.screenY = function () {\r\n            return this.y || 0;\r\n        };\r\n\r\n        //============================================================================\r\n        // MessageDesc\r\n        //============================================================================\r\n\r\n        class MessageDesc {\r\n            public fontFace: string;\r\n            public fontSize: number;\r\n            public fontBold: boolean;\r\n            public fontItalic: boolean;\r\n            public textColor: string;\r\n            public outlineColor: string;\r\n            public outlineWidth: number;\r\n            public fontGradient: boolean;\r\n            public highlightTextColor: string | null;\r\n            public textSpeed: number;\r\n\r\n            private _isSaved: boolean;\r\n\r\n            constructor() {\r\n                this.fontFace = \"Nanum Gothic\";\r\n                this.fontSize = 12;\r\n                this.fontBold = false;\r\n                this.fontItalic = false;\r\n                this.textColor = \"#000\";\r\n                this.outlineColor = \"#fff\";\r\n                this.outlineWidth = 1;\r\n                this.fontGradient = false;\r\n                this.highlightTextColor = null;\r\n                this.textSpeed = 1;\r\n\r\n                this._isSaved = false;\r\n            }\r\n\r\n            save<T extends Window_Base>(messageWindow: T) {\r\n                this.fontFace = messageWindow.contents.fontFace;\r\n                this.fontSize = +messageWindow.contents.fontSize;\r\n                this.fontBold = messageWindow.contents.fontBold;\r\n                this.fontItalic = messageWindow.contents.fontItalic;\r\n                this.textColor = messageWindow.contents.textColor;\r\n                this.outlineColor = messageWindow.contents.outlineColor;\r\n                this.outlineWidth = messageWindow.contents.outlineWidth;\r\n                this.fontGradient = messageWindow.contents.fontGradient;\r\n                this.highlightTextColor =\r\n                    messageWindow.contents.highlightTextColor;\r\n\r\n                if ($gameMessage) {\r\n                    this.textSpeed = $gameMessage.getWaitTime();\r\n                }\r\n\r\n                this._isSaved = true;\r\n            }\r\n\r\n            restore<T extends Window_Base>(messageWindow: T) {\r\n                if (!this._isSaved) return;\r\n                if (!(messageWindow.contents instanceof Bitmap)) return;\r\n                messageWindow.contents.fontFace = this.fontFace;\r\n                messageWindow.contents.fontSize = this.fontSize;\r\n                messageWindow.contents.fontBold = this.fontBold;\r\n                messageWindow.contents.fontItalic = this.fontItalic;\r\n                messageWindow.contents.textColor = this.textColor;\r\n                messageWindow.contents.outlineColor = this.outlineColor;\r\n                messageWindow.contents.outlineWidth = this.outlineWidth;\r\n                messageWindow.contents.fontGradient = this.fontGradient;\r\n                messageWindow.contents.highlightTextColor =\r\n                    this.highlightTextColor;\r\n                if ($gameMessage) {\r\n                    $gameMessage.setWaitTime(this.textSpeed);\r\n                }\r\n                this._isSaved = false;\r\n            }\r\n        }\r\n\r\n        //============================================================================\r\n        // Window_Base\r\n        //============================================================================\r\n\r\n        Window_Base.prototype.obtainEscapeCode = function (textState) {\r\n            const regExp = RS.MessageSystem.Reg.defaultEscapeCode;\r\n            const arr = regExp.exec(textState.text.slice(textState.index));\r\n            if (arr) {\r\n                textState.index += arr[0].length;\r\n                return arr[0].toUpperCase();\r\n            } else {\r\n                return \"\";\r\n            }\r\n        };\r\n\r\n        /**\r\n         * 확장된 색상 변경 텍스트 코드 처리\r\n         * \\색[빨강]과 웹색상 처리를 위한 정규 표현식 처리\r\n         * @param {}} textState\r\n         */\r\n        Window_Base.prototype.obtainNameColor = function (textState) {\r\n            const arr = /\\[(.+?)\\]/gi.exec(\r\n                textState.text.slice(textState.index)\r\n            );\r\n            if (arr) {\r\n                textState.index += arr[0].length;\r\n                return Color.gmColor(arr[1]);\r\n            } else {\r\n                return ColorManager.textColor(0);\r\n            }\r\n        };\r\n\r\n        Window_Base.prototype.changeTextColor = function (color) {\r\n            const c = parseInt(color);\r\n            // 색상 코드가 숫자인 경우\r\n            if (c > 0 && c < 32) {\r\n                color = ColorManager.textColor(color);\r\n            }\r\n            // if (!this._isUsedTextWidthEx) {\r\n            this.contents.textColor = color;\r\n            // }\r\n        };\r\n\r\n        const alias_Window_Base_processEscapeCharacter =\r\n            Window_Base.prototype.processEscapeCharacter;\r\n        Window_Base.prototype.processEscapeCharacter = function (\r\n            code,\r\n            textState\r\n        ) {\r\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\r\n            const textCode = RS.MessageSystem.TextCodes.Main;\r\n            switch (code) {\r\n                case \"C\":\r\n                    this.changeTextColor(\r\n                        this.textColor(\r\n                            <number>this.obtainEscapeParam(textState)\r\n                        )\r\n                    );\r\n                    break;\r\n                case textCode[tcGroup.COLOR]:\r\n                    this.changeTextColor(\r\n                        this.obtainNameColor(<TextState>textState)\r\n                    );\r\n                    break;\r\n                case \"I\":\r\n                case textCode[tcGroup.ICON]:\r\n                    this.processDrawIcon(\r\n                        <number>this.obtainEscapeParam(textState),\r\n                        textState\r\n                    );\r\n                    break;\r\n                case \"{\":\r\n                case textCode[tcGroup.INCREASE]:\r\n                    this.makeFontBigger();\r\n                    break;\r\n                case \"}\":\r\n                case textCode[tcGroup.DECREASE]:\r\n                    this.makeFontSmaller();\r\n                    break;\r\n                case \"AEND\":\r\n                    $gameMessage.clearAlignLast();\r\n                    break;\r\n                default:\r\n                    alias_Window_Base_processEscapeCharacter.call(\r\n                        this,\r\n                        code,\r\n                        textState\r\n                    );\r\n                    break;\r\n            }\r\n        };\r\n\r\n        const alias_loadWindowskin = Window_Base.prototype.loadWindowskin;\r\n        Window_Base.prototype.loadWindowskin = function () {\r\n            alias_loadWindowskin.call(this);\r\n            this.windowskin.addLoadListener(() => {\r\n                Color.baseColor = ColorManager.textColor(0);\r\n            });\r\n        };\r\n\r\n        Window_Base.prototype.getFontFace = function () {\r\n            const langCode =\r\n                RS.MessageSystem.Params.langCode ||\r\n                navigator.language.slice(0, 2);\r\n            const fonts = RS.MessageSystem.Params.fonts[langCode];\r\n            if (fonts) {\r\n                return fonts;\r\n            } else {\r\n                return RS.MessageSystem.Params.fonts.default;\r\n            }\r\n        };\r\n\r\n        Window_Base.prototype.drawTextEx = function (text, x, y, width) {\r\n            this.save();\r\n            this.resetFontSettings();\r\n            const textState = this.createTextState(text, x, y, width);\r\n            this.processAllText(textState);\r\n            this.restore();\r\n            return textState.outputWidth;\r\n        };\r\n\r\n        // Window_Base.prototype.processAllText = function (textState) {\r\n        //     this._isUsedTextWidthEx = !textState.drawing;\r\n        //     while (textState.index < textState.text.length) {\r\n        //         this.processCharacter(textState);\r\n        //     }\r\n        //     this.flushTextState(textState);\r\n        // };\r\n\r\n        Window_Base.prototype.makeFontSmaller = function () {\r\n            if (this.contents.fontSize >= RS.MessageSystem.Params.minFontSize) {\r\n                this.contents.fontSize -= 12;\r\n            }\r\n        };\r\n\r\n        Window_Base.prototype.resetFontSettings = function () {\r\n            this.contents.fontFace = this.getFontFace();\r\n            this.contents.fontSize = RS.MessageSystem.Params.fontSize;\r\n            this.contents.fontBold = false;\r\n            this.contents.fontItalic = false;\r\n            this.contents.outlineWidth =\r\n                RS.MessageSystem.Params.defaultOutlineWidth;\r\n            this.contents.outlineColor =\r\n                RS.MessageSystem.Params.defaultOutlineColor;\r\n\r\n            this.contents.fontGradient = false;\r\n            this.contents.highlightTextColor = null;\r\n            this.resetTextColor();\r\n        };\r\n\r\n        Window_Base.prototype.makeFontBigger = function () {\r\n            if (this.contents.fontSize <= RS.MessageSystem.Params.maxFontSize) {\r\n                this.contents.fontSize += 12;\r\n            }\r\n        };\r\n\r\n        Window_Base.prototype.save = function () {\r\n            this._messageDesc = new MessageDesc();\r\n            this._messageDesc.save(this);\r\n            console.log(this._messageDesc);\r\n        };\r\n\r\n        Window_Base.prototype.restore = function () {\r\n            if (!this._messageDesc) return;\r\n            this._messageDesc.restore(this);\r\n            this._messageDesc = undefined;\r\n        };\r\n\r\n        const alias_Window_Base_convertEscapeCharacters =\r\n            Window_Base.prototype.convertEscapeCharacters;\r\n        Window_Base.prototype.convertEscapeCharacters = function (text) {\r\n            const regGroup = RS.MessageSystem.Reg.Group;\r\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\r\n            const textCode = RS.MessageSystem.TextCodes.Main;\r\n\r\n            text = alias_Window_Base_convertEscapeCharacters.call(this, text);\r\n            text = text.replace(\r\n                regGroup[tcGroup.VAR],\r\n                function (...args: any[]): string {\r\n                    return $gameVariables\r\n                        .value(parseInt(<string>args[1]))\r\n                        .toString();\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.VAR],\r\n                function (...args: any[]) {\r\n                    return $gameVariables.value(parseInt(args[1])).toString();\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(regGroup[tcGroup.PLAYER], (...args: any[]) => {\r\n                return this.actorName(parseInt(args[1]));\r\n            });\r\n            text = text.replace(\r\n                regGroup[tcGroup.PARTY_MEMBER],\r\n                (...args: any[]) => {\r\n                    return this.partyMemberName(parseInt(args[1]));\r\n                }\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.NUM],\r\n                function (...args: any[]) {\r\n                    return args[1].toComma();\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.GOLD],\r\n                TextManager.currencyUnit\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.CLASSES],\r\n                function (...args: any[]) {\r\n                    return $dataClasses[parseInt(args[1])].name || \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ITEM],\r\n                function (...args: any[]) {\r\n                    return $dataItems[parseInt(args[1])].name || \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.WEAPON],\r\n                function (...args: any[]) {\r\n                    return $dataWeapons[parseInt(args[1])].name || \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ARMOR],\r\n                function (...args: any[]) {\r\n                    return $dataArmors[parseInt(args[1])].name || \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ENEMY],\r\n                function (...args: any[]) {\r\n                    return $dataEnemies[parseInt(args[1])].name || \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.STATE],\r\n                function (...args: any[]) {\r\n                    return $dataStates[parseInt(args[1])].name || \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.SKILL],\r\n                function (...args: any[]) {\r\n                    return $dataSkills[parseInt(args[1])].name || \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ALIGN_LEFT],\r\n                function () {\r\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[0]\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ALIGN_CENTER],\r\n                function () {\r\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[1]\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ALIGN_RIGHT],\r\n                function () {\r\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[2]\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(regGroup[tcGroup.ALIGN], (...args: any[]) => {\r\n                if (!this._isUsedTextWidthEx) {\r\n                    $gameMessage.setAlign(Number(args[1] || 0));\r\n                }\r\n                return \"\";\r\n            });\r\n            text = text.replace(\r\n                /<\\/LEFT>|<\\/CENTER>|<\\/RIGHT>/gi,\r\n                function () {\r\n                    return regGroup[tcGroup.ALIGN_CLEAR].source;\r\n                }.bind(this)\r\n            );\r\n            return text;\r\n        };\r\n\r\n        /**\r\n         * @deprecated\r\n         */\r\n        Window_Base.prototype.textPadding = function () {\r\n            return this.itemPadding();\r\n        };\r\n\r\n        Window_Base.prototype.newLineX = function (textState) {\r\n            return this.textPadding();\r\n        };\r\n\r\n        Window_Base.prototype.processAlign = function (textState) {\r\n            textState = textState || this._textState;\r\n\r\n            const isArabic = textState.rtl;\r\n\r\n            if (isArabic) {\r\n                return;\r\n            }\r\n\r\n            switch ($gameMessage.getAlign()) {\r\n                case 0:\r\n                    this.setAlignLeft(textState);\r\n                    break;\r\n                case 1:\r\n                    this.setAlignCenter(textState);\r\n                    break;\r\n                case 2:\r\n                    this.setAlignRight(textState);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        const alias_Window_Base_processNewLine_align =\r\n            Window_Base.prototype.processNewLine;\r\n        Window_Base.prototype.processNewLine = function (textState) {\r\n            alias_Window_Base_processNewLine_align.call(this, textState);\r\n            this.processAlign(<TextState>textState);\r\n        };\r\n\r\n        Window_Base.prototype.setAlignLeft = function (textState) {\r\n            textState.x = this.newLineX(textState);\r\n            textState.startX = textState.x;\r\n        };\r\n\r\n        Window_Base.prototype.setAlignCenter = function (textState) {\r\n            const padding = this.textPadding();\r\n            textState.x =\r\n                (this.newLineX(textState) + this.contentsWidth() + padding) /\r\n                    2 -\r\n                textState.outputWidth / 2;\r\n            textState.startX = textState.x;\r\n        };\r\n\r\n        Window_Base.prototype.setAlignRight = function (textState) {\r\n            const padding = this.textPadding();\r\n            textState.x =\r\n                this.contentsWidth() - padding - textState.outputWidth;\r\n            textState.startX = textState.x;\r\n        };\r\n\r\n        //============================================================================\r\n        // Window_Message\r\n        //============================================================================\r\n\r\n        Window_Message.prototype.obtainTextSpeed = function (textState) {\r\n            const arr = /\\[(\\d+)\\]/.exec(textState.text.slice(textState.index));\r\n            if (arr) {\r\n                textState.index += arr[0].length;\r\n                return parseInt(arr[1]);\r\n            } else {\r\n                return 0;\r\n            }\r\n        };\r\n\r\n        Window_Message.prototype.obtainGradientText = function (textState) {\r\n            const arr = /^<(.+?)>/.exec(textState.text.slice(textState.index));\r\n            if (arr) {\r\n                textState.index += arr[0].length;\r\n                return String(arr[1]);\r\n            } else {\r\n                return \"Empty Text\";\r\n            }\r\n        };\r\n\r\n        Window_Message.prototype.obtainSoundName = function (textState) {\r\n            const arr = /\\<(.+?)\\>/.exec(textState.text.slice(textState.index));\r\n            if (arr) {\r\n                textState.index += arr[0].length;\r\n                return String(arr[1]);\r\n            } else {\r\n                return \"\";\r\n            }\r\n        };\r\n\r\n        const alias_Window_Message_processEscapeCharacter =\r\n            Window_Message.prototype.processEscapeCharacter;\r\n        Window_Message.prototype.processEscapeCharacter = function (\r\n            code,\r\n            textState: TextState | string\r\n        ) {\r\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\r\n            const textCode = RS.MessageSystem.TextCodes.Main;\r\n            switch (code) {\r\n                case textCode[tcGroup.TEXT_SPEED]:\r\n                    $gameMessage.setWaitTime(\r\n                        <number>this.obtainEscapeParam(textState)\r\n                    );\r\n                    break;\r\n                case textCode[tcGroup.TEXT_SIZE]:\r\n                    this.setTextSize(<number>this.obtainEscapeParam(textState));\r\n                    break;\r\n                case textCode[tcGroup.OUTLINE_COLOR]:\r\n                    this.setStrokeColor(\r\n                        this.obtainNameColor(<TextState>textState)\r\n                    );\r\n                    break;\r\n                case textCode[tcGroup.INDENT]:\r\n                    this.setTextIndent(<TextState>textState);\r\n                    break;\r\n                case textCode[tcGroup.OUTLINE_WIDTH]:\r\n                    this.setStrokeWidth(\r\n                        <number>this.obtainEscapeParam(<TextState>textState)\r\n                    );\r\n                    break;\r\n                case textCode[tcGroup.BOLD]:\r\n                    this.setTextBold(!this.contents.fontBold);\r\n                    break;\r\n                case textCode[tcGroup.BOLD_START]:\r\n                    this.setTextBold(true);\r\n                    break;\r\n                case textCode[tcGroup.BOLD_END]:\r\n                    this.setTextBold(false);\r\n                    break;\r\n                case textCode[tcGroup.ITALIC]:\r\n                    this.setTextItalic(!this.contents.fontItalic);\r\n                    break;\r\n                case textCode[tcGroup.ITALIC_START]:\r\n                    this.setTextItalic(true);\r\n                    break;\r\n                case textCode[tcGroup.ITALIC_END]:\r\n                    this.setTextItalic(false);\r\n                    break;\r\n                case textCode[tcGroup.GRADIENT]:\r\n                    this.setTextGradient(<TextState>textState);\r\n                    break;\r\n                case textCode[tcGroup.HIGHLIGHT_TEXT_COLOR]:\r\n                    this.setHighlightTextColor(\r\n                        this.obtainNameColor(<TextState>textState)\r\n                    );\r\n                    break;\r\n                case textCode[tcGroup.TAB]:\r\n                    (<TextState>textState).x += Number(\r\n                        this.textWidth(\"A\") * RS.MessageSystem.Params.TabSize\r\n                    );\r\n                    break;\r\n                case textCode[tcGroup.CARRIAGE_RETURN]:\r\n                    (<TextState>textState).x = Number(\r\n                        (textState as TextState).startX || 0\r\n                    );\r\n                    if (!this._isUsedTextWidthEx) this.startWait(1);\r\n                    break;\r\n                case textCode[tcGroup.PLAY_SE]:\r\n                    if (!this._isUsedTextWidthEx)\r\n                        this.playSe(this.obtainSoundName(<TextState>textState));\r\n                    break;\r\n                case textCode[tcGroup.SHOW_PICTURE]:\r\n                    if (this._isUsedTextWidthEx) break;\r\n                    this.showPicture(\r\n                        this.obtainSoundName(<TextState>textState)\r\n                    );\r\n                    this.startWait(15);\r\n                case textCode[tcGroup.HIDE_PICTURE]:\r\n                    if (this._isUsedTextWidthEx) break;\r\n                    this.erasePicture(\r\n                        <number>this.obtainEscapeParam(textState)\r\n                    );\r\n                    this.startWait(15);\r\n                case textCode[tcGroup.FACE]:\r\n                    if (this._isUsedTextWidthEx) break;\r\n                    var params = this.obtainSoundName(\r\n                        <TextState>textState\r\n                    ).split(\",\");\r\n                    // this.redrawFaceImage(textState, params[0], params[1], 0, 0);\r\n                    this.startWait(1);\r\n                    break;\r\n                default:\r\n                    alias_Window_Message_processEscapeCharacter.call(\r\n                        this,\r\n                        code,\r\n                        textState\r\n                    );\r\n                    break;\r\n            }\r\n        };\r\n\r\n        Window_Message.prototype.setTextItalic = function (...args) {\r\n            this.contents.fontItalic = args[0];\r\n        };\r\n\r\n        Window_Message.prototype.setTextBold = function (...args) {\r\n            this.contents.fontBold = args[0];\r\n        };\r\n\r\n        Window_Message.prototype.setTextSize = function (...args) {\r\n            this.contents.fontSize = args[0].clamp(\r\n                RS.MessageSystem.Params.minFontSize,\r\n                RS.MessageSystem.Params.maxFontSize\r\n            );\r\n        };\r\n\r\n        Window_Message.prototype.setStrokeWidth = function (...args) {\r\n            this.contents.outlineWidth = args[0];\r\n        };\r\n\r\n        Window_Message.prototype.setStrokeColor = function (...args) {\r\n            this.contents.outlineColor = args[0];\r\n        };\r\n\r\n        Window_Message.prototype.setTextIndent = function (textState) {\r\n            const value = parseInt(<string>this.obtainEscapeParam(textState));\r\n            textState.x += value;\r\n        };\r\n\r\n        Window_Message.prototype.setHighlightTextColor = function (\r\n            ...args: any[]\r\n        ) {\r\n            let color: any = args[0];\r\n            if (color === \"null\" || color === \"없음\") {\r\n                color = null;\r\n            }\r\n            this.contents.highlightTextColor = color;\r\n        };\r\n\r\n        Window_Message.prototype.setTextGradient = function (textState) {\r\n            // TODO: 여기에서는 텍스트를 그리지 않는다.\r\n            // TODO: 그레디언트 모드임을 명시하고 flush 단계에서 한 번에 그려야 한다 (배경색도 마찬가지이다)\r\n            this.contents.fontGradient = true;\r\n        };\r\n\r\n        Window_Message.prototype.playSe = function (seName) {\r\n            const realName = seName.trim();\r\n            const data = <rm.types.AudioParameters>{\r\n                name: realName,\r\n                pan: 0,\r\n                pitch: 100,\r\n                volume: (<any>ConfigManager).seVolume,\r\n            };\r\n            AudioManager.playSe(data);\r\n        };\r\n\r\n        Window_Message.prototype.showPicture = function (param: string) {\r\n            const raw = param.split(\",\").map((e) => {\r\n                return e.trim();\r\n            });\r\n\r\n            let params = [\r\n                Number(raw[0]),\r\n                raw[1],\r\n                Number(raw[2]),\r\n                Number(raw[3]),\r\n                Number(raw[4]),\r\n                100,\r\n                100,\r\n                255,\r\n                0,\r\n            ];\r\n            let ret = true;\r\n\r\n            // 모든 요소 검증\r\n            if (params) {\r\n                params.forEach((e, i, a) => {\r\n                    if (e === undefined || e === null) {\r\n                        ret = false;\r\n                    }\r\n                });\r\n            }\r\n            // 검증 결과가 참이라면 그림 표시\r\n            if (ret) {\r\n                $gameScreen.showPicture.apply($gameScreen, <any>params);\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        Window_Message.prototype.erasePicture = function (picId) {\r\n            if (typeof picId !== \"number\") return;\r\n            $gameScreen.erasePicture(picId);\r\n        };\r\n\r\n        // 구조가 변경된 메서드\r\n        Window_Message.prototype.resetFontSettings = function () {\r\n            Window_Base.prototype.resetFontSettings.call(this);\r\n\r\n            // pause 아이콘 표시 위치 초기화\r\n            if (this._pauseSignSprite) {\r\n                this._pauseSignSprite.move(this._width / 2, this._height);\r\n                this._pauseSignSprite.scale.y = 1;\r\n            }\r\n\r\n            $gameMessage.setWaitTime(RS.MessageSystem.Params.textSpeed);\r\n        };\r\n\r\n        // 새로 추가된 메서드\r\n        Window_Message.prototype.resetGradient = function (textState) {\r\n            this.contents.fontGradient = false;\r\n        };\r\n\r\n        // 폰트 사이즈 설정 메서드는 MZ에서 없다\r\n        Window_Message.prototype.numVisibleRows = function () {\r\n            return RS.MessageSystem.Params.numVisibleRows;\r\n        };\r\n\r\n        /**\r\n         * Create text state included px and py values for text word wrapping.\r\n         */\r\n        const alias_Window_Message_createTextState =\r\n            Window_Message.prototype.createTextState;\r\n        Window_Message.prototype.createTextState = function (\r\n            text,\r\n            x,\r\n            y,\r\n            width\r\n        ) {\r\n            let textState = alias_Window_Message_createTextState.call(\r\n                this,\r\n                text,\r\n                x,\r\n                y,\r\n                width\r\n            );\r\n\r\n            const px = textState.x;\r\n            const py = textState.y;\r\n\r\n            // mixin\r\n            Object.assign(textState, {\r\n                px,\r\n                py,\r\n            });\r\n\r\n            return textState;\r\n        };\r\n\r\n        Window_Message.prototype.processWordWrap = function (\r\n            textState,\r\n            w,\r\n            width,\r\n            isValid\r\n        ) {\r\n            const px = <Required<number>>textState.px;\r\n\r\n            if (Math.floor(px + w * 2) > width) {\r\n                if (isValid) {\r\n                    this.processNewLine(textState);\r\n                    if (this.needsNewPage(textState)) {\r\n                        this.startPause();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const alias_Window_Message_processNewLinePW =\r\n            Window_Message.prototype.processNewLine;\r\n        Window_Message.prototype.processNewLine = function (textState) {\r\n            alias_Window_Message_processNewLinePW.call(this, textState);\r\n            // 내부 버퍼의 위치를 시작 지점으로 초기화한다.\r\n            (<TextState>textState).px =\r\n                textState.startX || (<TextState>textState).x;\r\n\r\n            // background buffer 초기화\r\n            if (this._backBuffer && this._backBuffer.isDirty) {\r\n                const backTextState = this._backBuffer.textState;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * ! Override\r\n         * @param {Object} textState\r\n         */\r\n        Window_Message.prototype.processCharacter = function (textState) {\r\n            const c = textState.text[textState.index++];\r\n            if (c.charCodeAt(0) < 0x20) {\r\n                this.flushTextState(textState);\r\n                this.processControlCharacter(textState, c);\r\n            } else {\r\n                textState.buffer += c;\r\n\r\n                // 내부 버퍼의 위치를 누적 계산한다.\r\n                textState.px += this.textWidth(c);\r\n            }\r\n        };\r\n\r\n        const alias_Window_Message_processCharacter =\r\n            Window_Message.prototype.processCharacter;\r\n        Window_Message.prototype.processCharacter = function (textState) {\r\n            // 이전 텍스트의 길이를 계산한다.\r\n            let isDirty = false;\r\n            const preBuffer = textState.buffer || \"\";\r\n            let preLen = preBuffer.length;\r\n\r\n            alias_Window_Message_processCharacter.call(this, textState);\r\n\r\n            // 새로운 텍스트가 이후에 있는가?\r\n            // 그게 문자인지 제어 문자인지는 이 로직에선 알 수 없다.\r\n            const postBuffer = textState.buffer || \"\";\r\n            const postLen = postBuffer.length;\r\n            if (preLen !== postLen) {\r\n                isDirty = true;\r\n            }\r\n\r\n            if (isDirty) {\r\n                // 끝에 있는 글자를 가지고 온다.\r\n                // 하지만 제어 문자인지는 확인하지 않는다.\r\n                // 제어 문자 여부는 메인 로직에서 판단하게 둔다.\r\n                const c = textState.buffer.substr(\r\n                    textState.buffer.length - 1,\r\n                    1\r\n                );\r\n                this.processNormalCharacterProxy(textState, c);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * MZ에서는 processNormalCharacter의 구현이 없다.\r\n         * 하지만, 자동 개행이나 사운드 재생 그리고 배경색 묘화를 위해 위치 계산이 필요하다.\r\n         * 이 때문에 추가한 메서드이며, 텍스트의 묘화를 하진 않는다.\r\n         * @param {*} textState\r\n         * @param {*} c\r\n         */\r\n        Window_Message.prototype.processNormalCharacterProxy = function (\r\n            textState,\r\n            c\r\n        ) {\r\n            // MZ에서는 텍스트 상태(textState)가 다음 제어 문자가 등장해야 flush 처리된다.\r\n            // 따라서 이곳에서는 텍스트가 그려질 수 없다.\r\n            const w = this.textWidth(c);\r\n            let width = this.contentsWidth();\r\n\r\n            // 일반 메시지 모드에서만 동작 한다.\r\n            const isNormalMessageWindow = $gameMessage.getBalloon() === -2;\r\n            const isRealDrawingMode = textState.drawing;\r\n            let isValid =\r\n                isNormalMessageWindow &&\r\n                isRealDrawingMode &&\r\n                RS.MessageSystem.Params.isParagraphMinifier;\r\n\r\n            // 소수점 자리를 버려야 정확히 계산된다.\r\n            this.processWordWrap(textState, w, width, isValid);\r\n\r\n            const contents = this.contents;\r\n            const faceName = $gameMessage.faceName();\r\n\r\n            // if the faceName is not empty and the face direction is to right?\r\n            if (faceName !== \"\") {\r\n                width = contents.width - ImageManager.faceWidth;\r\n                isValid = RS.MessageSystem.Params.faceDirection === 2;\r\n                this.processWordWrap(textState, w, width, isValid);\r\n            }\r\n\r\n            // 배경색의 위치를 계산하고 비트맵 인스턴스를 생성한다.\r\n            const isValidTextBackground = contents.highlightTextColor !== null;\r\n            if (isValidTextBackground) {\r\n                const contentW = Math.floor(w * 2) + 1.0;\r\n                const contentH = this.lineHeight();\r\n\r\n                // 내부 버퍼의 텍스트 위치를 받아옵니다 (글자 하나의 버퍼 위치)\r\n                const { px, py } = <TextState>textState;\r\n\r\n                // 배경 버퍼의 생성\r\n                this._backBuffer = {\r\n                    buffer: new Bitmap(contentW, contentH),\r\n                    textState: textState,\r\n                    isDirty: false,\r\n                    x: px,\r\n                    y: py,\r\n                };\r\n\r\n                // 배경 버퍼는 내부 버퍼의 초기 위치로부터 계산된다.\r\n                this._backBuffer.buffer.fillAll(\r\n                    <string>contents.highlightTextColor\r\n                );\r\n                // 이 플래그가 활성화되어있다면 flushTextState에서 그리기 처리를 해야 한다.\r\n                this._backBuffer.isDirty = true;\r\n                this._backBuffer.textState = textState;\r\n            }\r\n        };\r\n\r\n        const alias_Window_Message_flushTextState =\r\n            Window_Message.prototype.flushTextState;\r\n        Window_Message.prototype.flushTextState = function (\r\n            textState: TextState\r\n        ) {\r\n            const isDrawing = textState.drawing; // !this._isUsedTextWidthEx와 같은 효과\r\n            const isSlowTextMode =\r\n                !this._showFast && !this.isEndOfText(textState) && isDrawing;\r\n            const isDrawingTextBackground =\r\n                isDrawing && this._backBuffer && this._backBuffer.isDirty;\r\n\r\n            if (isSlowTextMode) {\r\n                this.startWait($gameMessage.getWaitTime() || 0);\r\n            }\r\n\r\n            // 텍스트 코드를 만나면, flush가 시작되는데 배경색의 시작 라인이 달라지면,\r\n            // 다음 라인까지 배경색이 제대로 그려지지 않게 됩니다.\r\n            // 이는 MZ에서는 버퍼 방식이기 때문에 한 글자씩 배경색이 그려지지 않기 때문입니다.\r\n            // 따라서 라인이 달라질 때, flushBackground를 해줘야 합니다.\r\n            if (isDrawingTextBackground && isDrawing) {\r\n                const backBuffer = this._backBuffer;\r\n                const bitmap = backBuffer.buffer;\r\n                const backTextState = backBuffer.textState!;\r\n\r\n                if (backTextState.py !== textState.y) {\r\n                    this._backBuffer.isDirty = false;\r\n                    alias_Window_Message_flushTextState.call(this, textState);\r\n                    return;\r\n                }\r\n                let tx = backBuffer.x;\r\n                let ty = backBuffer.y;\r\n                const x = textState.x;\r\n                const y = textState.y;\r\n                const w = Math.min(this.innerWidth, Math.floor(bitmap.width));\r\n                const h = Math.min(this.innerHeight, Math.floor(bitmap.height));\r\n\r\n                // this.contents.blt(\r\n                //     bitmap,\r\n                //     0,\r\n                //     0,\r\n                //     w,\r\n                //     h,\r\n                //     Math.min(tx, y),\r\n                //     Math.min(ty, y)\r\n                // );\r\n                this._backBuffer.isDirty = false;\r\n            }\r\n\r\n            alias_Window_Message_flushTextState.call(this, textState);\r\n        };\r\n\r\n        /**\r\n         * 새로운 라인이 시작되기 전에 이전 라인에 그려야 할 배경색을 마저 그리는 기능입니다.\r\n         */\r\n        Window_Message.prototype.flushTextBackgbround = function (\r\n            textState: TextState\r\n        ) {};\r\n\r\n        Window_Message.prototype.updateBigFaceOpacity = function () {\r\n            if (!this._faceContents) {\r\n                return;\r\n            }\r\n            let { faceOpacity } = RS.MessageSystem.Params;\r\n            if (!faceOpacity) faceOpacity = 255;\r\n            const value = faceOpacity.clamp(0, 255);\r\n            this._faceContents.opacity = value;\r\n        };\r\n\r\n        Window_Message.prototype.fadeInOutFaceContents = function () {\r\n            if (!this._faceContents) {\r\n                return;\r\n            }\r\n\r\n            const isValid = this.isOpening() || this.isClosing();\r\n            if (isValid) {\r\n                const openness = (this.openness || 0).clamp(0, 255);\r\n                this._faceContents.scale.y = openness / 255;\r\n                this._faceContents.y =\r\n                    (this._faceContents.height / 2) * (1 - this.openness / 255);\r\n            }\r\n        };\r\n\r\n        const alias_Window_Message_checkToNotClose =\r\n            Window_Message.prototype.checkToNotClose;\r\n        Window_Message.prototype.checkToNotClose = function () {\r\n            this.fadeInOutFaceContents();\r\n            alias_Window_Message_checkToNotClose.call(this);\r\n        };\r\n\r\n        Window_Message.prototype.updateBalloonPosition = function () {\r\n            // Get the component\r\n            const component = <BalloonWindowTransformComponent>(\r\n                DependencyInjector.getComponent(\r\n                    \"BalloonWindowTransformComponent\"\r\n                )\r\n            );\r\n            if (component) {\r\n                component.updateBalloonPosition();\r\n            }\r\n        };\r\n\r\n        Window_Message.prototype.getDefaultSizeOption = function () {\r\n            const isMobileDevice = Utils.isMobileDevice();\r\n            const maxSW = isMobileDevice\r\n                ? window.outerWidth\r\n                : window.screen.availWidth;\r\n            const maxSH = isMobileDevice\r\n                ? window.outerHeight\r\n                : window.screen.availHeight;\r\n            const maxWidth = this.width;\r\n            const maxHeight = this.height;\r\n\r\n            return {\r\n                maxSW,\r\n                maxSH,\r\n                maxWidth,\r\n                maxHeight,\r\n                maxY: maxSH - maxHeight,\r\n                maxX: maxSW - maxWidth,\r\n            };\r\n        };\r\n\r\n        Window_Message.prototype.updatePlacement = function () {\r\n            const goldWindow = this._goldWindow;\r\n            const isNormalWindowMode = $gameMessage.getBalloon() === -2;\r\n            const isValidSceneIsMap = SceneManager._scene instanceof Scene_Map;\r\n            this._positionType = $gameMessage.positionType();\r\n\r\n            // 말풍선 모드가 아니라면 X좌표를 화면 중앙에 맞춘다.\r\n            if (isNormalWindowMode) {\r\n                const { maxWidth, maxHeight, maxX, maxY } =\r\n                    this.getDefaultSizeOption();\r\n\r\n                const desiredX =\r\n                    Graphics.width / 2 -\r\n                    maxWidth / 2 +\r\n                    RS.MessageSystem.Params.windowOffset.x;\r\n                const desiredY =\r\n                    (this._positionType * (Graphics.height - maxHeight)) / 2 +\r\n                    RS.MessageSystem.Params.windowOffset.y;\r\n\r\n                this.x = Math.min(desiredX, maxX);\r\n                this.y = Math.min(desiredY, maxY);\r\n            } else {\r\n                if (isValidSceneIsMap) {\r\n                    this.updateBalloonPosition();\r\n                }\r\n            }\r\n\r\n            // 골드 윈도우의 위치 설정\r\n            if (goldWindow) {\r\n                const minGoldY = goldWindow.height;\r\n                this._goldWindow.y =\r\n                    this.y > minGoldY ? 0 : Graphics.height - goldWindow.height;\r\n            }\r\n\r\n            // 투명도 업데이트\r\n            this.updateDefaultOpacity();\r\n            this.updateContentsOpacity();\r\n            this.updateBigFaceOpacity();\r\n\r\n            // 이름 윈도우 업데이트\r\n            // if (this._nameBoxWindow.isOpen() || this.areSettingsChanged()) {\r\n            //     this.updateNameWindow();\r\n            // }\r\n\r\n            // 얼굴 이미지의 Z-Index 업데이트\r\n            if ($gameMessage.faceName() !== \"\") {\r\n                const isBigFace = /^Big_/.exec($gameMessage.faceName());\r\n                const backIndex = 2;\r\n\r\n                if (RS.MessageSystem.Params.faceSide) {\r\n                    this.setFaceZIndex(isBigFace ? 0 : backIndex);\r\n                } else {\r\n                    this.setFaceZIndex(backIndex);\r\n                }\r\n            }\r\n        };\r\n\r\n        Window_Message.prototype.isAlreadyDrawnFace = function () {\r\n            return this._faceContents.bitmap || this.newLineX() > 0;\r\n        };\r\n\r\n        Window_Message.prototype.setFaceZIndex = function (zIndex = 0) {\r\n            const parent = this.parent;\r\n            const isFaceSide = RS.MessageSystem.Params.faceSide;\r\n\r\n            if (parent && isFaceSide) {\r\n                this.setChildIndex(this._faceContents, zIndex);\r\n            }\r\n        };\r\n\r\n        Window_Message.prototype.clearFaceBitmap = function () {\r\n            if (this._faceContents.bitmap) {\r\n                // @ts-ignore\r\n                this._faceContents.bitmap = null;\r\n            }\r\n        };\r\n\r\n        const alias_Window_Message_convertEscapeCharacters =\r\n            Window_Message.prototype.convertEscapeCharacters;\r\n        Window_Message.prototype.convertEscapeCharacters = function (text) {\r\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\r\n            const textCode = RS.MessageSystem.TextCodes.Main;\r\n            const regGroup = RS.MessageSystem.Reg.Group;\r\n            text = alias_Window_Message_convertEscapeCharacters.call(\r\n                this,\r\n                text\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.BOLD_START_CV],\r\n                function () {\r\n                    return regGroup[tcGroup.BOLD_START].source;\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.BOLD_END_CV],\r\n                function () {\r\n                    return regGroup[tcGroup.BOLD_END].source;\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ITALIC_START_CV],\r\n                function () {\r\n                    return regGroup[tcGroup.ITALIC_START].source;\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ITALIC_END_CV],\r\n                function () {\r\n                    return regGroup[tcGroup.ITALIC_END].source;\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(regGroup[tcGroup.NAME], (...args) => {\r\n                let retName = args[1];\r\n\r\n                if (retName.endsWith(\":left\")) {\r\n                    retName = retName.replace(\":left\", \"\");\r\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"left\";\r\n                }\r\n                if (retName.endsWith(\":auto\")) {\r\n                    retName = retName.replace(\":auto\", \"\");\r\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"auto\";\r\n                }\r\n                if (retName.endsWith(\":center\")) {\r\n                    retName = retName.replace(\":center\", \"\");\r\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"center\";\r\n                }\r\n                if (retName.endsWith(\":opacity0\")) {\r\n                    retName = retName.replace(\":opacity0\", \"\");\r\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"opacity0\";\r\n                }\r\n                if (retName.endsWith(\":defaultOpacity\")) {\r\n                    retName = retName.replace(\":defaultOpacity\", \"\");\r\n                    RS.MessageSystem.Params.namePositionTypeAtX =\r\n                        \"defaultOpacity\";\r\n                }\r\n                if (retName.endsWith(\":right\")) {\r\n                    retName = retName.replace(\":right\", \"\");\r\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"right\";\r\n                }\r\n                this._nameBoxWindow.setName(retName);\r\n                return \"\";\r\n            });\r\n            text = text.replace(\r\n                regGroup[tcGroup.BALLOON],\r\n                function () {\r\n                    const value = Number(arguments[1] || -2);\r\n                    if ($gameParty.inBattle()) {\r\n                        $gameMessage.setBalloon(\r\n                            // @ts-ignore\r\n                            value < 0\r\n                                ? \"ENEMIES : \" + Math.abs(value)\r\n                                : \"ACTORS : \" + value\r\n                        );\r\n                    } else {\r\n                        $gameMessage.setBalloon(value);\r\n                    }\r\n                    return \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.FRIENDLY_TROOPS],\r\n                function () {\r\n                    const value = Number(arguments[1] || 0);\r\n                    $gameMessage.setBalloon(\r\n                        // @ts-ignore\r\n                        \"ACTORS : \" + value\r\n                    );\r\n                    return \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(\r\n                regGroup[tcGroup.ENEMY_TROOPS],\r\n                function () {\r\n                    const value = Number(arguments[1] || 0);\r\n                    $gameMessage.setBalloon(\r\n                        // @ts-ignore\r\n                        \"ENEMIES : \" + value\r\n                    );\r\n                    return \"\";\r\n                }.bind(this)\r\n            );\r\n            text = text.replace(regGroup[tcGroup.FACE_DIRECTION], () => {\r\n                const value = Number(arguments[1] || 0);\r\n                if (!this._isUsedTextWidthEx) {\r\n                    RS.MessageSystem.Params.faceDirection = value;\r\n                }\r\n                return \"\";\r\n            });\r\n            return text;\r\n        };\r\n\r\n        // Window_Message.prototype.terminateMessage\r\n\r\n        Window_Message.prototype.setHeight = function (n) {\r\n            this.contents.clear();\r\n            $gameMessage.setMaxLine(n);\r\n            this.height = this.fittingHeight(n);\r\n            this.createContents();\r\n            this.updatePlacement();\r\n        };\r\n\r\n        const alias_Window_Message_initialize =\r\n            Window_Message.prototype.initialize;\r\n        Window_Message.prototype.initialize = function (rect) {\r\n            alias_Window_Message_initialize.call(this, rect);\r\n            $gameTemp.setMSHeightFunc(this.setHeight.bind(this));\r\n            this.setHeight(RS.MessageSystem.Params.numVisibleRows);\r\n            this.createFaceContents();\r\n            this.on(\"removed\", this.removeEventHandler, this);\r\n            this.on(\"onLoadWindowskin\", this.onLoadWindowskin, this);\r\n        };\r\n\r\n        Window_Message.prototype.calcBalloonRect = function (text: string) {\r\n            const component = <BalloonWindowTransformComponent>(\r\n                DependencyInjector.getComponent(\r\n                    \"BalloonWindowTransformComponent\"\r\n                )\r\n            );\r\n            component.calcBalloonRect(text);\r\n        };\r\n\r\n        const alias_Window_Message_newPage = Window_Message.prototype.newPage;\r\n        Window_Message.prototype.newPage = function (textState) {\r\n            this.setFaceZIndex();\r\n            this.clearFaceBitmap();\r\n            this.loadWindowskin();\r\n            this.emit(\"onLoadWindowskin\");\r\n            this.openBalloon($gameMessage.getBalloon());\r\n            alias_Window_Message_newPage.call(this, textState);\r\n        };\r\n\r\n        Window_Message.prototype.updateBalloonPositionInBattle = function () {\r\n            const component = <BalloonWindowTransformComponent>(\r\n                DependencyInjector.getComponent(\r\n                    \"BalloonWindowTransformComponent\"\r\n                )\r\n            );\r\n            if (component) {\r\n                component.updateBalloonPositionInBattle();\r\n            }\r\n        };\r\n\r\n        Window_Message.prototype.openBalloon = function (sign) {\r\n            // 말풍선 모드가 아니면 빠져나간다.\r\n            if (sign === -2) {\r\n                this.resizeMessageSystem();\r\n                return;\r\n            }\r\n\r\n            this.setupOwner(sign);\r\n\r\n            const isBattleScene = SceneManager._scene instanceof Scene_Battle;\r\n            // 전투 중일 경우\r\n            if (isBattleScene) {\r\n                this.updateBalloonPositionInBattle();\r\n            } else {\r\n                this.updateBalloonPosition();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * 1. start\r\n         */\r\n        const alias_Window_Message_startMessage =\r\n            Window_Message.prototype.startMessage;\r\n        Window_Message.prototype.startMessage = function () {\r\n            const text = $gameMessage.allText();\r\n            const textState = this.createTextState(text, 0, 0, 0);\r\n            textState.x = this.newLineX(textState);\r\n            textState.startX = textState.x;\r\n            this._textState = textState;\r\n\r\n            // 말풍선 영역을 계산합니다.\r\n            let tempText = textState.text.slice(0);\r\n            if (\r\n                $gameMessage.getBalloon() === -2 &&\r\n                RS.MessageSystem.Params.isParagraphMinifier\r\n            ) {\r\n                tempText = tempText.replace(/[\\r\\n]+/gm, \" \");\r\n            }\r\n            // ! BUG의 원인\r\n            this.calcBalloonRect(tempText);\r\n\r\n            this.newPage(this._textState);\r\n\r\n            // width 와 height를 재설정한다.\r\n            this.resizeMessageSystem(\"no reset\");\r\n\r\n            this.updatePlacement();\r\n            this.updateBackground();\r\n            this.open();\r\n            this._nameBoxWindow.start();\r\n        };\r\n\r\n        Window_Message.prototype.getDefaultWindowRect = function () {\r\n            return Scene_Message.prototype.messageWindowRect();\r\n        };\r\n\r\n        Window_Message.prototype.windowWidth = function () {\r\n            const rect = this.getDefaultWindowRect();\r\n            return rect.width;\r\n        };\r\n\r\n        Window_Message.prototype.windowHeight = function () {\r\n            const rect = this.getDefaultWindowRect();\r\n            return rect.height;\r\n        };\r\n\r\n        Window_Message.prototype.resizeMessageSystem = function (\r\n            ...args: any[]\r\n        ) {\r\n            const isResetOwner: Boolean = !(args.length > 0);\r\n\r\n            const isBattleScene = SceneManager._scene instanceof Scene_Battle;\r\n            if (!isResetOwner && isBattleScene) {\r\n                return;\r\n            }\r\n\r\n            const n = $gameMessage.positionType();\r\n            const ox = RS.MessageSystem.Params.windowOffset.x;\r\n            const oy = RS.MessageSystem.Params.windowOffset.y;\r\n\r\n            const windowRect = {\r\n                width: this.windowWidth(),\r\n                height: this.windowHeight(),\r\n            };\r\n            const x = Graphics.width / 2 - windowRect.width / 2 + ox;\r\n            const y = (n * (Graphics.height - windowRect.height)) / 2 + oy;\r\n            const width = windowRect.width;\r\n            const height = windowRect.height;\r\n\r\n            if (x !== this.x) this.x = x;\r\n            if (y !== this.y) this.y = y;\r\n            if (width !== this.width || height !== this.height) {\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n\r\n            if (isResetOwner) {\r\n                $gameMap.setMsgOwner($gamePlayer);\r\n            }\r\n        };\r\n\r\n        Window_Message.prototype.removeEventHandler = function () {\r\n            this.off(\"onLoadWindowskin\", this.onLoadWindowskin, this);\r\n        };\r\n\r\n        /**\r\n         * TODO: ColorManager.textColor의 대체 구현.\r\n         *\r\n         * @param {Number} n\r\n         * @returns\r\n         */\r\n        Window_Message.prototype.textColor = function (n) {\r\n            const windowskin = this.windowskin;\r\n            if (!windowskin.isReady()) {\r\n                // Set the default text color if the windowskin is not ready.\r\n                return Color.baseColor;\r\n            }\r\n            const px = 96 + (n % 8) * 12 + 6;\r\n            const py = 144 + Math.floor(n / 8) * 12 + 6;\r\n            return windowskin.getPixel(px, py);\r\n        };\r\n\r\n        Window_Message.prototype.onLoadWindowskin = function () {\r\n            Color.baseColor = this.textColor(0);\r\n            this.changeTextColor(Color.baseColor);\r\n        };\r\n\r\n        Window_Message.prototype.loadWindowskin = function () {\r\n            const bitmap = ImageManager.loadSystem(\r\n                RS.MessageSystem.Params.windowskin\r\n            );\r\n\r\n            // if the windowskin is changed?\r\n            if (bitmap !== this.windowskin) {\r\n                this.windowskin = bitmap;\r\n                this._isDirtyWindowskin = false;\r\n                this.windowskin.addLoadListener(() => {\r\n                    this._isDirtyWindowskin = true;\r\n                });\r\n                if (!this.contents) {\r\n                    this.createContents();\r\n                }\r\n                // Set the default text color if the windowskin didn't load yet.\r\n                this.changeTextColor(Color.baseColor);\r\n\r\n                if (!this.windowskin.isReady()) {\r\n                    return setTimeout(() => this.loadWindowskin(), 10);\r\n                }\r\n            }\r\n        };\r\n\r\n        const _Window_Message_updateLoading =\r\n            Window_Message.prototype.updateLoading;\r\n        Window_Message.prototype.updateLoading = function () {\r\n            let ret = true;\r\n\r\n            if (this._isDirtyWindowskin) {\r\n                Color.baseColor = ColorManager.textColor(0);\r\n                this.changeTextColor(Color.baseColor);\r\n                this._isDirtyWindowskin = false;\r\n                ret = true;\r\n            }\r\n            return _Window_Message_updateLoading.call(this) && ret;\r\n        };\r\n\r\n        Window_Message.prototype.needsNewPage = function (textState) {\r\n            return (\r\n                !this.isEndOfText(textState) &&\r\n                textState.y + textState.height > this.contentsHeight()\r\n            );\r\n        };\r\n\r\n        Window_Message.prototype.createFaceContents = function () {\r\n            this._faceContents = new Sprite();\r\n            this._faceContents.x = 0;\r\n            this._faceContents.y = 0;\r\n\r\n            this.addChildAt(this._faceContents, 2);\r\n            return this._faceContents;\r\n        };\r\n\r\n        Window_Message.prototype.removeFaceContents = function () {\r\n            if (this._faceContents) this.removeChild(this._faceContents);\r\n        };\r\n\r\n        /**\r\n         * 큰 얼굴 이미지가 설정되었을 때 텍스트 시작 위치\r\n         */\r\n        Window_Message.prototype.newLineX = function () {\r\n            const reg = /^Big_/i;\r\n            const faceName = $gameMessage.faceName();\r\n            const faceIndex = $gameMessage.faceIndex();\r\n            if (reg.exec(faceName)) {\r\n                var faceStartX = RS.MessageSystem.Params.faceSide\r\n                    ? 0\r\n                    : RS.MessageSystem.Params.textStartX;\r\n                return faceIndex > 0 ? 0 : faceStartX;\r\n            } else {\r\n                const isRightDirection =\r\n                    RS.MessageSystem.Params.faceDirection === 2;\r\n                if (isRightDirection) {\r\n                    return 0;\r\n                }\r\n                return faceName ? RS.MessageSystem.Params.faceStartOriginX : 0;\r\n            }\r\n        };\r\n\r\n        // TODO: 큰 얼굴 이미지 구현 필요\r\n\r\n        /**\r\n         * @param {String} faceName\r\n         */\r\n        Window_Message.prototype.isValidBigFace = function (faceName) {\r\n            const reg = /^Big_/i;\r\n            return reg.exec(faceName);\r\n        };\r\n\r\n        /**\r\n         * TODO: deprecated\r\n         */\r\n        Window_Message.prototype.updateNameWindow = function () {};\r\n\r\n        /**\r\n         * Window 구성 스프라이트 _windowBackSprite의 투명도를 조절합니다.\r\n         * TODO: deprecated\r\n         * @method standardBackOpacity\r\n         */\r\n        Window_Message.prototype.standardBackOpacity = function () {\r\n            return RS.MessageSystem.Params.backOpacity;\r\n        };\r\n\r\n        /**\r\n         * Bitmap의 context.globalAlpha 값을 변경합니다.\r\n         * @method translucentOpacity\r\n         */\r\n        Window_Message.prototype.translucentOpacity = function () {\r\n            return RS.MessageSystem.Params.translucentOpacity;\r\n        };\r\n\r\n        /**\r\n         * 윈도우를 구성하는 모든 객체의 투명도를 변경합니다.\r\n         * @method updateDefaultOpacity\r\n         */\r\n        Window_Message.prototype.updateDefaultOpacity = function () {\r\n            this.opacity = RS.MessageSystem.Params.defaultOpacity;\r\n        };\r\n\r\n        /**\r\n         * Window 구성 스프라이트 _windowContentsSprite의 투명도를 변경합니다.\r\n         * @method updateContentsOpacity\r\n         */\r\n        Window_Message.prototype.updateContentsOpacity = function () {\r\n            this.contentsOpacity = RS.MessageSystem.Params.contentsOpacity;\r\n        };\r\n\r\n        Window_Message.prototype.getSpriteActors = function (\r\n            sign: number\r\n        ): IBalloonSpriteTarget | null {\r\n            if (!$gameParty.members()) return null;\r\n            const max = $gameParty.members().length;\r\n            sign = sign.clamp(0, max);\r\n\r\n            return {\r\n                type: \"actor\",\r\n                id: sign - 1,\r\n            };\r\n        };\r\n\r\n        Window_Message.prototype.getSpriteEnemies = function (\r\n            sign: number\r\n        ): IBalloonSpriteTarget | null {\r\n            if (!$gameTroop.members()) return null;\r\n            const max = $gameTroop.members().length;\r\n            sign = sign.clamp(0, max);\r\n\r\n            return {\r\n                type: \"enemy\",\r\n                id: sign - 1,\r\n            };\r\n        };\r\n\r\n        Window_Message.prototype.setupOwner = function (sign) {\r\n            switch (sign) {\r\n                case -1: // 플레이어\r\n                    $gameMap.setMsgOwner($gamePlayer);\r\n                    break;\r\n                case 0: // 이 이벤트\r\n                    $gameMap.setMsgOwner(<Game_Event>$gameMap.getMsgEvent());\r\n                    break;\r\n                default:\r\n                    if (SceneManager._scene instanceof Scene_Battle) {\r\n                        // 전투 중인가?\r\n                        if (/(?:ENEMIES)[ ]*:(.*)/.test(sign.toString())) {\r\n                            // 적\r\n                            $gameMap.setMsgOwner(\r\n                                this.getSpriteEnemies(parseInt(RegExp.$1))\r\n                            );\r\n                        }\r\n                        if (/(?:ACTORS)[ ]*:(.*)/.test(sign.toString())) {\r\n                            // 아군\r\n                            $gameMap.setMsgOwner(\r\n                                this.getSpriteActors(parseInt(RegExp.$1))\r\n                            );\r\n                        }\r\n                    } else {\r\n                        // 맵 이벤트\r\n                        $gameMap.setMsgOwner($gameMap.event(sign));\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n\r\n        const alias_Window_Message_shouldBreakHere =\r\n            Window_Message.prototype.shouldBreakHere;\r\n        Window_Message.prototype.shouldBreakHere = function (text) {\r\n            const isBreakCharacter = alias_Window_Message_shouldBreakHere.call(\r\n                this,\r\n                text\r\n            );\r\n\r\n            if (isBreakCharacter) {\r\n                if (RS.MessageSystem.Params.isPlayTextSound) {\r\n                    const interval = RS.MessageSystem.Params.textSoundInterval;\r\n\r\n                    if (this._textSoundInterval-- <= 0) {\r\n                        AudioManager.playStaticSe(<rm.types.AudioParameters>{\r\n                            name: RS.MessageSystem.popParameter(\r\n                                \"Text Sound\",\r\n                                \"텍스트 효과음\"\r\n                            ),\r\n                            pan: 0,\r\n                            pitch: 100,\r\n                            volume: 90,\r\n                        });\r\n                        this._textSoundInterval = interval;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return isBreakCharacter;\r\n        };\r\n\r\n        //============================================================================\r\n        // Game_Interpreter\r\n        //============================================================================\r\n\r\n        Game_Interpreter.prototype.processMessageParams = function (\r\n            eventId: number,\r\n            index: number\r\n        ) {\r\n            const meta = <EventCommand.CommentMeta>(\r\n                RS.MessageSystem.getEventComments(eventId, index - 1)\r\n            );\r\n            if (meta[\"윈도우 스킨\"]) {\r\n                RS.MessageSystem.Params.windowskin =\r\n                    meta[\"윈도우 스킨\"].trim() || \"Window\";\r\n                ImageManager.loadSystem(RS.MessageSystem.Params.windowskin);\r\n            }\r\n            if (meta[\"이름 윈도우 스킨\"]) {\r\n                RS.MessageSystem.Params.windowskinForNameWindow =\r\n                    meta[\"이름 윈도우 스킨\"].trim() || \"Window\";\r\n                ImageManager.loadSystem(\r\n                    RS.MessageSystem.Params.windowskinForNameWindow\r\n                );\r\n            }\r\n            if (meta[\"라인 높이\"]) {\r\n                RS.MessageSystem.Params.lineHeight = parseInt(\r\n                    meta[\"라인 높이\"]\r\n                );\r\n            }\r\n            if (meta[\"폰트 크기\"]) {\r\n                RS.MessageSystem.Params.fontSize = parseInt(meta[\"폰트 크기\"]);\r\n            }\r\n            if (meta[\"라인\"]) {\r\n                RS.MessageSystem.Params.numVisibleRows = parseInt(meta[\"라인\"]);\r\n            }\r\n            if (meta[\"텍스트 시작 X\"]) {\r\n                RS.MessageSystem.Params.textStartX = parseInt(\r\n                    meta[\"텍스트 시작 X\"]\r\n                );\r\n            }\r\n            if (meta[\"큰 페이스칩 OX\"]) {\r\n                RS.MessageSystem.Params.faceOX = Number(meta[\"큰 페이스칩 OX\"]);\r\n            }\r\n            if (meta[\"큰 페이스칩 OY\"]) {\r\n                RS.MessageSystem.Params.faceOY = Number(meta[\"큰 페이스칩 OY\"]);\r\n            }\r\n            if (meta[\"대화창 뒤에 얼굴 표시\"]) {\r\n                RS.MessageSystem.Params.faceSide = Boolean(\r\n                    meta[\"대화창 뒤에 얼굴 표시\"] === \"true\"\r\n                );\r\n            }\r\n            if (meta[\"대화창 투명도\"]) {\r\n                RS.MessageSystem.Params.defaultOpacity = parseInt(\r\n                    meta[\"대화창 투명도\"]\r\n                );\r\n            }\r\n            if (meta[\"텍스트 효과음 재생 여부\"]) {\r\n                RS.MessageSystem.Params.isPlayTextSound = Boolean(\r\n                    meta[\"텍스트 효과음 재생 여부\"] === \"true\"\r\n                );\r\n            }\r\n            if (meta[\"기본 텍스트 출력 속도\"]) {\r\n                RS.MessageSystem.Params.textSpeed = Number(\r\n                    meta[\"기본 텍스트 출력 속도\"]\r\n                );\r\n            }\r\n        };\r\n\r\n        Game_Interpreter.prototype.isValidMultiLine = function () {\r\n            const codes = [];\r\n            let prevCode = 401;\r\n            let lineCount = 0;\r\n            for (let i = 1; i < 8; i++) {\r\n                const currentCommand = this._list[this._index + i];\r\n                if (currentCommand) {\r\n                    const code = currentCommand.code;\r\n                    codes.push(code);\r\n                    prevCode = code;\r\n                    if ([101, 401].contains(code)) {\r\n                        lineCount++;\r\n                    }\r\n                }\r\n            }\r\n            if (codes.contains(102)) {\r\n                return false;\r\n            } else if (codes.contains(103)) {\r\n                return false;\r\n            } else if ($gameMessage.getMaxLine() <= 4) {\r\n                return false;\r\n            } else if (lineCount <= 4) {\r\n                return false;\r\n            } else if (RS.MessageSystem.Params.choiceWindowStyle == \"RMXP\") {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        };\r\n\r\n        Game_Interpreter.prototype.command101 = function (params) {\r\n            if ($gameMessage.isBusy()) {\r\n                return false;\r\n            }\r\n\r\n            $gameMap.setMsgEvent(this.character(this._eventId > 0 ? 0 : -1));\r\n            $gameMessage.setFaceImage(params[0], params[1]);\r\n            $gameMessage.setBackground(params[2]);\r\n            $gameMessage.setPositionType(params[3]);\r\n            $gameMessage.setSpeakerName(params[4]);\r\n\r\n            this.processMessageParams(this._eventId, this._index);\r\n\r\n            if (this.isMultiLine()) {\r\n                this.multiLineAddMessage();\r\n            } else {\r\n                while (this.nextEventCode() === 401) {\r\n                    // Text data\r\n                    this._index++;\r\n                    $gameMessage.add(this.currentCommand().parameters[0]);\r\n                }\r\n            }\r\n\r\n            switch (this.nextEventCode()) {\r\n                case 102: // Show Choices\r\n                    this._index++;\r\n                    this.setupChoices(this.currentCommand().parameters);\r\n                    break;\r\n                case 103: // Input Number\r\n                    this._index++;\r\n                    this.setupNumInput(this.currentCommand().parameters);\r\n                    break;\r\n                case 104: // Select Item\r\n                    this._index++;\r\n                    this.setupItemChoice(this.currentCommand().parameters);\r\n                    break;\r\n            }\r\n            this.setWaitMode(\"message\");\r\n            return true;\r\n        };\r\n\r\n        Game_Interpreter.prototype.multiLineAddMessage = function () {\r\n            this.initLineHeight();\r\n\r\n            while ($gameMessage._texts.length < $gameMessage.getMaxLine()) {\r\n                while (this.nextEventCode() === 401) {\r\n                    this._index++;\r\n                    $gameMessage.add(this.currentCommand().parameters[0]);\r\n                    this.addLineHeight();\r\n                    if (this._lineHeight >= $gameMessage.getMaxLine()) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (this.nextEventCode() !== 101) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // 커맨드 코드 401번이 아직 남아있는 상황이라면,\r\n            // 다음 인덱스로 넘겨야 선택지가 제대로 동작한다.\r\n            while (this.nextEventCode() === 401) {\r\n                this._index++;\r\n            }\r\n        };\r\n\r\n        Game_Interpreter.prototype.initLineHeight = function () {\r\n            this._lineHeight = 0;\r\n        };\r\n\r\n        Game_Interpreter.prototype.isMultiLine = function () {\r\n            return this.isValidMultiLine();\r\n        };\r\n\r\n        Game_Interpreter.prototype.addLineHeight = function () {\r\n            this._lineHeight++;\r\n            if (this.nextEventCode() === 101) {\r\n                this._index++;\r\n            }\r\n        };\r\n\r\n        //============================================================================\r\n        // Window_NameBox\r\n        //============================================================================\r\n\r\n        Window_NameBox.prototype.updatePlacement = function () {\r\n            this.width = this.windowWidth();\r\n            this.height = this.windowHeight();\r\n            const messageWindow = this._messageWindow;\r\n            if ($gameMessage.isRTL()) {\r\n                this.x = messageWindow.x + messageWindow.width - this.width;\r\n            } else {\r\n                this.x = messageWindow.x;\r\n            }\r\n            if (messageWindow.y > 0) {\r\n                this.y = messageWindow.y - this.height;\r\n            } else {\r\n                this.y = messageWindow.y + messageWindow.height;\r\n            }\r\n        };\r\n\r\n        //============================================================================\r\n        // Game_Temp\r\n        //============================================================================\r\n\r\n        Game_Temp.prototype.setMSHeightFunc = function (func) {\r\n            this._callMSHeightFunc = func;\r\n        };\r\n\r\n        Game_Temp.prototype.setMaxLine = function (n) {\r\n            if (this._callMSHeightFunc) this._callMSHeightFunc(n);\r\n        };\r\n\r\n        //============================================================================\r\n        // Game_Map\r\n        //============================================================================\r\n\r\n        const alias_Game_Map_initialize = Game_Map.prototype.initialize;\r\n        Game_Map.prototype.initialize = function () {\r\n            alias_Game_Map_initialize.call(this);\r\n            this._msgOwner = $gamePlayer;\r\n            this._msgEvent = 0;\r\n        };\r\n\r\n        Game_Map.prototype.getMsgOwner = function () {\r\n            return this._msgOwner;\r\n        };\r\n\r\n        /**\r\n         * @method setMsgOwner\r\n         * @param o {Game_Event | Game_Player}\r\n         */\r\n        Game_Map.prototype.setMsgOwner = function (o) {\r\n            this._msgOwner = o;\r\n            $gameMessage.setBalloonPatternHeight(this.tileHeight());\r\n        };\r\n\r\n        Game_Map.prototype.getMsgEvent = function () {\r\n            return this._msgEvent;\r\n        };\r\n\r\n        Game_Map.prototype.setMsgEvent = function (ev) {\r\n            this._msgEvent = ev;\r\n        };\r\n\r\n        /// ======================================================================\r\n        /// DI\r\n        /// ======================================================================\r\n        const alias_Scene_Message_associateWindows__enrtyPoint =\r\n            Scene_Message.prototype.associateWindows;\r\n        Scene_Message.prototype.associateWindows = function () {\r\n            alias_Scene_Message_associateWindows__enrtyPoint.call(this);\r\n            const messageWindow = this._messageWindow;\r\n            DependencyInjector.injectMessageWindow(messageWindow);\r\n            DependencyInjector.ready();\r\n        };\r\n\r\n        Scene_Message.prototype.messageWindowRect = function () {\r\n            const ww = Graphics.width;\r\n            const wh = this.calcWindowHeight(4, false) + 8;\r\n            const wx = (Graphics.height - ww) / 2;\r\n            const wy = 0;\r\n            return new Rectangle(wx, wy, ww, wh);\r\n        };\r\n\r\n        const alias_Scene_Message_terminate = Scene_Message.prototype.terminate;\r\n        Scene_Message.prototype.terminate = function () {\r\n            alias_Scene_Message_terminate.call(this);\r\n            DependencyInjector.ejectMessageWindow();\r\n        };\r\n\r\n        RS.MessageSystem.initSystem();\r\n\r\n        // ! [DEBUG]\r\n        if (RS.MessageSystem.Params.DEBUG) {\r\n            SceneManager.showDevTools();\r\n            const win = nw.Window.get();\r\n            win.moveTo(window.outerWidth / 3, 153);\r\n        }\r\n    })\r\n    .ready(\"bitmap\")\r\n    .ready(\"main\")\r\n    .executeAll();\r\n","/***\r\n * 이것은 RPG Maker MV 호환성을 위해 존재하며 타입스크립트로 재작성되어야 합니다.\r\n */\r\nimport { Types } from \"../types/parameters\";\r\n\r\ntype TextCodeKey =\r\n    | \"COLOR\"\r\n    | \"TEXT_SPEED\"\r\n    | \"OUTLINE_COLOR\"\r\n    | \"OUTLINE_WIDTH\"\r\n    | \"INDENT\"\r\n    | \"BOLD\"\r\n    | \"ITALIC\"\r\n    | \"NAME\"\r\n    | \"GRADIENT\"\r\n    | \"PARTY_MEMBER\"\r\n    | \"PLAYER\"\r\n    | \"VAR\"\r\n    | \"ICON\"\r\n    | \"INCREASE\"\r\n    | \"DECREASE\"\r\n    | \"GOLD\"\r\n    | \"BALLOON\"\r\n    | \"ALIGN\"\r\n    | \"NUM\"\r\n    | \"TEXT_SIZE\"\r\n    | \"TAB\"\r\n    | \"CARRIAGE_RETURN\"\r\n    | \"PLAY_SE\"\r\n    | \"SHOW_PICTURE\"\r\n    | \"HIDE_PICTURE\"\r\n    | \"ITEM\"\r\n    | \"WEAPON\"\r\n    | \"ARMOR\"\r\n    | \"CLASSES\"\r\n    | \"ENEMY\"\r\n    | \"STATE\"\r\n    | \"SKILL\"\r\n    | \"FACE\"\r\n    | \"FRIENDLY_TROOPS\"\r\n    | \"ENEMY_TROOPS\"\r\n    | \"WAIT_SEC_15\"\r\n    | \"WAIT_SEC_60\"\r\n    | \"START_PAUSE\"\r\n    | \"LINE_SHOW_FAST_LT\"\r\n    | \"LINE_SHOW_FAST_GT\"\r\n    | \"PAUSE_SKIP\"\r\n    | \"BOLD_START\"\r\n    | \"BOLD_END\"\r\n    | \"ITALIC_START\"\r\n    | \"ITALIC_END\"\r\n    | \"ALIGN_LEFT\"\r\n    | \"ALIGN_CENTER\"\r\n    | \"ALIGN_RIGHT\"\r\n    | \"BOLD_START_CV\"\r\n    | \"BOLD_END_CV\"\r\n    | \"ITALIC_START_CV\"\r\n    | \"ITALIC_END_CV\"\r\n    | \"ALIGN_CLEAR\"\r\n    | \"HIGHLIGHT_TEXT_COLOR\"\r\n    | \"FACE_DIRECTION\";\r\n\r\ninterface TextCodeEnum {\r\n    ENUM: Record<TextCodeKey, number>;\r\n}\r\n\r\ntype TextCode = Record<string, any> & TextCodeEnum;\r\n\r\nconst pluginParams = $plugins.filter((i) => {\r\n    return i.description.contains(\"<RS_MessageSystem>\");\r\n});\r\n\r\nconst pluginName = <Types.PluginName>(\r\n    (pluginParams.length > 0 && pluginParams[0].name)\r\n);\r\nconst parameters = <Types.PluginParameters>(\r\n    (pluginParams.length > 0 && pluginParams[0].parameters)\r\n);\r\n\r\nconst RS = <RS>{\r\n    MessageSystem: <IMessageSytem>{},\r\n};\r\n\r\nRS.MessageSystem.jsonParse = function (str: string) {\r\n    const retData = JSON.parse(str, (k, v) => {\r\n        try {\r\n            return RS.MessageSystem.jsonParse(v);\r\n        } catch (e) {\r\n            return v;\r\n        }\r\n    });\r\n\r\n    return retData;\r\n};\r\n\r\n/**\r\n * @method popParameter\r\n */\r\nRS.MessageSystem.popParameter = function (...args: any[]) {\r\n    const k = Object.keys(args);\r\n    let lastUsed = \"\";\r\n\r\n    while (k.length > 0) {\r\n        lastUsed = args[parseInt(<string>k.pop())];\r\n\r\n        // @ts-ignore\r\n        if (parameters[lastUsed]) return parameters[lastUsed];\r\n    }\r\n\r\n    return \"\";\r\n};\r\n\r\nRS.MessageSystem.Reg = {\r\n    Default: [],\r\n    Group: [],\r\n    Korean: [],\r\n    Chinese: [],\r\n    English: [],\r\n    Japanese: [],\r\n};\r\n\r\nenum MessageParams {\r\n    FACE_START_ORIGIN_X = 168,\r\n    NAME_WINDOW_WIDTH = 140,\r\n    NAME_WINDOW_ROWS = 1,\r\n    FONT_SIZE = 28,\r\n    STD_PADDING = 18,\r\n}\r\n\r\nRS.MessageSystem.Params = {\r\n    faceStartOriginX: MessageParams.FACE_START_ORIGIN_X,\r\n    nameWindowWidth: MessageParams.NAME_WINDOW_WIDTH,\r\n    nameWindowRows: MessageParams.NAME_WINDOW_ROWS,\r\n    FONT_SIZE: MessageParams.FONT_SIZE,\r\n    STD_PADDING: MessageParams.STD_PADDING,\r\n    isValidShakingChoice: false,\r\n    fontSize: Number(\r\n        RS.MessageSystem.popParameter(\"Font Size\", \"글꼴 크기\") || 28\r\n    ),\r\n    textSpeed: Number(\r\n        RS.MessageSystem.popParameter(\"Text Speed\", \"기본 텍스트 출력 속도\") ||\r\n            0\r\n    ),\r\n    minFontSize: Number(\r\n        RS.MessageSystem.popParameter(\"Text Min Size\", \"폰트 최소 크기\") || 24\r\n    ),\r\n    maxFontSize: Number(\r\n        RS.MessageSystem.popParameter(\"Text Max Size\", \"폰트 최대 크기\") || 96\r\n    ),\r\n    textStartX: Number(\r\n        RS.MessageSystem.popParameter(\"Text Start X\", \"텍스트 시작 X\")\r\n    ),\r\n    numVisibleRows: Number(\r\n        RS.MessageSystem.popParameter(\"numVisibleRows\", \"라인 갯수\") || 4\r\n    ),\r\n    gradientColor1: String(\r\n        RS.MessageSystem.popParameter(\r\n            \"gradientColor1\",\r\n            \"그레디언트 시작 색상\"\r\n        ) || \"#FFFFFF\"\r\n    ),\r\n    gradientColor2: String(\r\n        RS.MessageSystem.popParameter(\r\n            \"gradientColor2\",\r\n            \"그레디언트 중간 색상\"\r\n        ) || \"#F29661\"\r\n    ),\r\n    gradientColor3: String(\r\n        RS.MessageSystem.popParameter(\"gradientColor3\", \"그레디언트 끝 색상\") ||\r\n            \"#CC3D3D\"\r\n    ),\r\n    nameWindowX: Number(\r\n        RS.MessageSystem.popParameter(\"Name Window X\", \"이름 윈도우 X\") || 0\r\n    ),\r\n    nameWindowY: Number(\r\n        RS.MessageSystem.popParameter(\"Name Window Y\", \"이름 윈도우 Y\") || 0\r\n    ),\r\n    nameWindowStdPadding: Number(\r\n        RS.MessageSystem.popParameter(\r\n            \"Name Window Inner Padding\",\r\n            \"이름 윈도우 안쪽 여백\"\r\n        ) || 18\r\n    ),\r\n    namePositionTypeAtX:\r\n        RS.MessageSystem.popParameter(\r\n            \"Name Window Position\",\r\n            \"이름 윈도우 위치\"\r\n        ) || \"left\",\r\n    faceOX: Number(\r\n        RS.MessageSystem.popParameter(\"Big Face OX\", \"큰 페이스칩 OX\") || 0\r\n    ),\r\n    faceOY: Number(\r\n        RS.MessageSystem.popParameter(\"Big Face OY\", \"큰 페이스칩 OY\") || 0\r\n    ),\r\n    faceSide: Boolean(\r\n        RS.MessageSystem.popParameter(\r\n            \"Show Big Face Back\",\r\n            \"대화창 뒤에 얼굴 표시\"\r\n        ) === \"true\" || false\r\n    ),\r\n    WIDTH: MessageParams.FONT_SIZE * 6 + MessageParams.STD_PADDING,\r\n    HEIGHT: MessageParams.FONT_SIZE + MessageParams.STD_PADDING / 2,\r\n    TabSize: Number(RS.MessageSystem.popParameter(\"Tab Size\", \"탭 크기\")),\r\n    backOpacity: Number(\r\n        RS.MessageSystem.popParameter(\"back Opacity\", \"배경 그림의 투명도\")\r\n    ),\r\n    translucentOpacity: Number(\r\n        RS.MessageSystem.popParameter(\"translucent Opacity\", \"반투명도\")\r\n    ),\r\n    defaultOpacity: Number(\r\n        RS.MessageSystem.popParameter(\"default Opacity\", \"기본 투명도\")\r\n    ),\r\n    contentsOpacity: Number(\r\n        RS.MessageSystem.popParameter(\"contents Opacity\", \"내용의 투명도\")\r\n    ),\r\n    defaultOutlineWidth: Number(\r\n        RS.MessageSystem.popParameter(\"default outline width\", \"테두리 크기\")\r\n    ),\r\n    defaultOutlineColor:\r\n        RS.MessageSystem.popParameter(\"default outline Color\", \"테두리 색상\") ||\r\n        \"white\",\r\n    fonts: {\r\n        default: \"rmmz-mainfont\",\r\n    },\r\n    isTempSpriteContainerVisibility: false,\r\n    lineHeight: 36,\r\n    windowOffset: new Point(-4, -4),\r\n    fontSmoothingEnabled: true,\r\n    customFont: Boolean(\r\n        RS.MessageSystem.popParameter(\r\n            \"Using Custom Font\",\r\n            \"사용자 지정 폰트 사용 여부\"\r\n        ) === \"true\"\r\n    ),\r\n    customFontName: String(\r\n        RS.MessageSystem.popParameter(\r\n            \"Custom Font Name\",\r\n            \"사용자 지정 폰트명\"\r\n        ) || \"GameFont\"\r\n    ),\r\n    customFontSrc: String(\r\n        RS.MessageSystem.popParameter(\r\n            \"Custom Font Src\",\r\n            \"사용자 지정 폰트 경로\"\r\n        ) || \"fonts/mplus-1m-regular.ttf\"\r\n    ),\r\n    windowskin:\r\n        RS.MessageSystem.popParameter(\r\n            \"Default Windowskin\",\r\n            \"기본 윈도우스킨\"\r\n        ) || \"Window\",\r\n    windowskinForNameWindow:\r\n        RS.MessageSystem.popParameter(\"Name Windowskin\", \"이름 윈도우스킨\") ||\r\n        \"Window\",\r\n    choiceWindowStyle: String(\r\n        RS.MessageSystem.popParameter(\"Choice Style\", \"선택지 스타일\") ||\r\n            \"default\"\r\n    ),\r\n    defaultChoicePostion: parameters[\"Default Choice Position\"] || \"right\",\r\n    exTextColors: RS.MessageSystem.jsonParse(\r\n        RS.MessageSystem.popParameter(\"Text Color\", \"텍스트 색상\")\r\n    ),\r\n    isPlayTextSound: Boolean(\r\n        RS.MessageSystem.popParameter(\r\n            \"Text Sound ON/OFF\",\r\n            \"텍스트 효과음 재생 여부\"\r\n        ) === \"true\"\r\n    ),\r\n    pathTextSound: String(\r\n        RS.MessageSystem.popParameter(\"Text Sound\", \"텍스트 효과음\") ||\r\n            \"Cursor1.ogg\"\r\n    ),\r\n    textSoundEval1: RS.MessageSystem.jsonParse(\r\n        RS.MessageSystem.popParameter(\r\n            \"Text Sound Execution Condition\",\r\n            \"텍스트 효과음 실행 조건\"\r\n        ) || \"Math.randomInt(100) < 45\"\r\n    ),\r\n    textSoundEval2: RS.MessageSystem.jsonParse(\r\n        RS.MessageSystem.popParameter(\r\n            \"Text Sound Volume\",\r\n            \"텍스트 효과음 볼륨\"\r\n        ) || \"(0.4 + (RS.MessageSystem.randomNormal(0.8)[0])).clamp(0.0, 0.8)\"\r\n    ),\r\n    textSoundInterval: parseInt(\r\n        RS.MessageSystem.popParameter(\r\n            \"Text Sound Interval\",\r\n            \"텍스트 사운드 재생 간격\"\r\n        )\r\n    ),\r\n    textSoundPoolSize: parseInt(\r\n        RS.MessageSystem.popParameter(\r\n            \"텍스트 사운드 풀 크기\",\r\n            \"Text Sound Pool Size\"\r\n        ) || 6\r\n    ),\r\n    langCode:\r\n        RS.MessageSystem.popParameter(\"언어 코드\", \"Language Code\") || \"ko\",\r\n    preloadWindowskins: JSON.parse(parameters[\"preload windowskin\"] || \"[]\"),\r\n    isParagraphMinifier: Boolean(parameters[\"Paragraph Minifier\"] === \"true\"),\r\n    gradientStyle: parameters[\"Gradient Style\"],\r\n    faceOpacity: parseInt(parameters[\"face Opacity\"] || 21),\r\n    faceDirection: parseInt(parameters[\"face Direction\"] || 0),\r\n    DEBUG: (() => {\r\n        return Utils.isNwjs() && Utils.isOptionValid(\"test\");\r\n    })(),\r\n};\r\n\r\n(() => {\r\n    const systemFonts: Types.SystemFonts = RS.MessageSystem.jsonParse(\r\n        parameters[\"systemFont\"]\r\n    );\r\n    if (!RS.MessageSystem.Params.fonts) return;\r\n\r\n    // ! 여기서부터 변환 시작해야함\r\n    systemFonts.settings.forEach((i) => {\r\n        const params = <{ [key: string]: any } | any>{};\r\n        params[i.languageCode] = i.fontName;\r\n        Object.assign(RS.MessageSystem.Params.fonts as {}, params);\r\n    });\r\n})();\r\n\r\n//============================================================================\r\n// Lazy Initialize Parameters (느린 초기화)\r\n//============================================================================\r\n\r\nvar alias_Game_Temp_initialize = Game_Temp.prototype.initialize;\r\nGame_Temp.prototype.initialize = function () {\r\n    alias_Game_Temp_initialize.call(this);\r\n    RS.MessageSystem.Params.windowWidth =\r\n        eval(parameters[\"Window Width\"]) || Graphics.boxWidth;\r\n};\r\n\r\n//============================================================================\r\n// Multiple Language supports\r\n//============================================================================\r\n\r\nRS.MessageSystem.Reg.KoreanEscapeCode =\r\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z가-힣]+[!]*/i;\r\nRS.MessageSystem.Reg.ChineseEscapeCode =\r\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z一-鼣]+[!]*/i;\r\nRS.MessageSystem.Reg.EnglishEscapeCode = /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z]+[!]*/i;\r\nRS.MessageSystem.Reg.JapaneseEscapeCode =\r\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z\\u3040-\\u309F\\u30A0-\\u30FF\\u3300-\\u33FF\\u4E00-\\u9FFF\\uFF00-\\uFFEF]+[!]*/i;\r\nRS.MessageSystem.Reg.defaultEscapeCode =\r\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z가-힣]+[!]*/i;\r\n\r\nRS.MessageSystem.TextCodes = (function () {\r\n    const rowData = RS.MessageSystem.popParameter(\"Text Code\", \"텍스트 코드\");\r\n    const data = JSON.parse(rowData);\r\n    const retData = <TextCode>{};\r\n\r\n    retData.Korean = [undefined].concat(JSON.parse(data.Korean));\r\n    retData.Chinese = [undefined].concat(JSON.parse(data.Chinese));\r\n    retData.English = [undefined].concat(JSON.parse(data.English));\r\n    retData.Japanese = [undefined].concat(JSON.parse(data.Japanese));\r\n\r\n    return retData;\r\n})();\r\n\r\nRS.MessageSystem.TextCodes.Main = [];\r\n\r\nRS.MessageSystem.TextCodes.ENUM = {\r\n    COLOR: 1,\r\n    TEXT_SPEED: 2,\r\n    OUTLINE_COLOR: 3,\r\n    OUTLINE_WIDTH: 4,\r\n    INDENT: 5,\r\n    BOLD: 6,\r\n    ITALIC: 7,\r\n    NAME: 8,\r\n    GRADIENT: 9,\r\n    PARTY_MEMBER: 10,\r\n    PLAYER: 11,\r\n    VAR: 12,\r\n    ICON: 13,\r\n    INCREASE: 14,\r\n    DECREASE: 15,\r\n    GOLD: 16,\r\n    BALLOON: 17,\r\n    ALIGN: 18,\r\n    NUM: 19,\r\n    TEXT_SIZE: 20,\r\n    TAB: 21,\r\n    CARRIAGE_RETURN: 22,\r\n    PLAY_SE: 23,\r\n    SHOW_PICTURE: 24,\r\n    HIDE_PICTURE: 25,\r\n    ITEM: 26,\r\n    WEAPON: 27,\r\n    ARMOR: 28,\r\n    CLASSES: 29,\r\n    ENEMY: 30,\r\n    STATE: 31,\r\n    SKILL: 32,\r\n    FACE: 33,\r\n    FRIENDLY_TROOPS: 34, // 여긴 2018.01.14에 추가됨\r\n    ENEMY_TROOPS: 35,\r\n    WAIT_SEC_15: 36, // .\r\n    WAIT_SEC_60: 37, // |\r\n    START_PAUSE: 38, // !\r\n    LINE_SHOW_FAST_LT: 39, // <\r\n    LINE_SHOW_FAST_GT: 40, // >\r\n    PAUSE_SKIP: 41, // ^\r\n    BOLD_START: 42, // <B>\r\n    BOLD_END: 43, // </B>\r\n    ITALIC_START: 44,\r\n    ITALIC_END: 45,\r\n    ALIGN_LEFT: 46,\r\n    ALIGN_CENTER: 47,\r\n    ALIGN_RIGHT: 48,\r\n    BOLD_START_CV: 49,\r\n    BOLD_END_CV: 50,\r\n    ITALIC_START_CV: 51,\r\n    ITALIC_END_CV: 52,\r\n    ALIGN_CLEAR: 53, // AEND\r\n    HIGHLIGHT_TEXT_COLOR: 54,\r\n    FACE_DIRECTION: 55,\r\n};\r\n\r\n/**\r\n * 주어진 ID 값으로 텍스트 코드를 현지화하여 반환합니다.\r\n * @param {Number} idx\r\n */\r\nRS.MessageSystem.getTextCode = function (idx: number) {\r\n    const langCode = RS.MessageSystem.Params.langCode;\r\n\r\n    if (langCode.match(/ko/)) {\r\n        return RS.MessageSystem.TextCodes[\"Korean\"][idx];\r\n    }\r\n    if (langCode.match(/zh/)) {\r\n        return RS.MessageSystem.TextCodes[\"Chinese\"][idx];\r\n    }\r\n    if (langCode.match(/en/)) {\r\n        return RS.MessageSystem.TextCodes[\"English\"][idx];\r\n    }\r\n    if (langCode.match(/ja/)) {\r\n        return RS.MessageSystem.TextCodes[\"Japanese\"][idx];\r\n    }\r\n    return RS.MessageSystem.TextCodes[\"English\"][idx];\r\n};\r\n\r\n/**\r\n * 노트 태그를 읽습니다.\r\n * @memberof RS.MessageSystem\r\n * @param {Number} eventId\r\n * @return {Object} meta\r\n */\r\nRS.MessageSystem.getEventComments = function (eventId: number, index: number) {\r\n    let data = <Record<any, any>>{\r\n        note: \"\",\r\n        meta: {},\r\n    };\r\n    try {\r\n        // 리스트를 가져옵니다.\r\n        let list = $gameMap.event(eventId).list();\r\n\r\n        // 바로 이전 인덱스에 노트 태그가 있었는 지 확인합니다.\r\n        if (index < 0) index = 0;\r\n\r\n        // 부모 이벤트 없이 호출되는 공통 이벤트가 있는 지 확인합니다.\r\n        if (eventId <= 0) {\r\n            var commonEvent = $gameTemp.reservedCommonEvent();\r\n            if (commonEvent) {\r\n                list = commonEvent.list;\r\n                // 공통 이벤트는 한 번 설치된 후 클리어되므로 목록을 두 번 읽을 순 없으므로 예외 처리\r\n                if (!list) {\r\n                    return data;\r\n                }\r\n            }\r\n        }\r\n\r\n        let param = list[index];\r\n\r\n        // 코멘트를 읽어옵니다.\r\n        while (param && [108, 408].contains(param.code)) {\r\n            data.note += param.parameters[0] + \"\\r\\n\";\r\n            index--;\r\n            param = list[index];\r\n        }\r\n\r\n        if (param && param.code === 108) {\r\n            data.note += param.parameters[0] + \"\\r\\n\";\r\n\r\n            index--;\r\n            param = list[index];\r\n\r\n            while (param.code === 408) {\r\n                data.note += param.parameters[0] + \"\\r\\n\";\r\n                index--;\r\n                param = list[index];\r\n            }\r\n\r\n            if (param.code === 108) {\r\n                data.note += param.parameters[0] + \"\\r\\n\";\r\n            }\r\n        }\r\n\r\n        // 노트 태그를 추출합니다 (DataManager.extractMetadata의 변형입니다)\r\n        const re = /<([^<>:]+)(:?)([^>]*)>/g;\r\n        data.meta = {};\r\n        for (;;) {\r\n            const match = re.exec(data.note);\r\n            if (match) {\r\n                if (match[2] === \":\") {\r\n                    data.meta[match[1].trim()] = match[3];\r\n                } else {\r\n                    data.meta[match[1].trim()] = true;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    } catch (e) {\r\n        // 리스트를 읽지 못할 경우 try-catch 문에 의해 예외 처리가 됩니다.\r\n        return {\r\n            note: \"\",\r\n            meta: {},\r\n        };\r\n    }\r\n    return data.meta;\r\n};\r\n\r\n(() => {\r\n    \"use strict\";\r\n    var regData = [\"Korean\", \"English\", \"Chinese\", \"Japanese\"];\r\n    regData.forEach(function (e, i, a) {\r\n        var tcGroup = RS.MessageSystem.TextCodes[e];\r\n        tcGroup = tcGroup.map((e: any, i: number, a: any[]) => {\r\n            if (e === undefined) return;\r\n            var data = [];\r\n            var ret = \"\";\r\n            for (var str of e) {\r\n                if (/[a-zA-Z]/i) {\r\n                    data.push(str);\r\n                    continue;\r\n                }\r\n                var text = str.charCodeAt().toString(16);\r\n                data.push(\"\\\\u\" + \"{\" + text + \"}\");\r\n            }\r\n            ret = data.join(\"\");\r\n            return ret;\r\n        });\r\n        RS.MessageSystem.Reg[e][0] = undefined;\r\n        RS.MessageSystem.Reg[e][1] = new RegExp(\r\n            `(?:\\x1bC|\\x1b${tcGroup[1]})\\\\[(.+?)\\\\]`,\r\n            \"gi\"\r\n        ); // 색\r\n        RS.MessageSystem.Reg[e][2] = new RegExp(\r\n            `\\x1b${tcGroup[2]}\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 속도\r\n        RS.MessageSystem.Reg[e][3] = new RegExp(\r\n            `\\x1b${tcGroup[3]}\\\\[(.+?)\\\\]`,\r\n            \"gi\"\r\n        ); // 테두리색\r\n        RS.MessageSystem.Reg[e][4] = new RegExp(\r\n            `\\x1b${tcGroup[4]}\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 테두리크기\r\n        RS.MessageSystem.Reg[e][5] = new RegExp(\r\n            `\\x1b${tcGroup[5]}\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 들여쓰기\r\n        RS.MessageSystem.Reg[e][6] = new RegExp(`\\x1b${tcGroup[6]}`, \"gi\"); // 굵게!\r\n        RS.MessageSystem.Reg[e][7] = new RegExp(`\\x1b${tcGroup[7]}`, \"gi\"); // 이탤릭!\r\n        RS.MessageSystem.Reg[e][8] = new RegExp(\r\n            `\\x1b${tcGroup[8]}\\\\<(.+?)\\\\>`,\r\n            \"gi\"\r\n        ); // 이름\r\n        RS.MessageSystem.Reg[e][9] = new RegExp(\r\n            `\\x1b${tcGroup[9]}\\\\<(.+)\\\\>`,\r\n            \"gi\"\r\n        ); // 그레디언트\r\n        RS.MessageSystem.Reg[e][10] = new RegExp(\r\n            `(?:\\x1bP|\\x1b${tcGroup[10]})\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 파티원\r\n        RS.MessageSystem.Reg[e][11] = new RegExp(\r\n            `(?:\\x1bN|\\x1b${tcGroup[11]})\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 주인공\r\n        RS.MessageSystem.Reg[e][12] = new RegExp(\r\n            `(?:\\x1bV|\\x1b${tcGroup[12]})\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 변수\r\n        RS.MessageSystem.Reg[e][13] = new RegExp(\r\n            `(?:\\x1bI|\\x1b${tcGroup[13]})\\\\[(\\\\d+)\\\\]`,\r\n            \"g\"\r\n        ); // 아이콘\r\n        RS.MessageSystem.Reg[e][14] = new RegExp(\r\n            `(?:\\x1b{|\\x1b${tcGroup[14]})`,\r\n            \"gi\"\r\n        ); // 확대!\r\n        RS.MessageSystem.Reg[e][15] = new RegExp(\r\n            `(?:\\x1b}|\\x1b${tcGroup[15]})`,\r\n            \"gi\"\r\n        ); // 축소!\r\n        RS.MessageSystem.Reg[e][16] = new RegExp(\r\n            `(?:\\x1bG|\\x1b${tcGroup[16]})`,\r\n            \"gi\"\r\n        ); // 골드\r\n        RS.MessageSystem.Reg[e][17] = new RegExp(\r\n            `\\x1b${tcGroup[17]}\\\\[(.*?)\\\\]`,\r\n            \"gi\"\r\n        ); // 말풍선\r\n        RS.MessageSystem.Reg[e][18] = new RegExp(\r\n            `\\x1b${tcGroup[18]}\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 정렬자\r\n        RS.MessageSystem.Reg[e][19] = new RegExp(\r\n            `\\x1b${tcGroup[19]}\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 숫자\r\n        RS.MessageSystem.Reg[e][20] = new RegExp(\r\n            `\\x1b${tcGroup[20]}\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 크기\r\n        RS.MessageSystem.Reg[e][21] = new RegExp(`\\x1b${tcGroup[21]}`, \"gi\"); // r\r\n        RS.MessageSystem.Reg[e][22] = new RegExp(`\\x1b${tcGroup[22]}`, \"gi\"); // t\r\n        RS.MessageSystem.Reg[e][23] = new RegExp(\r\n            `\\x1b${tcGroup[23]}\\\\<(.+?)\\\\>`,\r\n            \"gi\"\r\n        ); // 효과음\r\n        RS.MessageSystem.Reg[e][24] = new RegExp(\r\n            `\\x1b${tcGroup[24]}\\\\<(.+?)\\\\>`,\r\n            \"gi\"\r\n        ); // 그림 표시\r\n        RS.MessageSystem.Reg[e][25] = new RegExp(\r\n            `\\x1b${tcGroup[25]}\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 그림 제거\r\n        RS.MessageSystem.Reg[e][26] = new RegExp(\r\n            `(?:\\x1b${tcGroup[26]})\\\\[(\\\\d+)\\\\]`,\r\n            \"g\"\r\n        ); // 아이템\r\n        RS.MessageSystem.Reg[e][27] = new RegExp(\r\n            `(?:\\x1b${tcGroup[27]})\\\\[(\\\\d+)\\\\]`,\r\n            \"g\"\r\n        ); // 무기구\r\n        RS.MessageSystem.Reg[e][28] = new RegExp(\r\n            `(?:\\x1b${tcGroup[28]})\\\\[(\\\\d+)\\\\]`,\r\n            \"g\"\r\n        ); // 방어구\r\n        RS.MessageSystem.Reg[e][29] = new RegExp(\r\n            `(?:\\x1b${tcGroup[29]})\\\\[(\\\\d+)\\\\]`,\r\n            \"g\"\r\n        ); // 직업\r\n        RS.MessageSystem.Reg[e][30] = new RegExp(\r\n            `(?:\\x1b${tcGroup[30]})\\\\[(\\\\d+)\\\\]`,\r\n            \"g\"\r\n        ); // 적군\r\n        RS.MessageSystem.Reg[e][31] = new RegExp(\r\n            `(?:\\x1b${tcGroup[31]})\\\\[(\\\\d+)\\\\]`,\r\n            \"g\"\r\n        ); // 상태\r\n        RS.MessageSystem.Reg[e][32] = new RegExp(\r\n            `(?:\\x1b${tcGroup[32]})\\\\[(\\\\d+)\\\\]`,\r\n            \"g\"\r\n        ); // 스킬\r\n        RS.MessageSystem.Reg[e][33] = new RegExp(\r\n            `\\x1b${tcGroup[33]}\\\\<(.*)\\\\>`,\r\n            \"gi\"\r\n        ); // 얼굴\r\n        RS.MessageSystem.Reg[e][34] = new RegExp(\r\n            `(?:\\x1b${tcGroup[34]})\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 아군\r\n        RS.MessageSystem.Reg[e][35] = new RegExp(\r\n            `(?:\\x1b${tcGroup[35]})\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // 적군\r\n\r\n        RS.MessageSystem.Reg[e][36] = new RegExp(`\\x1b${tcGroup[36]}`, \"gi\"); // [.]\r\n        RS.MessageSystem.Reg[e][37] = new RegExp(`\\x1b${tcGroup[37]}`, \"gi\"); // [|]\r\n        RS.MessageSystem.Reg[e][38] = new RegExp(`\\x1b${tcGroup[38]}`, \"gi\"); // [!]\r\n        RS.MessageSystem.Reg[e][39] = new RegExp(`\\x1b${tcGroup[39]}`, \"gi\"); // [<]\r\n        RS.MessageSystem.Reg[e][40] = new RegExp(`\\x1b${tcGroup[40]}`, \"gi\"); // [>]\r\n        RS.MessageSystem.Reg[e][41] = new RegExp(`\\x1b${tcGroup[41]}`, \"gi\"); // [\\^]\r\n\r\n        RS.MessageSystem.Reg[e][42] = new RegExp(`\\x1b${tcGroup[42]}`, \"gi\"); // AS굵게!\r\n        RS.MessageSystem.Reg[e][43] = new RegExp(`\\x1b${tcGroup[43]}`, \"gi\"); // AE굵게!\r\n        RS.MessageSystem.Reg[e][44] = new RegExp(`\\x1b${tcGroup[44]}`, \"gi\"); // AS이탤릭!\r\n        RS.MessageSystem.Reg[e][45] = new RegExp(`\\x1b${tcGroup[45]}`, \"gi\"); // AE이탤릭!\r\n\r\n        RS.MessageSystem.Reg[e][46] = new RegExp(`(?:<${tcGroup[46]}>)`, \"gi\"); // LEFT\r\n        RS.MessageSystem.Reg[e][47] = new RegExp(`(?:<${tcGroup[47]}>)`, \"gi\"); // CENTER\r\n        RS.MessageSystem.Reg[e][48] = new RegExp(`(?:<${tcGroup[48]}>)`, \"gi\"); // RIGHT\r\n\r\n        RS.MessageSystem.Reg[e][49] = new RegExp(\r\n            `(?:<[${tcGroup[49]}]>)`,\r\n            \"gi\"\r\n        ); // B\r\n        RS.MessageSystem.Reg[e][50] = new RegExp(\r\n            `(?:<\\/[${tcGroup[50]}]>)`,\r\n            \"gi\"\r\n        ); // B\r\n        RS.MessageSystem.Reg[e][51] = new RegExp(\r\n            `(?:<[${tcGroup[51]}]>)`,\r\n            \"gi\"\r\n        ); // I\r\n        RS.MessageSystem.Reg[e][52] = new RegExp(\r\n            `(?:<\\/[${tcGroup[52]}]>)`,\r\n            \"gi\"\r\n        ); // I\r\n        RS.MessageSystem.Reg[e][53] = new RegExp(`\\x1b${tcGroup[53]}`, \"gi\"); // AEND : ALIGN_CLEAR\r\n        RS.MessageSystem.Reg[e][54] = new RegExp(\r\n            `\\x1b${tcGroup[54]}\\\\[(.*)\\\\]`,\r\n            \"gi\"\r\n        ); // \\배경색[색상] \\HC[색상]\r\n        RS.MessageSystem.Reg[e][55] = new RegExp(\r\n            `\\x1b${tcGroup[55]}\\\\[(\\\\d+)\\\\]`,\r\n            \"gi\"\r\n        ); // \\FD\r\n    });\r\n})();\r\n\r\nRS.MessageSystem.initSystem = function () {\r\n    var type = RS.MessageSystem.Params.langCode;\r\n    var ret = false;\r\n    if (type.match(/ko/)) {\r\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Korean;\r\n        RS.MessageSystem.Reg.defaultEscapeCode =\r\n            RS.MessageSystem.Reg.KoreanEscapeCode;\r\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Korean;\r\n        ret = true;\r\n    }\r\n    if (type.match(/zh/)) {\r\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Chinese;\r\n        RS.MessageSystem.Reg.defaultEscapeCode =\r\n            RS.MessageSystem.Reg.ChineseEscapeCode;\r\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Chinese;\r\n        ret = true;\r\n    }\r\n    if (type.match(/en/)) {\r\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\r\n        RS.MessageSystem.Reg.defaultEscapeCode =\r\n            RS.MessageSystem.Reg.EnglishEscapeCode;\r\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\r\n        ret = true;\r\n    }\r\n    if (type.match(/ja/)) {\r\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Japanese;\r\n        RS.MessageSystem.Reg.defaultEscapeCode =\r\n            RS.MessageSystem.Reg.JapaneseEscapeCode;\r\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Japanese;\r\n        ret = true;\r\n    }\r\n    if (ret === false) {\r\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\r\n        RS.MessageSystem.Reg.defaultEscapeCode =\r\n            RS.MessageSystem.Reg.EnglishEscapeCode;\r\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\r\n    }\r\n};\r\n\r\n//=============================================================================\r\n// Color\r\n//=============================================================================\r\n\r\ninterface IColor {\r\n    getColor(c: number): string;\r\n    baseColor: string;\r\n    getBaseColor(): string;\r\n    getUserCustomColor(str: string): string;\r\n    gmColor(str: string): string;\r\n}\r\n\r\nexport const Color = <IColor>{};\r\n\r\nColor.getColor = function (n: number) {\r\n    var r = n & 255;\r\n    var g = (n >> 8) & 255;\r\n    var b = (n >> 16) & 255;\r\n    var result = `rgba(${r},${g},${b},1)`;\r\n    return result;\r\n};\r\n\r\nColor.baseColor = Color.getColor(16777215);\r\n\r\nColor.getBaseColor = function () {\r\n    return Color.baseColor;\r\n};\r\n\r\nColor.getUserCustomColor = function (str) {\r\n    \"use strict\";\r\n\r\n    var obj: any[] = RS.MessageSystem.Params.exTextColors;\r\n    var ret = str;\r\n\r\n    if (!(typeof obj[0] === \"object\")) return ret;\r\n    if (!obj[0].hasOwnProperty(\"Color Name\")) return ret;\r\n\r\n    obj.forEach((e: any, i: number, arr: any[]) => {\r\n        if (e[\"Color Name\"] === str) {\r\n            var r = parseInt(e[\"Red\"]) || 0;\r\n            var g = parseInt(e[\"Green\"]) || 0;\r\n            var b = parseInt(e[\"Blue\"]) || 0;\r\n            var a = parseFloat(e[\"Alpha\"]) || 1.0;\r\n\r\n            ret = `rgba(${r},${g},${b},${a})`;\r\n        }\r\n    });\r\n\r\n    return ret;\r\n};\r\n\r\nconst KOREAN_COLORS: Record<string, string> = {\r\n    청록: \"rgba(0,255,255,1)\",\r\n    청록색: \"rgba(0,255,255,1)\",\r\n    c_aqua: \"rgba(0,255,255,1)\",\r\n    검은색: \"rgba(0,0,0,1)\",\r\n    검정: \"rgba(0,0,0,1)\",\r\n    c_black: \"rgba(0,0,0,1)\",\r\n    파란색: \"rgba(0,0,255,1)\",\r\n    파랑: \"rgba(0,0,255,1)\",\r\n    c_blue: \"rgba(0,0,255,1)\",\r\n    짙은회색: \"rgba(64,64,64,1)\",\r\n    c_dkgray: \"rgba(64,64,64,1)\",\r\n    자홍색: \"rgba(255,0,255,1)\",\r\n    자홍: \"rgba(255,0,255,1)\",\r\n    c_fuchsia: \"rgba(255,0,255,1)\",\r\n    회색: \"rgba(128,128,128,1)\",\r\n    c_gray: \"rgba(128,128,128,1)\",\r\n    녹색: \"rgba(0,128,0,1)\",\r\n    c_green: \"rgba(0,128,0,1)\",\r\n    밝은녹색: \"rgba(0,255,0,1)\",\r\n    라임: \"rgba(0,255,0,1)\",\r\n    c_lime: \"rgba(0,255,0,1)\",\r\n    밝은회색: \"rgba(192,192,192,1)\",\r\n    c_ltgray: \"rgba(192,192,192,1)\",\r\n    밤색: \"rgba(128,0,0,1)\",\r\n    마룬: \"rgba(128,0,0,1)\",\r\n    c_maroon: \"rgba(128,0,0,1)\",\r\n    감청색: \"rgba(0,0,128,1)\",\r\n    네이비: \"rgba(0,0,128,1)\",\r\n    c_navy: \"rgba(0,0,128,1)\",\r\n    황록색: \"rgba(128,128,0,1)\",\r\n    올리브: \"rgba(128,128,0,1)\",\r\n    c_olive: \"rgba(128,128,0,1)\",\r\n    주황색: \"rgba(255,160,64,1)\",\r\n    주황: \"rgba(255,160,64,1)\",\r\n    오렌지: \"rgba(255,160,64,1)\",\r\n    c_orange: \"rgba(255,160,64,1)\",\r\n    보라색: \"rgba(128,0,128,1)\",\r\n    보라: \"rgba(128,0,128,1)\",\r\n    c_purple: \"rgba(128,0,128,1)\",\r\n    빨간색: \"rgba(255,0,0,1)\",\r\n    빨강: \"rgba(255,0,0,1)\",\r\n    c_red: \"rgba(255,0,0,1)\",\r\n    은색: \"rgba(192,192,192,1)\",\r\n    은: \"rgba(192,192,192,1)\",\r\n    c_silver: \"rgba(192,192,192,1)\",\r\n    민트색: \"rgba(0,128,128,1)\",\r\n    c_teal: \"rgba(0,128,128,1)\",\r\n    흰색: \"rgba(255,255,255,1)\",\r\n    흰: \"rgba(255,255,255,1)\",\r\n    c_white: \"rgba(255,255,255,1)\",\r\n    노란색: \"rgba(255,255,0,1)\",\r\n    노랑: \"rgba(255,255,0,1)\",\r\n    c_yellow: \"rgba(255,255,0,1)\",\r\n};\r\n\r\nconst CHINESE_COLOR: Record<string, string> = {\r\n    水色: \"rgba(0,255,255,1)\",\r\n    c_aqua: \"rgba(0,255,255,1)\",\r\n    黑色: \"rgba(0,0,0,1)\",\r\n    c_black: \"rgba(0,0,0,1)\",\r\n    蓝色: \"rgba(0,0,255,1)\",\r\n    c_blue: \"rgba(0,0,255,1)\",\r\n    深灰色: \"rgba(64,64,64,1)\",\r\n    c_dkgray: \"rgba(64,64,64,1)\",\r\n    紫红色: \"rgba(255,0,255,1)\",\r\n    c_fuchsia: \"rgba(255,0,255,1)\",\r\n    灰色: \"rgba(128,128,128,1)\",\r\n    c_gray: \"rgba(128,128,128,1)\",\r\n    绿色: \"rgba(0,128,0,1)\",\r\n    c_green: \"rgba(0,128,0,1)\",\r\n    浅绿色: \"rgba(0,255,0,1)\",\r\n    c_lime: \"rgba(0,255,0,1)\",\r\n    浅灰色: \"rgba(192,192,192,1)\",\r\n    c_ltgray: \"rgba(192,192,192,1)\",\r\n    栗色: \"rgba(128,0,0,1)\",\r\n    c_maroon: \"rgba(128,0,0,1)\",\r\n    绀青色: \"rgba(0,0,128,1)\",\r\n    c_navy: \"rgba(0,0,128,1)\",\r\n    黄绿色: \"rgba(128,128,0,1)\",\r\n    c_olive: \"rgba(128,128,0,1)\",\r\n    橙黄色: \"rgba(255,160,64,1)\",\r\n    c_orange: \"rgba(255,160,64,1)\",\r\n    紫色: \"rgba(128,0,128,1)\",\r\n    c_purple: \"rgba(128,0,128,1)\",\r\n    红色: \"rgba(255,0,0,1)\",\r\n    c_red: \"rgba(255,0,0,1)\",\r\n    银白色: \"rgba(192,192,192,1)\",\r\n    c_silver: \"rgba(192,192,192,1)\",\r\n    水鸭色: \"rgba(0,128,128,1)\",\r\n    c_teal: \"rgba(0,128,128,1)\",\r\n    白色: \"rgba(255,255,255,1)\",\r\n    c_white: \"rgba(255,255,255,1)\",\r\n    黄色: \"rgba(255,255,0,1)\",\r\n    c_yellow: \"rgba(255,255,0,1)\",\r\n};\r\n\r\nconst ENGLISH_COLOR: Record<string, string> = {\r\n    AQUA: \"rgba(0,255,255,1)\",\r\n    c_aqua: \"rgba(0,255,255,1)\",\r\n    BLACK: \"rgba(0,0,0,1)\",\r\n    c_black: \"rgba(0,0,0,1)\",\r\n    BLUE: \"rgba(0,0,255,1)\",\r\n    c_blue: \"rgba(0,0,255,1)\",\r\n    DKGRAY: \"rgba(64,64,64,1)\",\r\n    c_dkgray: \"rgba(64,64,64,1)\",\r\n    FUCHSIA: \"rgba(255,0,255,1)\",\r\n    c_fuchsia: \"rgba(255,0,255,1)\",\r\n    GRAY: \"rgba(128,128,128,1)\",\r\n    c_gray: \"rgba(128,128,128,1)\",\r\n    GREEN: \"rgba(0,128,0,1)\",\r\n    c_green: \"rgba(0,128,0,1)\",\r\n    LIME: \"rgba(0,255,0,1)\",\r\n    c_lime: \"rgba(0,255,0,1)\",\r\n    LTGRAY: \"rgba(192,192,192,1)\",\r\n    c_ltgray: \"rgba(192,192,192,1)\",\r\n    MAROON: \"rgba(128,0,0,1)\",\r\n    c_maroon: \"rgba(128,0,0,1)\",\r\n    NAVY: \"rgba(0,0,128,1)\",\r\n    c_navy: \"rgba(0,0,128,1)\",\r\n    OLIVE: \"rgba(128,128,0,1)\",\r\n    c_olive: \"rgba(128,128,0,1)\",\r\n    ORANGE: \"rgba(255,160,64,1)\",\r\n    c_orange: \"rgba(255,160,64,1)\",\r\n    PURPLE: \"rgba(128,0,128,1)\",\r\n    c_purple: \"rgba(128,0,128,1)\",\r\n    RED: \"rgba(255,0,0,1)\",\r\n    c_red: \"rgba(255,0,0,1)\",\r\n    SILVER: \"rgba(192,192,192,1)\",\r\n    c_silver: \"rgba(192,192,192,1)\",\r\n    TEAL: \"rgba(0,128,128,1)\",\r\n    c_teal: \"rgba(0,128,128,1)\",\r\n    WHITE: \"rgba(255,255,255,1)\",\r\n    c_white: \"rgba(255,255,255,1)\",\r\n    YELLOW: \"rgba(255,255,0,1)\",\r\n    c_yellow: \"rgba(255,255,0,1)\",\r\n};\r\n\r\nconst JAPANESE_COLOR: Record<string, string> = {\r\n    水色: \"rgba(0,255,255,1)\",\r\n    アクア色: \"rgba(0,255,255,1)\",\r\n    c_aqua: \"rgba(0,255,255,1)\",\r\n    黑色: \"rgba(0,0,0,1)\",\r\n    c_black: \"rgba(0,0,0,1)\",\r\n    靑色: \"rgba(0,0,255,1)\",\r\n    c_blue: \"rgba(0,0,255,1)\",\r\n    ふか灰色: \"rgba(64,64,64,1)\",\r\n    c_dkgray: \"rgba(64,64,64,1)\",\r\n    紫紅色: \"rgba(255,0,255,1)\",\r\n    c_fuchsia: \"rgba(255,0,255,1)\",\r\n    灰色: \"rgba(128,128,128,1)\",\r\n    c_gray: \"rgba(128,128,128,1)\",\r\n    綠色: \"rgba(0,128,0,1)\",\r\n    c_green: \"rgba(0,128,0,1)\",\r\n    黃綠: \"rgba(0,255,0,1)\",\r\n    c_lime: \"rgba(0,255,0,1)\",\r\n    鼠色: \"rgba(192,192,192,1)\",\r\n    c_ltgray: \"rgba(192,192,192,1)\",\r\n    \"―色\": \"rgba(128,0,0,1)\",\r\n    c_maroon: \"rgba(128,0,0,1)\",\r\n    群青色: \"rgba(0,0,128,1)\",\r\n    ネイビー: \"rgba(0,0,128,1)\",\r\n    c_navy: \"rgba(0,0,128,1)\",\r\n    黃綠色: \"rgba(128,128,0,1)\",\r\n    オリーブ色: \"rgba(128,128,0,1)\",\r\n    c_olive: \"rgba(128,128,0,1)\",\r\n    橙色: \"rgba(255,160,64,1)\",\r\n    オレンジ色: \"rgba(255,160,64,1)\",\r\n    c_orange: \"rgba(255,160,64,1)\",\r\n    紫色: \"rgba(128,0,128,1)\",\r\n    c_purple: \"rgba(128,0,128,1)\",\r\n    赤色: \"rgba(255,0,0,1)\",\r\n    レッド: \"rgba(255,0,0,1)\",\r\n    c_red: \"rgba(255,0,0,1)\",\r\n    銀色: \"rgba(192,192,192,1)\",\r\n    c_silver: \"rgba(192,192,192,1)\",\r\n    ミント色: \"rgba(0,128,128,1)\",\r\n    薄荷色: \"rgba(0,128,128,1)\",\r\n    c_teal: \"rgba(0,128,128,1)\",\r\n    白色: \"rgba(255,255,255,1)\",\r\n    c_white: \"rgba(255,255,255,1)\",\r\n    黃色: \"rgba(255,255,0,1)\",\r\n    c_yellow: \"rgba(255,255,0,1)\",\r\n};\r\n\r\nRS.MessageSystem.getKoreanColor = function (str: string) {\r\n    let color = KOREAN_COLORS[str];\r\n\r\n    if (color) {\r\n        return color;\r\n    }\r\n\r\n    if ([\"기본\", \"기본색\", \"c_normal\"].contains(str)) {\r\n        return Color.getBaseColor();\r\n    }\r\n\r\n    return Color.getUserCustomColor(str);\r\n};\r\n\r\nRS.MessageSystem.getChineseColor = function (str: string) {\r\n    let color = CHINESE_COLOR[str];\r\n\r\n    if (color) {\r\n        return color;\r\n    }\r\n\r\n    if ([\"通常\", \"c_normal\"].contains(str)) {\r\n        return Color.getBaseColor();\r\n    }\r\n\r\n    return Color.getUserCustomColor(str);\r\n};\r\n\r\nRS.MessageSystem.getEnglishColor = function (str: string) {\r\n    let color = ENGLISH_COLOR[str];\r\n\r\n    if (color) {\r\n        return color;\r\n    }\r\n\r\n    if (\"c_normal\" === str) {\r\n        return Color.getBaseColor();\r\n    }\r\n\r\n    return Color.getUserCustomColor(str);\r\n};\r\n\r\nRS.MessageSystem.getJapaneseColor = function (str: string) {\r\n    let color = JAPANESE_COLOR[str];\r\n\r\n    if (color) {\r\n        return color;\r\n    }\r\n\r\n    if ([\"基本色\", \"c_normal\"].contains(str)) {\r\n        return Color.getBaseColor();\r\n    }\r\n\r\n    return Color.getUserCustomColor(str);\r\n};\r\n\r\nRS.MessageSystem.getBrowser = function () {\r\n    /* Refer to https://stackoverflow.com/a/16938481 */\r\n    var ua = navigator.userAgent,\r\n        tem,\r\n        M =\r\n            ua.match(\r\n                /(opera|chrome|edge|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i\r\n            ) || [];\r\n\r\n    if (/trident/i.test(M[1])) {\r\n        tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\r\n\r\n        return {\r\n            name: \"IE\",\r\n            version: tem[1] || \"\",\r\n        };\r\n    }\r\n\r\n    if (M[1] === \"Chrome\") {\r\n        tem = ua.match(/\\bOPR\\/(\\d+)/);\r\n        if (tem != null) {\r\n            return {\r\n                name: \"Opera\",\r\n                version: tem[1],\r\n            };\r\n        }\r\n\r\n        tem = ua.match(/\\bEdge\\/(\\d+)/);\r\n        if (tem != null) {\r\n            return {\r\n                name: \"Edge\",\r\n                version: tem[1],\r\n            };\r\n        }\r\n    }\r\n\r\n    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \"-?\"];\r\n\r\n    if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {\r\n        M.splice(1, 1, tem[1]);\r\n    }\r\n\r\n    return {\r\n        name: M[0],\r\n        version: M[1],\r\n    };\r\n};\r\n\r\nColor.gmColor = function (str: string) {\r\n    const type = <string>RS.MessageSystem.Params.langCode;\r\n    if (type.match(/ko/)) {\r\n        return RS.MessageSystem.getKoreanColor(str);\r\n    }\r\n    if (type.match(/zh/)) {\r\n        return RS.MessageSystem.getChineseColor(str);\r\n    }\r\n    if (type.match(/en/)) {\r\n        return RS.MessageSystem.getEnglishColor(str);\r\n    }\r\n    if (type.match(/ja/)) {\r\n        return RS.MessageSystem.getJapaneseColor(str);\r\n    }\r\n    return RS.MessageSystem.getEnglishColor(str);\r\n};\r\n\r\nwindow.RS = RS;\r\n","import { Rectangle } from \"pixi.js\";\r\nimport { BalloonWindowTransformComponent } from \"./BalloonWindowTransformComponent\";\r\nimport { BaseComponent } from \"./BaseComponent\";\r\nimport { Component } from \"./Component\";\r\nimport { NameWindowPositionComponent } from \"./NameWindowPositionComponent\";\r\n\r\ntype BaseComponentName =\r\n  | \"NameWindowPositionComponent\"\r\n  | \"BalloonWindowTransformComponent\";\r\n\r\ninterface Class<T> {\r\n  new (...args: any[]): T;\r\n}\r\n\r\n/**\r\n *\r\n */\r\n// type InjectFunctionWithInfer = <\r\n//     R = InstanceType<new (rect: Rectangle) => Window_Message>\r\n// >(\r\n//     messageWindow: R\r\n// ) => InstanceType<new (messageWindow: R) => Component>;\r\ntype InjectFunctionWithInfer = <\r\n  R = InstanceType<new (rect: Rectangle) => Window_Message>\r\n>(\r\n  messageWindow: R\r\n) => BaseComponent;\r\n\r\n/**\r\n * @function getComponentValue\r\n * @param item\r\n * @param key\r\n * @returns\r\n */\r\nfunction getComponentValue<T, K extends keyof T>(item: T, key: K): T[K] {\r\n  return item[key];\r\n}\r\n\r\n/**\r\n * @static\r\n * @class DependencyInjector\r\n * @description\r\n * This class allows you to inject components that needs to execute a method that has a certain dependency in the RPG Maker MZ.\r\n * 또한 해당 컴포넌트를 안전한 샌드박스 환경에서 실행시키기 위해 사용됩니다.\r\n * 샌드박스 환경이라함은 MZ에서도 오류 없이 안전하게 동작한다는 것을 의미합니다.\r\n */\r\nexport class DependencyInjector {\r\n  public static COMPONENTS?: [\r\n    BalloonWindowTransformComponent,\r\n    NameWindowPositionComponent\r\n  ];\r\n\r\n  public static _components: { [key: string]: Component } = {};\r\n  private static _isDirty: Boolean = false;\r\n\r\n  private static _messageWindow?: Window_Message | undefined;\r\n\r\n  public static injectMessageWindow(messageWindow: Window_Message) {\r\n    // 주입할 메시지 윈도우 클래스의 인스턴스를 가져옵니다.\r\n    DependencyInjector._messageWindow = messageWindow;\r\n    DependencyInjector.inject(messageWindow);\r\n  }\r\n\r\n  public static ejectMessageWindow() {\r\n    if (DependencyInjector._isDirty) {\r\n      DependencyInjector._messageWindow = undefined;\r\n      DependencyInjector.COMPONENTS = undefined;\r\n      DependencyInjector._isDirty = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * inject all components inside the sandbox environment.\r\n   *\r\n   * @param messageWindow Specify the message window.\r\n   * @returns void\r\n   */\r\n  private static inject(messageWindow: Window_Message): void {\r\n    if (DependencyInjector._isDirty) {\r\n      console.log(\"components are already injected\");\r\n      return;\r\n    }\r\n\r\n    // 컴포넌트에 메시지 윈도우를 주입합니다.\r\n    DependencyInjector.COMPONENTS = [\r\n      new BalloonWindowTransformComponent({ messageWindow }),\r\n      new NameWindowPositionComponent({ messageWindow }),\r\n    ];\r\n\r\n    DependencyInjector._isDirty = true;\r\n  }\r\n\r\n  /**\r\n   * get the component by name.\r\n   *\r\n   * @param name Specify the component name\r\n   * @returns Component\r\n   */\r\n  public static getComponent<R extends BaseComponentName>(\r\n    name: R\r\n  ): BalloonWindowTransformComponent | NameWindowPositionComponent | undefined {\r\n    const items = DependencyInjector.COMPONENTS!.filter((e) => {\r\n      return e instanceof DependencyInjector.getComponentClass(name);\r\n    });\r\n\r\n    return items.pop();\r\n  }\r\n\r\n  static getComponentClass(name: BaseComponentName): typeof BaseComponent {\r\n    switch (name) {\r\n      case \"BalloonWindowTransformComponent\":\r\n        return BalloonWindowTransformComponent;\r\n      case \"NameWindowPositionComponent\":\r\n        return NameWindowPositionComponent;\r\n      default:\r\n        return BaseComponent;\r\n    }\r\n  }\r\n\r\n  public static ready() {\r\n    if (DependencyInjector.COMPONENTS) {\r\n      DependencyInjector.COMPONENTS.forEach((component) => {\r\n        component.ready();\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { BaseComponent } from \"./BaseComponent\";\r\nimport { ComponentProp } from \"./Component\";\r\n\r\nexport type BalloonRectData = {\r\n    /**\r\n     *\r\n     */\r\n    mx: number;\r\n    /**\r\n     *\r\n     */\r\n    my: number;\r\n    /**\r\n     *\r\n     */\r\n    tx: number;\r\n    /**\r\n     *\r\n     */\r\n    ty: number;\r\n    /**\r\n     *\r\n     */\r\n    tileHeight: number;\r\n    /**\r\n     * Sets or gets `dx` that means the destination x coordinate.\r\n     */\r\n    dx: number;\r\n    /**\r\n     * Sets or gets `dy` that means the destination y coordinate.\r\n     */\r\n    dy: number;\r\n    /**\r\n     * Gets or sets the value related for the name window.\r\n     */\r\n    ny: number;\r\n    /**\r\n     *\r\n     */\r\n    scaleY: number;\r\n    /**\r\n     * Gets or sets the padding value (like value named `padding-bottom`)\r\n     * `screenX`와 `screenY`는 `right-bottom`에 위치하므로 `height` 만큼 빼야 합니다.\r\n     */\r\n    padY: number;\r\n};\r\n\r\n/**\r\n * @class BalloonWindowTransformComponent\r\n * @description\r\n * 말풍선 윈도우의 위치를 조정하기 위한 컴포넌트입니다.\r\n */\r\nexport class BalloonWindowTransformComponent extends BaseComponent {\r\n    private _bWidth: number = 0;\r\n    private _bHeight: number = 0;\r\n    public transform!: PIXI.Transform;\r\n\r\n    onReady(props: ComponentProp) {\r\n        super.onReady(props);\r\n        this._bWidth = this.width;\r\n        this._bHeight = this.height;\r\n    }\r\n\r\n    /**\r\n     * 말풍선 영역의 크기를 계산합니다.\r\n     *\r\n     * @param {String} text\r\n     * @returns {Number}\r\n     */\r\n    calcBalloonRect(text: string) {\r\n        // {\r\n        //     let temp: string,\r\n        //         baseWidth: number,\r\n        //         tempText: string[],\r\n        //         height: number,\r\n        //         min: number,\r\n        //         pad: number,\r\n        //         numOfLines: number;\r\n        //     // drawTextEx를 사용하기 전에 현재 상태를 저장한다.\r\n        //     this.save();\r\n\r\n        //     temp = text;\r\n\r\n        //     // 라인 갯수를 구하기 위해 텍스트를 줄바꿈 문자를 기준으로 나눈다.\r\n        //     const copyText = text.slice(0);\r\n        //     tempText = copyText.split(/[\\r\\n]+/);\r\n        //     numOfLines = tempText.length;\r\n\r\n        //     pad = this.standardPadding() * 2;\r\n\r\n        //     // 높이를 구한다.\r\n        //     height = 0;\r\n        //     tempText.forEach((i) => (height += this.calcBalloonRectHeight(i)));\r\n\r\n        //     if (height <= 0) {\r\n        //         // 높이를 구할 수 없었다면,\r\n        //         height = this.fittingHeight(numOfLines);\r\n        //     } else {\r\n        //         // 높이를 구했다면\r\n        //         height = height + pad;\r\n        //     }\r\n\r\n        //     const textPadding = this.textPadding();\r\n\r\n        //     // 폭을 계산한다.\r\n        //     let pw = 0;\r\n        //     for (var i = 0; i < numOfLines; i++) {\r\n        //         this._isUsedTextWidthEx = true;\r\n        //         const x = this.drawTextEx(tempText[i]);\r\n        //         this._isUsedTextWidthEx = false;\r\n        //         if (x >= pw) {\r\n        //             pw = x;\r\n        //         }\r\n        //     }\r\n\r\n        //     baseWidth = pw;\r\n        //     this._bWidth =\r\n        //         baseWidth + pad + textPadding || RS.MessageSystem.Params.WIDTH;\r\n\r\n        //     // 얼굴 이미지가 설정되어있다면 ?\r\n        //     if ($gameMessage.faceName() !== \"\") {\r\n        //         // 최소 높이를 설정한다.\r\n        //         min = this.fittingHeight(4);\r\n        //         // 기존 폭 값에 얼굴 이미지의 폭을 더한다.\r\n        //         this._bWidth += this.newLineX() + pad;\r\n        //         if (RS.MessageSystem.Params.faceDirection === 2) {\r\n        //             this._bWidth += ImageManager.faceWidth;\r\n        //         }\r\n        //         // 높이 값이 최소 높이보다 작으면, 최소 높이 값으로 설정한다.\r\n        //         if (height < min)\r\n        //             height = height.clamp(min, height + (min - height));\r\n        //     }\r\n\r\n        //     const type = RS.MessageSystem.Params.choiceWindowStyle;\r\n\r\n        //     // 선택지가 있고, XP 스타일로 설정했을 때\r\n        //     if (type === \"RMXP\" && $gameMessage.isChoice()) {\r\n        //         const maxLines = tempText.length;\r\n        //         const maxChoices = $gameMessage.choices().length;\r\n        //         const lineHeight = this.lineHeight();\r\n        //         // 선택지 갯수를 확장했을 수도 있지만, 4개로 가정한다.\r\n        //         height = height + maxChoices * lineHeight;\r\n        //         // 선택지 윈도우의 폭이 말풍선보다 크면 제한을 둔다.\r\n        //         if (this._choiceWindow.windowWidth() > this._bWidth) {\r\n        //             this._bWidth = this._choiceWindow.windowWidth();\r\n        //         }\r\n        //     }\r\n\r\n        //     this.restore();\r\n        // }\r\n        this.save();\r\n\r\n        {\r\n            // TODO: 얼굴 이미지 설정 체크\r\n            // TODO: 인라인 선택지 모드인지 체크\r\n\r\n            const rect = this.textSizeEx(text);\r\n            const padding = this.standardPadding();\r\n            this._bWidth = rect.width + padding * 2;\r\n            this._bHeight = Math.max(\r\n                rect.height + padding * 2,\r\n                this.fittingHeight(1)\r\n            );\r\n            // this.drawTextEx() 사용하기 이전 상태로 복구한다.\r\n        }\r\n        this.restore();\r\n    }\r\n\r\n    textSizeEx(text: string): TextSizeRect {\r\n        this.messageWindow._isUsedTextWidthEx = true;\r\n        const rect = this.messageWindow.textSizeEx(text);\r\n        this.messageWindow._isUsedTextWidthEx = false;\r\n\r\n        return rect;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    updatePlacement() {\r\n        this.messageWindow.updatePlacement();\r\n    }\r\n\r\n    isActiveInBalloon() {\r\n        const isInValidBalloon = $gameMessage.getBalloon() === -2;\r\n        if (isInValidBalloon) {\r\n            this.updatePlacement();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    setBalloonRect(data: BalloonRectData) {\r\n        const faceName = $gameMessage.faceName();\r\n        const faceDirection = RS.MessageSystem.Params.faceDirection;\r\n\r\n        const ox = RS.MessageSystem.Params.windowOffset.x;\r\n        const oy = RS.MessageSystem.Params.windowOffset.y;\r\n        this.x = data.dx + ox;\r\n        this.y = data.dy + oy;\r\n        this.width = this._bWidth;\r\n        this.height = this._bHeight;\r\n\r\n        if (faceName && faceDirection === 2) {\r\n            this.drawMessageFace();\r\n        }\r\n    }\r\n\r\n    setBalloonPlacement(data: BalloonRectData): BalloonRectData | void {\r\n        const gw = Graphics.width;\r\n        const gh = Graphics.height;\r\n        const bw = Graphics.boxWidth;\r\n        const bh = Graphics.boxHeight;\r\n\r\n        console.log(\"setBalloonPlacement() + \" + JSON.stringify(data));\r\n        // 화면 좌측\r\n        if (!data) return;\r\n        if (data.mx - this._bWidth / 2 < 0) {\r\n            data.dx = 0;\r\n            data.tx = this.canvasToLocalX(data.mx);\r\n        }\r\n\r\n        // 화면 우측\r\n        if (data.mx - this._bWidth / 2 > bw - this._bWidth) {\r\n            data.dx = bw - this._bWidth;\r\n            data.tx = this.canvasToLocalX(data.mx);\r\n        }\r\n\r\n        // 화면 상단\r\n        if (data.my - this._bHeight - data.tileHeight / 2 < 0) {\r\n            data.dy = data.my + data.tileHeight / 2;\r\n            data.scaleY = -1;\r\n            data.ty = this._height * data.scaleY + this._height;\r\n            data.ny =\r\n                this.y + this._bHeight + RS.MessageSystem.Params.nameWindowY;\r\n        }\r\n\r\n        // 화면 하단\r\n        if (data.my - this._bHeight > bh - this._bHeight) {\r\n            data.dy = bh - this._bHeight;\r\n            data.ty = this._height;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Updates position of the pause sprite and the name window.\r\n     *\r\n     * @param data\r\n     */\r\n    updateSubBalloonElements(data: BalloonRectData) {\r\n        const _pauseSignSprite = this.messageWindow._pauseSignSprite;\r\n        if (_pauseSignSprite) {\r\n            _pauseSignSprite.move(data.tx, data.ty);\r\n            _pauseSignSprite.scale.y = data.scaleY;\r\n        }\r\n        this._nameWindow.y = data.ny;\r\n    }\r\n\r\n    getNameWindowY(): number {\r\n        const ny =\r\n            this.y -\r\n            this._nameWindow.height -\r\n            RS.MessageSystem.Params.nameWindowY;\r\n\r\n        return ny ? ny : 0;\r\n    }\r\n\r\n    // canvasToLocalX(x: number) {\r\n    //     let node: any = this.messageWindow;\r\n    //     while (node) {\r\n    //         x -= node.x;\r\n    //         node = <Sprite>node.parent;\r\n    //     }\r\n    //     return x;\r\n    // }\r\n\r\n    // canvasToLocalY(y: number) {\r\n    //     let node: any = this.messageWindow;\r\n    //     while (node) {\r\n    //         y -= node.y;\r\n    //         node = node.parent;\r\n    //     }\r\n    //     return y;\r\n    // }\r\n\r\n    updateBalloonPosition(): never | void {\r\n        console.log(\r\n            \"============ DEBUG updateBalloonPosition() ====================\"\r\n        );\r\n\r\n        let data = <BalloonRectData>{};\r\n\r\n        if (!this.isActiveInBalloon()) return;\r\n\r\n        // 말풍선 소유자의 화면 좌표\r\n        const owner = <Game_Character>$gameMap.getMsgOwner();\r\n\r\n        if (!owner) {\r\n            console.warn($gameMap.getMsgOwner());\r\n            throw new Error(\"말풍선 소유자가 없습니다.\");\r\n        }\r\n\r\n        data.mx = owner.screenX();\r\n        data.my = owner.screenY();\r\n\r\n        console.log(\"%d %d\", data.mx, data.my);\r\n\r\n        data.tx = this._bWidth / 2;\r\n        data.ty = this._bHeight;\r\n        data.scaleY = 1;\r\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\r\n        data.dx = data.mx - this._bWidth / 2;\r\n        data.dy = data.my - this._bHeight - data.tileHeight;\r\n        data.ny = this.getNameWindowY();\r\n\r\n        console.log(JSON.stringify(data));\r\n\r\n        data = <BalloonRectData>this.setBalloonPlacement(data);\r\n\r\n        if (\r\n            data.dx + RS.MessageSystem.Params.windowOffset.x !== this.x ||\r\n            data.dy + RS.MessageSystem.Params.windowOffset.y !== this.y ||\r\n            this._bWidth !== this.width ||\r\n            this._bHeight !== this.height\r\n        ) {\r\n            // 말풍선 위치 및 크기 설정\r\n            this.setBalloonRect(data);\r\n\r\n            // 멈춤 표시 스프라이트 위치 조정\r\n            this.updateSubBalloonElements(data);\r\n        }\r\n    }\r\n\r\n    updateBalloonPositionInBattle() {\r\n        if (!$gameParty.inBattle()) {\r\n            // 전투 씬인지 확인\r\n            console.warn(\"전투가 아닙니다\");\r\n            return;\r\n        }\r\n        if (!$gameSystem.isSideView()) {\r\n            // 사이드뷰 전투인지 확인\r\n            console.warn(\"사이드뷰 전투가 아닙니다.\");\r\n            return;\r\n        }\r\n\r\n        let data = <BalloonRectData>{};\r\n\r\n        // 타겟의 화면 좌표 설정\r\n        let owner = $gameMap.getMsgOwner();\r\n        if (!owner) {\r\n            console.warn(\"owner 변수가 없습니다\");\r\n            return;\r\n        }\r\n        if (!owner.hasOwnProperty(\"type\")) {\r\n            console.warn(\"type 속성이 없습니다 : \" + owner);\r\n            return;\r\n        }\r\n        if (!owner.hasOwnProperty(\"id\")) {\r\n            console.warn(\"id 속성이 없습니다 : \" + owner);\r\n            return;\r\n        }\r\n\r\n        // 현재 씬이 전투 씬이 아닌 경우를 확인한다.\r\n        let scene = SceneManager._scene;\r\n        if (!(scene instanceof Scene_Battle)) {\r\n            console.warn(\"전투 장면이 아닙니다\");\r\n            return false;\r\n        }\r\n\r\n        let parent;\r\n\r\n        // 액터인가?\r\n        if (owner.type === \"actor\") {\r\n            parent = scene._spriteset._actorSprites; // 액터 스프라이트 군을 반환\r\n        } else {\r\n            parent = scene._spriteset._enemySprites; // 적 스프라이트 군을 반환\r\n        }\r\n\r\n        // 타겟 스프라이트를 id 값으로 찾는다.\r\n        let tempBattlers = [];\r\n        tempBattlers = parent;\r\n        let target = tempBattlers[owner.id];\r\n        if (!target) {\r\n            console.warn(\"타겟이 없습니다\");\r\n            return;\r\n        }\r\n\r\n        // 이미 죽어있다면 메시지를 일반 메시지로 표시한다.\r\n        if (\r\n            (owner.type === \"actor\" &&\r\n                !(<Sprite_Actor>target)._actor.isAlive()) ||\r\n            (owner.type === \"enemy\" && !(<Sprite_Enemy>target)._enemy.isAlive())\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        data.mx = target.x;\r\n        data.my = target.y;\r\n\r\n        data.padY =\r\n            owner.type === \"actor\"\r\n                ? (target as Sprite_Actor)._mainSprite.bitmap.height / 6\r\n                : target.bitmap.height;\r\n\r\n        data.tx = this._width / 2;\r\n        data.ty = this._height;\r\n\r\n        data.scaleY = 1;\r\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\r\n\r\n        data.dx = data.mx - this._bWidth / 2;\r\n        data.dy = data.my - this._bHeight - data.tileHeight - data.padY;\r\n\r\n        data.ny =\r\n            this.y -\r\n            this._nameWindow.height -\r\n            RS.MessageSystem.Params.nameWindowY;\r\n\r\n        data = <BalloonRectData>this.setBalloonPlacement(data);\r\n\r\n        // 말풍선 위치 및 크기 설정\r\n        this.setBalloonRect(data);\r\n\r\n        // 멈춤 표시 스프라이트 위치 조정\r\n        this.updateSubBalloonElements(data);\r\n\r\n        if (this.transform) this.updateTransform();\r\n    }\r\n\r\n    updateTransform(): void {\r\n        this.messageWindow.updateTransform();\r\n    }\r\n\r\n    calcBalloonRectHeight(text: string) {\r\n        // 상태 저장\r\n        this.save();\r\n\r\n        const messageWindow = this.messageWindow;\r\n        const tempFontSize = this.contents.fontSize;\r\n\r\n        const textState = messageWindow.createTextState(text, 0, 0, 0);\r\n        textState.text = messageWindow.convertEscapeCharacters(text);\r\n        textState.height = messageWindow.calcTextHeight(textState, false);\r\n\r\n        // 상태 복구\r\n        this.restore();\r\n\r\n        messageWindow.setTextSize(tempFontSize);\r\n        return textState.height;\r\n    }\r\n}\r\n","import { EventEmitter } from \"./EventEmitter\";\r\n\r\nexport type ComponentProp = {\r\n  messageWindow: Window_Message;\r\n  [key: string]: any;\r\n};\r\n\r\n/**\r\n * @class Component\r\n * @description\r\n * 컴포넌트를 구현하기 위한 클래스입니다.\r\n */\r\nexport class Component extends EventEmitter {\r\n  public name?: string;\r\n  private props?: ComponentProp;\r\n\r\n  constructor(props: ComponentProp) {\r\n    super();\r\n    this.init(props);\r\n  }\r\n\r\n  init(props: ComponentProp) {\r\n    this.props = props;\r\n\r\n    this.on(\"ready\", (props: ComponentProp) => this.onReady(props));\r\n    this.on(\"mounted\", (props: ComponentProp) => this.mounted(props));\r\n    this.on(\"destroy\", (props: ComponentProp) => this.onDestroy());\r\n  }\r\n\r\n  ready() {\r\n    this.emit(\"ready\", this.props);\r\n  }\r\n\r\n  destroy() {\r\n    this.emit(\"destroy\", this.props);\r\n  }\r\n\r\n  execute() {\r\n    this.emit(\"mounted\", this.props);\r\n  }\r\n\r\n  onReady(props: ComponentProp) {}\r\n  onDestroy() {}\r\n  mounted(props: ComponentProp) {}\r\n}\r\n","// 함수 타입\r\ntype FunctionLike = Function;\r\n// 이벤트 키 타입\r\ntype EventKey = string;\r\n\r\n/**\r\n * 이벤트 리스터를 정의합니다.\r\n */\r\ntype VMEventListener = { [key: EventKey]: Function[] };\r\ntype EventNames = \"ready\" | \"mounted\" | \"destroy\";\r\n\r\n/**\r\n * @class EventEmitter\r\n * @description\r\n * 이벤트를 전달하기 위한 클래스입니다.\r\n */\r\nexport class EventEmitter {\r\n  constructor(private _listeners: VMEventListener = {}) {\r\n    this._listeners = {};\r\n  }\r\n\r\n  /**\r\n   * 호출할 이벤트를 등록합니다.\r\n   *\r\n   * @param eventName 호출할 이벤트 명\r\n   * @param func\r\n   * @returns\r\n   */\r\n  on(eventName: EventNames, func: FunctionLike) {\r\n    if (!this._listeners[eventName]) {\r\n      this._listeners[eventName] = [];\r\n    }\r\n\r\n    if (!func) {\r\n      return;\r\n    }\r\n\r\n    if (func instanceof Function) {\r\n      this._listeners[eventName].push(func);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 등록된 이벤트를 호출합니다.\r\n   *\r\n   * @param eventName 호출할 이벤트 명\r\n   * @param args\r\n   * @returns\r\n   */\r\n  emit(eventName: EventNames, ...args: any[]) {\r\n    if (!this._listeners[eventName]) {\r\n      return;\r\n    }\r\n\r\n    this._listeners[eventName].forEach((func) => {\r\n      if (!(func instanceof Function)) {\r\n        console.warn(\"호출된 이벤트 리스너가 함수가 아닙니다.\");\r\n        return;\r\n      }\r\n\r\n      func(...args);\r\n    });\r\n  }\r\n}\r\n","import { BaseComponent } from \"./BaseComponent\";\r\n\r\n/**\r\n * @class NamwWindowPositionComponent\r\n * @description\r\n * 이름 윈도우의 X좌표를 재설정합니다.\r\n */\r\nexport class NameWindowPositionComponent extends BaseComponent {\r\n    setOpacity(value: number) {\r\n        let opacity = value;\r\n        if (typeof opacity !== \"number\") {\r\n            opacity = Number(opacity);\r\n        }\r\n        if (isNaN(opacity)) {\r\n            opacity = 255;\r\n        }\r\n        this._nameWindow.opacity = value;\r\n    }\r\n\r\n    updatePositionX() {\r\n        // 이름 윈도우가 없다면\r\n        if (!this._nameWindow) {\r\n            return;\r\n        }\r\n\r\n        const mx = this.x;\r\n        const w = this.width;\r\n        const nw = this._nameWindow.width;\r\n\r\n        const position = <NameWindowPositon>(\r\n            RS.MessageSystem.Params.namePositionTypeAtX\r\n        );\r\n\r\n        const nx = RS.MessageSystem.Params.nameWindowX;\r\n\r\n        let newX = mx + nx;\r\n\r\n        switch (position) {\r\n            case \"right\":\r\n                newX = mx + w - nw - nx;\r\n                break;\r\n            case \"center\":\r\n                newX = mx + w / 2 - nw / 2 - nx;\r\n                break;\r\n            case \"left\":\r\n                newX = mx + nx;\r\n                break;\r\n            case \"opacity0\":\r\n                this.setOpacity(0);\r\n                break;\r\n            case \"defaultOpacity\":\r\n                this.setOpacity(RS.MessageSystem.Params.defaultOpacity);\r\n                break;\r\n            case \"auto\":\r\n                newX = this.x + this.newLineX() + nx;\r\n                break;\r\n        }\r\n\r\n        this._nameWindow.x = newX;\r\n    }\r\n\r\n    updatePositionY() {\r\n        const ox = RS.MessageSystem.Params.windowOffset.x;\r\n        const oy = RS.MessageSystem.Params.windowOffset.y;\r\n        const positionType = $gameMessage.positionType();\r\n        const ballonOwnerType = $gameMessage.getBalloon();\r\n\r\n        this.updatePositionX();\r\n\r\n        // 메시지 윈도우가 상단이고, 말풍선 모드가 아니라면\r\n        if (positionType === 0 && ballonOwnerType === -2) {\r\n            // 최상단의 위치\r\n            const topY = 0;\r\n\r\n            this._nameWindow.y = topY + oy;\r\n\r\n            // 이름 윈도우가 열렸는 지 여부에 따라 메시지 윈도우의 Y 좌표를 설정합니다.\r\n            this.y = this._nameWindow.isOpen()\r\n                ? topY +\r\n                  this._nameWindow.height +\r\n                  RS.MessageSystem.Params.nameWindowY +\r\n                  oy\r\n                : topY + oy;\r\n        } else {\r\n            this._nameWindow.y =\r\n                this.y -\r\n                this._nameWindow.height -\r\n                RS.MessageSystem.Params.nameWindowY;\r\n        }\r\n    }\r\n}\r\n","interface DataLinkSet {\r\n    callbackFunction: Function;\r\n    active: boolean;\r\n}\r\n\r\n/**\r\n * @class ComponentExecutor\r\n * @author biud436\r\n * @description\r\n * ComponentExecutor는 컴포넌트를 샌드박스 환경에서 안전하게 실행합니다.\r\n * 샌드박스 환경이라는 것은 주요 메서드가 외부와 차단되어, 예외 처리를 통하여 각종 오류를 캐치할 수 있게 합니다.\r\n */\r\nexport default class ComponentExecutor {\r\n    public static INSTANCE: ComponentExecutor;\r\n    private _components: Record<string, DataLinkSet> = {};\r\n\r\n    public static getInstance(): ComponentExecutor {\r\n        if (!ComponentExecutor.INSTANCE) {\r\n            ComponentExecutor.INSTANCE = new ComponentExecutor();\r\n        }\r\n        return ComponentExecutor.INSTANCE;\r\n    }\r\n\r\n    public constructor() {}\r\n\r\n    public add(name: string, func: Function): ComponentExecutor {\r\n        if (name === \"\") {\r\n            let startChar = 97; // a\r\n            let endChar = 122; // z\r\n            let len = 7; // length of random string\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                name += String.fromCharCode(\r\n                    Math.floor(Math.random() * (endChar - startChar)) +\r\n                        startChar\r\n                );\r\n            }\r\n        }\r\n\r\n        this._components[name] = <DataLinkSet>{\r\n            callbackFunction: func,\r\n            active: false,\r\n        };\r\n\r\n        return this;\r\n    }\r\n\r\n    public wrap(name: string, func: Function): ComponentExecutor {\r\n        return this.add(name, func);\r\n    }\r\n\r\n    public get(name: string): Function {\r\n        const prop = this._components[name];\r\n\r\n        return prop.callbackFunction;\r\n    }\r\n\r\n    public active(name: string): ComponentExecutor {\r\n        const prop = this._components[name];\r\n\r\n        prop.active = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    public deactive(name: string): ComponentExecutor {\r\n        const prop = this._components[name];\r\n\r\n        prop.active = false;\r\n\r\n        return this;\r\n    }\r\n\r\n    public ready(name: string): ComponentExecutor {\r\n        return this.active(name);\r\n    }\r\n\r\n    public executeAll() {\r\n        try {\r\n            for (const key in this._components) {\r\n                const prop = this._components[key];\r\n\r\n                if (prop.active) {\r\n                    const currentCallback = this.get(key);\r\n\r\n                    if (currentCallback instanceof Function) {\r\n                        currentCallback();\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}